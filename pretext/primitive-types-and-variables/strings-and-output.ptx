<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="text-output">
  <title>Text output</title>
  <introduction>
    <p>
      A lot of what happens when a computer program runs is invisible, happening
      only within the computer’s memory. But ultimately we need some way to
      convey information to humans outside the computer. If running the program
      has no effect on the world outside the computer, what was the point of
      running it? These days computers can communicate with the outside world in
      all sorts of ways: sound, graphics, animated videos, even physical robots
      moving around the world. But one of the simplest ways for a program to
      communicate with us is to emit textual output to the screen.
    </p>

    <p>
      In this section we will learn about how Java represents text and how to
      print values to the screen allowing us to write programs that actually do
      something.
    </p>
  </introduction>

  <subsection xml:id="output">
    <title>
      <c>println</c> and <c>print</c>
    </title>

    <idx>output</idx>
    <p>
      Java has two different methods to print output to the screen which we saw
      in passing in the Introduction.
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>System.out.println(value)</c> prints the the textual
            representation of value followed by a new line (<c>println</c> is an
            abbreviation for “print line”.)
          </p>
        </li>

        <li>
          <p>
            <c>System.out.print(value)</c> prints the textual representation of
            value without advancing to the next line
          </p>
        </li>
      </ul>
    </p>

    <p>
      The <em>value</em> between the parentheses can be any Java
      <term>expression</term> which just means some bit of code that produces a
      value. One simple kind of expression is a <term>literal value</term> which
      is a way of representing a value directly—or literally—in our code. For
      instance <c>42</c> is a literal expression representing the <c>int</c>
      value 42. When we print a value with <c>print</c> or <c>println</c>, Java
      converts the value to its textual representation and then emits that to
      the screen. So we could write <c>System.out.print(42)</c> to print the
      text <c>42</c>. Another trivial kind of expression is a variable, whose
      value is whatever value was last assigned to it.
    </p>
  </subsection>

  <subsection>
    <title>Strings</title>
    <idx>String</idx>
    <idx>String literal</idx>
    <p>
      In order to print out a value Java has to convert it to text. In Java,
      text is represented with a data type called a <c>String</c>. (Why are they
      called "strings"? Java didn’t make it up; computer scientists have been
      using “string” to refer to sequences of items since at least the 1940s.
      Think “string of pearls” or “string of ponies” but in this case a “string
      of characters”, where “character” is what computer scientists call
      letters, numbers, punctuation, spaces, etc.)
    </p>

    <p>
      If we wanted to store any text, from a person’s name to the contents of a
      novel, in a Java program, we would represent it as a <c>String</c>. As
      another data type, like <c>int</c> and <c>double</c>, we can declare
      <c>String</c> variables. We’ll learn a lot more about the <c>String</c>
      data type in <xref ref="topic-1-15-strings" /> but for now we just need to
      know we can write <term>string literals</term> by enclosing the text we
      want in quotation marks: <c>""</c>.
    </p>

    <p>
      For instance <c>"Hi there!"</c> is a string literal whose value is the
      text: <c>Hi there!</c>. The quotation marks are not part of the value;
      they are the syntax for writing the string literal. Thus the code
      <c>System.out.println("Hi there!");</c> prints the text <c>Hi there!</c>
      on the screen, without the quotation marks, and then advances to the next
      line.
    </p>

    <activity label="printCommands">
      <statement>
        <p>
          Run this code to see the output below it. How would you change it to
          print the ! on the same line as Hi there keeping all 3 print
          statements?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class MyClass
{
    public static void main(String[] args)
    {
        System.out.print("Hi ");
        System.out.println("there");
        System.out.print("!");
    }
}
        </code>
        <tests>
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hi there!";
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testLineCount() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "1 output line";
        String actual = "  output line";

        if (output.length() &gt; 0)
        {
            actual = output.split("\n").length + actual;
        }
        else
        {
            actual = output.length() + actual;
        }
        boolean passed =
                getResults(expect, actual, "Checking lines of output");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="string-escapes">
    <title>String escapes</title>
    <p>
      What if we wanted to print out a double quote <c>"</c> character? Since
      <c>"</c> has a special meaning within Java’s string literals, it might
      seem there’d be no way to include it within a string. However, Java
      provides a way to write string literals that contain double quotes using a
      mechanism called <term>escaping</term>. To “escape” the normal syntax of a
      string literal, where a quotation mark would indicate the end of the
      string, we put a backslash (<c>\</c>) in front of the quotation mark which
      tells Java to include the following quotation mark in the string value
      rather than treating it as the end of the literal. This is called a
      <term>backslash escape sequence</term>. Since backslash is used this way,
      that also makes <em>it</em> a special character, so if we want to include
      a backslash in a string literal, we need to escape it with another
      backslash! There are a handful of other backslash escape sequences. The
      only other one the College Board wants you to know about is <c>\n</c>
      which will be translated to a newline character, which will break the text
      across lines.
    </p>

    <note>
      <p>
        Unfortunately, different operating systems use different characters to
        represent the end of a line. <c>println</c> actually uses whatever is
        appropriate on the computer the program is running on. On MacOS and
        Linux that will be the same character as we can write in a string
        literal with <c>\n</c>. On Windows, however, it will be the two
        character sequence that would be written <c>\r\n</c>. To make our code
        run the same everywhere, we’d have to use only <c>println</c> when we
        want a new line. The College Board does want you to know about the
        <c>\n</c> escape sequence, however.
      </p>
    </note>

    <activity label="bhescape">
      <statement>
        <p>
          Here are the escape sequences that may be used in the AP course.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class TestEscape
{
    public static void main(String[] args)
    {
        System.out.print("Here is a backslash quote \" ");
        System.out.print("and a backslashed backslash (\\) ");
        System.out.println("Backslash n \nprints out a new line.");
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = output;
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="scanner">
    <title>Input</title>
    <p>
      The flip side of emitting output to the user is getting input from the
      user. Just as there are lots of ways for computers to generate output,
      modern programs can accept all kinds of input: UI gestures such as the
      user clicking on a button, audio input from the computer’s microphone,
      visual input from a camera, etc. But as with output the simplest to deal
      with is textual input. In <xref ref="text-files" /> we’ll look at how to
      read input from files saved on the computer. But sometimes it’s useful to
      be able to get input typed by the user as a program runs.
    </p>

    <p>
      The AP curriculum doesn’t require you to know any particular way of
      dealing with user input but does mention the <c>Scanner</c> class that
      comes with Java as one way. And knowing how to use <c>Scanner</c> will let
      us write programs whose behavior can change depending on their input.
    </p>

    <p>
      The code below uses the <c>Scanner</c> class to read a name the user types
      in and then says hello. It will have different results depending no what
      the user types. Try it by typing in your name in the box below the code
      before you click “Run”. Try again with a friend’s name. The code works for
      any name.
    </p>

    <activity label="inputName">
      <title>Program with user input</title>
      <statement>
        <p>
          The code below will say hello to anyone who types in their name. Type
          in your name in the box below the code and then click on “Run”. Try
          again with a friend’s name.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
import java.util.Scanner;

public class Main
{
    public static void main(String[] args)
    {
        System.out.println("Please type in a name in the input box below.");
        Scanner scan = new Scanner(System.in);
        String name = scan.nextLine();
        System.out.println("Hello " + name);
        scan.close();
     }
 }
        </code>
        <stdin>your name</stdin>
        <tests>
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        //String output = getMethodOutput("main");
        boolean passed =
                getResults("", "", "Scanner example", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      Although you will not be tested in the AP CSA exam on using the Java input
      from the keyboard, learning how to do input in Java is very useful and
      fun. For more information on using the <c>Scanner</c> class, go to <url
      href="https://www.w3schools.com/java/java_user_input.asp"
      visual="https://www.w3schools.com/java/java_user_input.asp">https://www.w3schools.com/java/java_user_input.asp</url>,
      and for the newer <c>Console</c> class, <url
      href="https://howtodoinjava.com/java-examples/console-input-output/"
      visual="https://howtodoinjava.com/java-examples/console-input-output/">https://howtodoinjava.com/java-examples/console-input-
      output/</url>. We are limited with the one way communication with the Java
      server in this Runestone ebook, but in most IDEs, the input/output would
      be more interactive. You can try this <url
      href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/2e6655aa-a1b1-446e-9302-8ae43ab07e54#18fe2d0b-9011-40b1-b384-f956576a86a7"
      visual="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/2e6655aa-a1b1-446e-9302-8ae43ab07e54#18fe2d0b-9011-40b1-b384-f956576a86a7">Scanner
      input example in JuiceMind</url> (click on Create Starter Code after login
      with a Google account) or <url
      href="https://replit.com/@BerylHoffman/JavaIOExample"
      visual="https://replit.com/@BerylHoffman/JavaIOExample">Scanner input
      example in Replit</url> using the <c>Scanner</c> class and <url
      href="https://replit.com/@BerylHoffman/JavaIOConsole"
      visual="https://replit.com/@BerylHoffman/JavaIOConsole">Console input
      example</url> using the <c>Console</c> class. We will also learn how to
      use <c>Scanner</c> with input files in a later unit.
    </p>
  </subsection>

  <subsection xml:id="coding-challenge-mad-libs">
    <title>Coding Challenge : Mad Libs</title>
    <p>
      Have you ever played MAD LIBS? In this game, you first choose a bunch of
      words following clues like give me a color or a plural noun, without
      looking at the story, and then those words are filled into the story to
      make it sound very wacky! Fill in the variables below with silly words,
      and then run to see the wacky story.
    </p>

    <p>
      Then, working in pairs, come up with another silly story that uses at
      least 5 new String variables. When you’re done, try another team’s mad
      libs code. For more advanced programming, you could create this program in
      a Java IDE that can do input using the <url
      href="https://www.w3schools.com/java/java_user_input.asp"
      visual="https://www.w3schools.com/java/java_user_input.asp">Scanner
      class</url> to read in input into the variables.
    </p>

    <project label="challengeMadLibs">
      <title>Mad Libs</title>
      <statement>
        <p>
          Replace the text “Replace” below with silly words following the
          description in the variable names (for example, “cats” for a plural
          noun, “blue” for a color, etc.) to create a silly poem. Run the code
          to see the poem. Then, create your own silly story using 5 more String
          variables.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class MadLibs1
{
    public static void main(String[] args)
    {
        // fill these in with silly words/strings (don't read the poem yet)
        String pluralnoun1 = "Replace";
        String color1 = "Replace";
        String color2 = "Replace";
        String food = "Replace";
        String pluralnoun2 = "Replace";


        // Run to see the silly poem!
        System.out.println("Roses are " + color1);
        System.out.println(pluralnoun1 + " are " + color2);
        System.out.println("I like " + food);
        System.out.println("Do " + pluralnoun2 + " like them too?");

        // Now come up with your own silly poem!
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Roses are *\n* are *\nI like *\nDo * like them too?";

        boolean passed = getResultsRegEx(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void testNull() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Replace";

        String actual = countOccurences(output, expect) + " Replace values";

        boolean passed = getResults("0 Replace values", actual, "Change all \"Replace\" values");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection>
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 1.3.A.1) <title_reference>System.out.print</title_reference> and
            <title_reference>System.out.println</title_reference> are Java
            output statements that display information on the computer screen.
            <title_reference>System.out.println</title_reference> moves the
            cursor to a new line after the information has been displayed, while
            <title_reference>System.out.print</title_reference> does not.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.B.1) A <term>literal</term> is the code representation of a
            fixed value, which can be a string or a numerical value.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.B.2) A <term>string literal</term> is a sequence of zero to
            many characters enclosed in starting and ending double quotes.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.B.3) <term>Escape sequences</term> are special sequences of
            characters that can be included in a string. They start with a
            <title_reference> ` and have a special meaning in Java. Escape
            sequences used in this course include double quote `”
            </title_reference> , backslash <title_reference>`, and newline
            `n</title_reference>.
          </p>
        </li>

        <li>
          <p>
            (AP 1.4.B.1) Input can come in a variety of forms, such as tactile,
            audio, visual, or text. The <c>Scanner</c> class is one way to
            obtain text input from the keyboard, although input from the
            keyboard will not be on the AP exam.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-7">
    <title>AP Practice</title>
    <activity label="AP1-3-1">
      <statement>
        <p>Consider the following code segment.</p>
        <program language="java">
          <code>
System.out.print("Java is ");
System.out.println("fun ");
System.out.print("and cool!");
          </code>
        </program>

        <p>What is printed as a result of executing the code segment?</p>
      </statement>

      <choices>
        <choice>
          <statement id="AP1-3-1_opt_a">
            <p>
              <pre>Java is fun and cool!
              </pre>
            </p>
          </statement>

          <feedback id="AP1-3-1_opt_a">
            <p>Notice the println in line 2.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP1-3-1_opt_b">
            <p>
              <pre>Java isfun
and cool!
              </pre>
            </p>
          </statement>

          <feedback id="AP1-3-1_opt_b">
            <p>Notice the space after is in the first line.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP1-3-1_opt_c">
            <p>
              <pre>Java is
fun
and cool!
              </pre>
            </p>
          </statement>

          <feedback id="AP1-3-1_opt_c">
            <p>Notice that the first line is a print, not println.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP1-3-1_opt_d">
            <p>
              <pre>Java is fun
and cool!
              </pre>
            </p>
          </statement>

          <feedback id="AP1-3-1_opt_d">
            <p>
              Correct! Looks like you paid attention to which lines used print
              and which ones used println.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
