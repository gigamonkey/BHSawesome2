<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-5-casting">
  <title>Getting math right</title>

  <introduction>
    <p>
      Java's two numeric types, <c>int</c> and <c>double</c>, serve different
      purposes: if we’re counting things <c>int</c>s are great. And
      <c>double</c>s are great for scientific calculations such as those
      involving measured quantities. But some computations will require us to
      work with values of both types which will require us to control when we
      convert between the two types if we want to get mathematically correct
      results.
    </p>

    <p>
      Also both data types have some limitations that we need to understand in
      order to avoid mathmatically nonsensical results. (For instance, you’d
      probably get an F in math class if you said <c>2147483647 + 1</c> was
      <c>-2147483648</c>. But that’s what you’d get from Java due to the
      limitation on the range of values that can be represented with an
      <c>int</c>!
    </p>

    <p>
      In this lesson we will look at the <term>cast</term> operator that we can
      use to convert between types, a recipe for <term>rounding</term>
      <c>double</c>s to their nearest <c>int</c> equivalent, and those
      limitations on both <c>int</c> and <c>double</c> values.
    </p>
  </introduction>

  <subsection xml:id="casting">
    <title>Casting</title>

    <idx>cast</idx>
    <idx>casting</idx>
    <idx>type casting</idx>
    <p>
      In Java, <term>type casting</term> is used to convert values from one type
      to another. By <term>casting</term> we don’t mean something to do with
      fishing, but it is a similar idea to casting a bronze, without needing to
      heat anything to 913 degrees Celsius. But like molten bronze is reshaped
      by melting it and pouring it into a mold, our data is reshaped via a
      <term>cast</term> operator. In Java when you cast you are changing the
      “shape” (or type) of the value.
    </p>

    <figure align="center">
      <caption>Bronze casting changes the shape of the metal.</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/bronze-casting.jpg" width="54%" />
    </figure>

    <p>
      The <term>cast operator</term>, which looks like <c>(int)</c> and
      <c>(double)</c> placed before any expression (a literal, a number, a
      variable, or more complex expression in parentheses) produces a value of
      the given type by converting the value of the original expression to the
      new type. The casting operators <c>(int)</c> and <c>(double)</c> can be
      used to convert from a double value to an int value (or vice versa).
    </p>

    <p>
      For example, <c>(double) 1 / 3</c> will evaluate to a <c>double</c> value
      <c>0.33333333</c> instead of an <c>int</c> truncated value <c>0</c>. And
      <c>(int) 3.6</c> will evaluate to the <c>int</c> value <c>3</c>, chopping
      off the digits to the right of the decimal point.
    </p>

    <p>
      A conversion from <c>int</c> to <c>double</c> is called a <term>widening
      conversion</term> because a <c>double</c> can represent any <c>int</c>
      value but not vice versa; thus a <c>double</c> is considered a wider data
      type than an <c>int</c>.
    </p>

    <note>
      <p>
        <c>int</c>s in Java are always 32-bit signed values which mean they can
        represent values from <m>-2^{31}</m> to <m>2^{31} - 1</m>, inclusive,
        while the range of consecutive integer values that can be represented by
        a double is from <m>-2^{53}</m> to <m>2^{53}</m>, inclusive. (A
        <c>double</c> can also represent much larger values but with limited
        precision.) You can refer to the minimum and maximum <c>int</c> values
        with the constants <c>Integer.MIN_VALUE</c> and
        <c>Integer.MAX_VALUE</c>.
      </p>
    </note>

    <activity label="cast-division">
      <title>Dividing mixed types</title>

      <statement>
        <p>
          Run this code to see how Java handles division and what casting can do
          to the results. Notice what happens when you divide an <c>int</c> by
          an <c>int</c> or an <c>int</c> by a <c>double</c> or an <c>int</c>
          cast to a <c>double</c> divided by an <c>int</c>.
        </p>

        <p>
          Then add another line that divides <c>5</c> by <c>2</c> but casting
          one of the values to <c>(double)</c>. What is the result?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class Casting {
              public static void main(String[] args) {
                  System.out.println(3 / 4);          // int divided by int
                  System.out.println(3.0 / 4);        // double divided by int
                  System.out.println(3 / 4.0);        // int divided by double
                  System.out.println((double) 3 / 4); // int cast to double, divided by int
                  System.out.println((int) 3.0 / 4);  // double cast to int, divided by int
                  // Add a line of code that prints out the result of dividing 5 by 2
                  //  using a (double) cast.

              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect =
                          "0\n"
                              + "0.75\n"
                              + "0.75\n"
                              + "0.75\n"
                              + "0\n"
                              + "2.5\n";
                  boolean passed =
                          getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection>
    <title>Casting to double</title>

    <p>
      As you can see in the exercise above, when Java divides two <c>int</c>s,
      it produces an <c>int</c> result by truncating the actual mathematical
      result, removing anything after the decimal point. Thus <c>3 / 4</c>
      evaluates to <c>0</c>, not <c>0.75</c> as we might expect. It also does
      not evaluate to <c>1</c> even thoun <c>0.75</c> is closer to <c>1</c> than
      it is to <c>0</c>; truncating is not the same as rounding!
    </p>

    <p>
      But as we learned in <xref ref="topic-1-3-expressions" />, in any
      expression involving a <c>double</c>, the <c>double</c> is “contagious”
      and will cause the other operand to be turned into a <c>double</c> and
      thus the value of the expression as a whole to be computed using the rules
      of <c>double</c> math. Thus the expression <c>3.0 / 4</c> is evaluated as
      if it had been written <c>3.0 / 4.0</c> and produces the <c>double</c>
      value <c>0.75</c>.
    </p>

    <p>
      If an expressions involves at least one literal value then we can just use
      a literal <c>double</c> to force Java to use <c>double</c> math. But what
      if we want to evaluate an expression using <c>int</c> variables but under
      the rules of <c>double</c> math?
    </p>

    <p>
      That’s where casting comes in. Since casting an <c>int</c> to
      <c>double</c> produces a <c>double</c> value, if that value is the operand
      in an expression, it will then infect the other operand and cause the
      expression as a whole to produce a <c>double</c>. This is especially
      useful when we have <c>int</c> variables that we want to do non-integer
      division with:
    </p>

    <program language="java">
      <code>
        int total; // a variable containing the sum of a bunch of ints
        int count; // the number of ints that went into total

        // Compute the average of the bunch of ints summed into total.
        double average = (double) total / count;
      </code>
    </program>

    <p>
      Another thing to notice is that cast is an operator, just like <c>+</c>,
      <c>*</c>, <c>-</c>, <c>/</c>, and <c>%</c>. So it has a precedence just
      like all the other operators and it is actually quite high. The expression
      above works because the cast of <c>total</c> to <c>double</c> happens
      first and then that <c>double</c> value infects <c>count</c> and the whole
      expression is computed using <c>double</c> math. If instead, we had
      written:
    </p>

    <program language="java">
      <code>
        double average = (double) (total / count);
      </code>
    </program>

    <p>
      then the division would have happened first, yielding a truncated
      <c>int</c> value which would then—too late—be converted to the equivalent
      <c>double</c> value, losing the fractional part of the true mathematical
      answer.
    </p>
  </subsection>

  <subsection xml:id="rounding">
    <title>Casting to int</title>

    <idx>rounding</idx>
    <p>
      Since casting a <c>double</c> value to <c>int</c> throws away mathematical
      precision it might seem that we’d rarely want to do that. But we can use
      truncation, with a bit of arithmetic, to round <c>double</c> values to the
      nearest <c>int</c> value by adding or subtracting 0.5 and then casting the
      result with <c>(int)</c>:
    </p>

    <program language="java">
      <code>
        double number;    // positive value from somewhere
        double negNumber; // negative value from somewhere

        int nearestInt = (int) (number + 0.5);
        int nearestNegInt = (int) (negNumber – 0.5);
      </code>
    </program>

    <p>
      For example, if we divide <c>7.0 / 4.0</c> we get <c>1.75</c>. And if we
      cast that to an <c>int</c>, it would be truncated to <c>1</c>. But if we
      want to round it to the nearest <c>int</c>, rather than truncating it,
      adding <c>0.5</c> will produce a number that is greater than <c>2.0</c>
      and thus will get truncated to <c>2</c>. Assuming we’re okay rounding
      above the next integer value if the decimal part is greater than
      <c>0.5</c>, as it is here. Then casting <em>that</em> value to an
      <c>int</c> will truncate down. So in this case <c>1.75 + 0.5</c> gives us
      <c>2.25</c> which is then truncated to <c>2</c>. On the other hand adding
      <c>0.5</c> to the result of evaluating <c>5.0 / 4.2</c>, namely
      <c>1.25</c>, only gets us to <c>1.75</c> which truncates back to <c>1</c>
      which is the nearest integer to <c>1.25</c>.
    </p>

    <p>
      And notice that here we need to parenthesize the expression <c>number +
      0.5</c> so that it is evaluated first and then the result cast to a
      <c>double</c>. Without the parentheses, the cast to <c>int</c> would
      convert <c>number</c> to an <c>int</c> first because of the higher
      precedence of casting than division, and then that truncated <c>int</c>
      value would be infected by the <c>0.5</c> giving us a double result with a
      fractional part of <c>0.5</c>.
    </p>

    <activity label="nearestInt">
      <title>Test rounding</title>

      <statement>
        <p>
          Run the code below to see how the formula of adding or subtracting .5
          and then casting with (int) rounds a positive or negative double
          number to the closest int. Add a line of code that rounds number + 2.3
          to the nearest int.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class NearestInt
          {
              public static void main(String[] args)
              {
                  double number = 5.0 / 3;
                  int nearestInt = (int) (number + 0.5);
                  System.out.println("5.0/3 = " + number);
                  System.out.println("5/3 truncated: " + (int) number);
                  System.out.println("5.0/3 rounded to nearest int: " + nearestInt);
                  double negNumber = -number;
                  int nearestNegInt = (int) (negNumber - 0.5);
                  System.out.println(
                          "-5.0/3 rounded to nearest negative int: " + nearestNegInt);

                  // Print the result of rounding (number + 2.3) to the nearest int.

              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect =
                          "5.0/3 = 1.6666666666666667\n"
                              + "5/3 truncated: 1\n"
                              + "5.0/3 rounded to nearest int: 2\n"
                              + "-5.0/3 rounded to nearest negative int: -2\n"
                              + "4";

                  boolean passed =
                          getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="range-of-values">
    <title>Limits of int and doubles</title>

    <idx><h>double</h><h>number of digits</h></idx>
    <p>
      Both the <c>int</c> and <c>double</c> data types have limitations in the
      numbers they can represent. These limitations are due to the fact that for
      efficiency reasons computer hardware represents both types using a fixed
      number of bits, 32 bits for each <c>int</c> and 64 bits for a
      <c>double</c>.
    </p>

    <p>
      For <c>int</c>s, this means there is a biggest number that can be
      represented, just like there’s a biggest number that can be represented in
      a fixed number of digits. Because <c>int</c>s can represent both positive
      and negative numbers, half of the bit patters are used to represent
      negative numbers and half to represent the non-negative numbers including
      zero. The maximum <c>int</c> value is <m>2,147,483,647</m> also known as
      <m>2^{31} - 1</m>. The minimum value (most negative) is
      <m>-2,147,483,648</m> or <m>-(2^{31})</m>. There are constants in Java,
      <c>Integer.MAX_VALUE</c> and <c>Integer.MIN_VALUE</c>, that we can use if
      we need to refer to those values in a program.
    </p>

    <p>
      If we try to store value smaller than <c>Integer.MIN_VALUE</c> or bigger
      than <c>Integer.MAX_VALUE</c> in an <c>int</c> variable or if an
      expression that is supposed to produce an <c>int</c> value would produce a
      value outside that range, the result <term>overflows</term> and produces a
      mathematically incorrect value. Roughly speaking the value will “wrap
      around” so, for instance, <c>Integer.MAX_VALUE + 1</c> gives us the same
      value as <c>Integer.MIN_VALUE</c> and <c>Integer.MIN_VALUE - 1</c> brings
      us back to <c>Integer.MAX_VALUE</c>.
    </p>

    <p>
      If we try to write a literal <c>int</c> that it out of range the compiler
      will give us an error as shown in the exercise below.
    </p>

    <activity label="overfl">
      <statement>
        <p>
          Try the code below to see two integer overflows for a positive and
          negative number. An int cannot hold that many digits! Fix the integer
          overflow by deleting the last 0 in the numbers to store less digits.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class TestOverflow
          {
              public static void main(String[] args)
              {
                  int id = 2147483650; // overflow
                  int negative = -2147483650; // overflow
                  System.out.println(id);
                  System.out.println(negative);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "214748365\n-214748365\n";

                  boolean passed =
                          getResults(
                                  expect, output, "Fixed Integer Overflow Error");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <p>
      The <c>double</c> type, despite using twice as many bits per number as
      <c>int</c>s, also has limitations. Doubles work more like scientific
      notation, storing a signed magnitude, and an exponent. This means they can
      represent both very small numbers (the smallest positive value is
      approximately <m>4.9 \times 10^{-324}</m>) and very large (the largest
      positive <c>double</c> value is approximately <m>1.8 \times 10^{308}</m>.)
    </p>

    <p>
      However this means, that like scientific notation, there is a limit to the
      precision with which <c>double</c>s can represent numbers, about 14-15
      decimal places. That has a few consequences. One is that irrational
      numbers like <m>\pi</m> and <m>\sqrt{2}</m> that have an infinite decimal
      representation can only be approximated. But also simpler numbers like 1/3
      which have repeating decimal representations can only be approximated. So
      the value we get if we evaluate <c>1.0 / 3.0</c> is actually roughly
      <m>1.85 \times 10^{-17}</m> less than 1/3.
    </p>

    <p>
      In practice, of course, 14-15 digits of precision is plenty for most
      purposes. But you should be aware that the accuracy of any calculation on
      a computer is limited by the fact that computers can only hold a limited
      number of digits. When these limitations lead to incorrect results it is
      called a <term>roundoff error</term>. Programmers who write software that
      does complex scientific calculations do something called <term>numeric
      analysis</term> to make sure their programs won’t be affected by roundof
      errors but most of us don’t have to worry about that most of the time.
    </p>

    <idx><h>double</h><h>precision format</h></idx>
    <note>
      <p>
        Although it’s not on the AP exam, you can format long decimal numbers to
        just show 2 digits after the decimal point with the following code using
        <c>printf</c> a formatted print method or <c>format</c> instead of
        <c>println</c>. It takes a format string like <c>%.02f</c> which tells
        <c>printf</c> to print a floating point number indicated by the <c>%</c>
        with 2 digits after the decimal point. See <url
        href="https://docs.oracle.com/javase/tutorial/java/data/numberformat.html">https://docs.oracle.com/javase/tutorial/java/data/numberformat.html</url>
        for more information. You can also use escape characters like <c>\n</c>
        in the format string to do a newline. Try it below.
      </p>
    </note>

    <activity label="double_precision">
      <title>Using printf</title>

      <statement>
        <p>
          Run the code below to see how a decimal number can be formatted to
          show 2 digits after the decimal point. Try it with 2.0/3.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class TestFormat
          {
              public static void main(String[] args)
              {
                  double number = 10.0 / 3;
                  // Note that this gets cut off after 15 digits
                  System.out.println("Number cut off after 15 digits: " + number);
                  // We could turn it into an int with some loss of precision
                  System.out.println("Number as an int: " + (int) number);
                  // Or format it to show 2 digits after .
                  System.out.printf("Formatted number: %.2f", number);
                  // format also with $ and newline
                  System.out.printf("\nFormatted number: $%.2f\n", number);
                  // Print out the result of 2.0/3 formatted to show 2 digits after the decimal point.

              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "0.67";
                  boolean passed = output.contains(expect);
                  passed = getResults(expect, output, "Expected output from main", passed);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="q_round">
      <title>Integer division</title>

      <statement>
        <p>
          True or false: Java rounds up automatically when you do integer
          division.
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>true</p>
          </statement>

          <feedback>
            <p>Did you try this out in Active Code? Does it work that way?</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>false</p>
          </statement>

          <feedback>
            <p>
              Java throws away any values after the decimal point if you do
              integer division. It does not round up automatically.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="q_cast">
      <title>Casting</title>

      <statement>
        <p>True or false: casting always results in a double type.</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>true</p>
          </statement>

          <feedback>
            <p>Try casting to int instead of double. What does that do?</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>false</p>
          </statement>

          <feedback>
            <p>
              Casting results in the type that you cast to. However, if you
              can't really cast the value to the specified type then you will
              get an error.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-average-3-numbers">
    <title>Coding Challenge: Average three numbers</title>

    <p>
      This would be a good project to work together in pairs, and switch drivers
      (who has control of the keyboard in pair programming) after every line of
      code. In the code below, type in three made up int grades and then sum and
      average them. Use casting to report the result as a double. For example,
      if the grades are 90, 100, and 94, the sum of the three numbers is 90 +
      100 + 94 = 284, and the average is the sum 284 divided by 3 which casted
      to a double is 94.666667. You should use your variables instead of the
      numbers in your formulas. Follow the pseudocode below.
    </p>

    <project label="challenge1-5-average">
      <title>Averaging three numbers</title>

      <statement>
        <p>
          Type in three made up int grades and then sum and average them. Use
          type casting to report the result as a double. If you do this
          challenge on replit.com (see template and links below), please paste
          your repl link here to turn it in.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class Challenge1_6
          {
              public static void main(String[] args)
              {
                  // 1. Declare 3 int variables called grade1, grade2, grade3
                  // and initialize them to 3 values

                  // 2. Declare an int variable called sum for the sum of the grades

                  // 3. Declare a variable called average for the average of the grades

                  // 4. Write a formula to calculate the sum of the 3 grades (add them
                  // up).

                  // 5. Write a formula to calculate the average of the 3 grades from
                  // the sum using division and type casting.

                  // 6. Print out the average

              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;
          import java.util.regex.MatchResult;
          import java.util.regex.Pattern;

          /* Do NOT change Main or CodeTestHelper.java.
          Put the active code exercise in a file like ForLoop.java.
          Put your Junit test in the file RunestoneTests.java.
          Run. Test by changing ForLoop.java (student code).
          */

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void test4() throws IOException
              {
                  String actual = getMethodOutput("main");
                  String expect = "double value";

                  boolean passed = actual.matches("[\\s\\S]*[0-9]+.[0-9]+[\\s\\S]*");

                  if (!passed)
                  {
                      getResults(
                              expect,
                              actual,
                              "Checking that output is a double value",
                              passed);
                      assertTrue(passed);
                      return;
                  }

                  String code = getCode();
                  String regex = "grade[0-9]=[0-9]+";

                  String[] matches =
                          Pattern.compile(regex)
                                  .matcher(removeSpaces(code))
                                  .results()
                                  .map(MatchResult::group)
                                  .toArray(String[]::new);

                  int[] grades = new int[3];

                  String hint = "";

                  if (matches.length > 3)
                  {
                      hint = "\n(Did you declare too many grade variables?)";
                  }
                  else if (matches.length < 3)
                  {
                      hint = "\n(Did you declare too few grade variables?)";
                  }

                  for (int i = 0; i < grades.length && i < matches.length; i++)
                  {
                      String val = matches[i].substring(matches[i].indexOf("=") + 1);
                      grades[i] = Integer.parseInt(val);
                  }

                  double exp =
                          (double) (grades[0] + grades[1] + grades[2]) / matches.length;

                  passed =
                          getResults(
                                  "" + exp,
                                  actual,
                                  "Checking that calculation is correct" + hint);
                  assertTrue(passed);
              }

              @Test
              public void test1() throws IOException
              {
                  String code = removeSpaces(getCode());

                  String expect = "Declared grade1, grade2, grade3, and average";
                  String actual = "";
                  String hint = "";

                  boolean passed = true;

                  String regex = "grade[1-3]=[0-9]+";

                  String[] matches =
                          Pattern.compile(regex)
                                  .matcher(removeSpaces(code))
                                  .results()
                                  .map(MatchResult::group)
                                  .toArray(String[]::new);

                  if (matches.length != 3)
                  {
                      passed = false;
                      actual += "Declared " + matches.length + " grade variables\n";
                  }

                  if (!code.contains("doubleaverage"))
                  {
                      passed = false;
                      actual += "Did not declare average as a double";
                  }

                  if (!passed)
                  {
                      hint = "\n(Check spelling and capitalization)";
                  }
                  else
                  {
                      actual = expect;
                  }

                  getResults(
                          expect,
                          actual.trim(),
                          "Checking that variables have been declared properly" + hint,
                          passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() throws IOException
              {
                  String code = getCode();
                  String[] lines = code.split("\n");

                  String expect = "(double)";
                  String actual = "Cast expression as a double";

                  boolean passed = false;

                  if (!code.contains("(double)"))
                  {
                      passed = false;
                      actual = "no (double)";
                  }

                  for (int i = 0; i < lines.length; i++)
                  {
                      String line = lines[i];

                      if (line.contains("(double)"))
                      {
                          passed = true;
                          actual = line.trim();
                          break;
                      }
                  }

                  getResults(
                          expect,
                          actual,
                          "Checking that expression was cast as a double",
                          passed);
                  assertTrue(passed);
              }

              @Test
              public void test2() throws IOException
              {
                  String codeAll = getCode();
                  String[] lines = codeAll.split("\n");

                  String expect = "grade1 + grade2 + grade3\nsum / 3";
                  String actual1 = "", actual2 = "";
                  String hint = "";

                  boolean passed = false;

                  String regex = "grade[1-3]+\\+grade[1-3]+\\+grade[1-3]";

                  for (int i = 0; i < lines.length; i++)
                  {
                      String code = lines[i];
                      String noSpaces = removeSpaces(code);

                      if (noSpaces.matches("[\\s\\S]*" + regex + "[\\s\\S]*"))
                      {
                          passed = true;
                          actual1 = code.trim();
                          break;
                      }
                  }

                  regex = "/3";

                  for (int i = 0; i < lines.length; i++)
                  {
                      String code = lines[i];
                      String noSpaces = removeSpaces(code);

                      if (noSpaces.matches("[\\s\\S]*" + regex + "[\\s\\S]*"))
                      {
                          passed = true;
                          actual2 = code.trim();
                          break;
                      }
                  }

                  String actual = "No such expressions";

                  if (actual1.length() > 0 || actual2.length() > 0)
                  {
                      actual = (actual1 + "\n" + actual2);
                  }

                  if (!passed)
                  {
                      hint = "\n(Check spelling and capitalization)";
                  }

                  getResults(
                          expect,
                          actual,
                          "Checking that grades have been added together and divided by"
                              + " 3"
                                  + hint,
                          passed);
                  assertTrue(passed);
              }
          }

          ]]>
        </tests>
      </program>
    </project>

    <p>
      Your teacher may suggest that you use a different Java IDE for this
      challenge so that you can use input to get these values using the <url
      href="https://www.w3schools.com/java/java_user_input.asp"
      visual="https://www.w3schools.com/java/java_user_input.asp">Scanner
      class</url>, for example with this <url
      href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/5f00d71e-df8f-448f-a767-ed49e7af6f05#cb460a02-de03-4328-b310-ba057cb47a39"
      visual="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/5f00d71e-df8f-448f-a767-ed49e7af6f05#cb460a02-de03-4328-b310-ba057cb47a39">JuiceMind
      template</url> or <url
      href="https://replit.com/@BerylHoffman/Challenge1-6-Average-Template#Main.java"
      visual="https://replit.com/@BerylHoffman/Challenge1-6-Average-Template#Main.java">replit
      template</url> that you can use if you want to try the challenge with
      input.
    </p>
  </subsection>

  <subsection xml:id="bonus-challenge-unicode">
    <title>Bonus Challenge: Unicode</title>

    <p>
      If you get done early with the previous challenge, here’s something else
      fun you can do in Java, although it’s not covered in the AP exam.
    </p>

    <p>
      Java was one of the first programming languages to use <url
      href="https://en.wikipedia.org/wiki/List_of_Unicode_characters"
      visual="https://en.wikipedia.org/wiki/List_of_Unicode_characters">UNICODE</url>
      for its characters rather than ASCII. While ASCII could represent 128
      characters which was plenty for English, Unicode is an international
      standard that tries to assign a number (which they like to call a
      “codepoint”) to every character in every language. Unicode codepoints are
      traditionally represented in hex code (a base 16 code that uses the digits
      0-9 and the letters A-F for 10-15), so you might see things like
      <c>U+1F600</c>. But they’re just numbers. That last one is the same as
      <c>128512</c>.
    </p>

    <p>
      When Java was released in an 1996, Unicode had been around for five years
      and the Unicode people had declared they would only ever need
      <m>2^{16}</m> or 65,536 code points to represent all the characters used
      in the world. So Java included a <c>char</c> data type that can hold
      exactly <m>2^{16}</m> values. Then, seven months later, the Unicode folks,
      said, “Ooops, that’s not enough”, and extended their system to its current
      size of 1,112,064 possible codepoints. (As of September 2024, 154,998
      codepoints have actually been assigned characters.)
    </p>

    <p>
      That made <c>char</c> kind of obsolete. But while not every Unicode
      codepoint can be represented in a Java <c>char</c>, you can use an
      <c>int</c> to represent a codepoint and the method
      <c>Character.toString</c> to translate an <c>int</c> into a <c>String</c>
      containing the character for that codepoint. (You might see older Java
      code that casts numbers to <c>char</c>; for many codepoints that will work
      but not on more recently added codepoints including, critically those for
      Emoji. 😞 So better to use <c>Character.toString</c> and ignore
      <c>char</c>.)
    </p>

    <p>
      Try the following program which prints out an English “A”, a <url
      href="https://unicodelookup.com/#cjk/1"
      visual="https://unicodelookup.com/#cjk/1">Chinese character</url>, and an
      <url href="http://unicode.org/emoji/charts/full-emoji-list.html"
      visual="http://unicode.org/emoji/charts/full-emoji-list.html">emoji</url>.
      Then look up other characters at this <url
      href="https://unicodelookup.com/"
      visual="https://unicodelookup.com/">Unicode Lookup</url> site and change
      the code to print them out. (Use the Dec column in site to get the decimal
      number.) Can you print out letters from 3 different languages?
    </p>

    <project label="challenge1-6-unicode">
      <title>Unicode challenge</title>

      <statement>
        <p>
          Can you print out a letter from 3 different languages using this <url
          href="https://unicodelookup.com/"
          visual="https://unicodelookup.com/">Unicode Lookup</url> site?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class ChallengeUnicode
          {
              public static void main(String[] args)
              {
                  System.out.println(
                          "'A' in ASCII and Unicode: " + Character.toString(65));
                  System.out.println("Chinese for 'sun': " + Character.toString(11932));
                  System.out.println("A smiley emoji: " + Character.toString(128512));

                  // Old style. Doesn't work for all codepoints.
                  System.out.println("This also works: " + (char) 65);
                  System.out.println("But this doesn't: " + (char) 128512);
              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testCount()
              {
                  String code = getCodeWithoutComments();
                  int count = countOccurences(code, "Character.toString");
                  boolean passed = count >= 4;
                  passed =
                          getResults(
                                  "4+",
                                  "" + count,
                                  "Counting number of Character.toString",
                                  passed);
                  assertTrue(passed);
              }
          }

          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-10">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            <term>Type casting</term> is used to convert a value from one type
            to another.
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.A.1) The casting operators <c>(int)</c> and <c>(double)</c>
            can be used to convert from a double value to an int value (or vice
            versa).
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.A.2) Casting a <c>double</c> value to an <c>int</c> causes
            the digits to the right of the decimal point to be truncated (cut
            off and thrown away).
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.A.3) Some code causes int values to be automatically cast
            (widened) to double values. In expressions involving <c>double</c>s,
            the <c>double</c> values are contagious, causing <c>int</c>s in the
            expression to be automatically converted (“widened”) to the
            equivalent <c>double</c> value so the result of the expression can
            be computed as a <c>double</c>.
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.A.4) Values of type <c>double</c> can be rounded to the
            nearest integer by (int)(x + 0.5) or (int)(x – 0.5) for negative
            numbers.
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.B.1) The constant <c>Integer.MAX_VALUE</c> holds the value
            of the largest possible int value. The constant
            <c>Integer.MIN_VALUE</c> holds the value of the smallest possible
            int value.
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.B.2) Integer values in Java are represented by values of
            type <c>int</c>, which are stored using a finite amount (4 bytes) of
            memory. Therefore, an int value must be in the range from
            <c>Integer.MIN_VALUE</c> to <c>Integer.MAX_VALUE</c>, inclusive.
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.B.3) If an expression would evaluate to an int value outside
            of the allowed range, an <term>integer overflow</term> occurs. The
            result is an int value in the allowed range but not necessarily the
            value expected.
          </p>
        </li>

        <li>
          <p>
            (AP 1.5.C.1) Computers allot a specified amount of memory to store
            data based on the data type. If an expression would evaluate to a
            double that is more precise than can be stored in the allotted
            amount of memory, a <term>round-off error</term> occurs. The result
            will be rounded to the representable value. To avoid rounding errors
            that naturally occur, use int values or round doubles to the
            precision needed.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-9">
    <title>AP Practice</title>

    <activity label="AP_casting">
      <statement>
        <p>
          Which of the following always returns the correct average (to 14-15
          decimal places) if <c>total</c> is an <c>int</c> variable that is the
          sum of three values?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>(double) (total / 3);</p>
          </statement>

          <feedback>
            <p>
              This does integer division before casting the result to double so
              it loses the fractional part.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>total / 3;</p>
          </statement>

          <feedback>
            <p>
              When you divide an integer by an integer you get an integer result
              and lose the fractional part.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>(double) total / 3;</p>
          </statement>

          <feedback>
            <p>
              This will convert total to a double value and then divide by 3 to
              return a double result.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(int) total / 3;</p>
          </statement>

          <feedback>
            <p>This will return an int value losing the fractional part.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
