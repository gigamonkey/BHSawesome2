<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="values">
  <title>Values</title>

  <introduction>
    <p>
      Computers operate on <term>data</term> which is stored as
      <term>bits</term>, usually described as “zeros and ones”, in the
      computer's memory. However sequences of zeros and ones aren't convenient
      for humans to deal with, so languages like Java give us higher-level
      abstractions for dealing with data that let us treat those sequences of
      bits as <term>values</term> that have some meaning to us humans. The kinds
      of values supported by a programming language and what we can do with them
      are the most basic building blocks of our programs.
    </p>

    <p>
      In this section we’re going to look Two important abstractions are
      <term>variables</term> which allow us to give a name to a particular
      location in the computer's memory where some data is stored and <term>data
      types</term> that decribe how we are using those particular zeros and
      ones: as a number, as a logical value, as text, or as some more more
      complicated kind of value.
    </p>
  </introduction>

  <subsection xml:id="data-types">
    <title>Data types</title>

    <idx>integer</idx>
    <idx>int</idx>
    <idx>double</idx>
    <idx>boolean</idx>
    <idx>String</idx>
    <idx><h>variable</h><h>types</h></idx>
    <idx><h>variable</h><h>primitive type</h></idx>
    <idx><h>variable</h><h>object type</h></idx>
    <idx><h>variable</h><h>integer</h></idx>
    <idx><h>variable</h><h>floating point</h></idx>
    <idx><h>variable</h><h>Boolean</h></idx>
    <idx><h>variable</h><h>String</h></idx>
    <p>
      In Java, in addition to a name, every variable has a <term>data
      type</term> that determines what kind of data it can hold. There are two
      categories of data types in Java: <term>primitive types</term> that hold
      the kinds of values that the computer can directly operate on such as
      numbers and <term>reference types</term> that hold a reference to a more
      complex value called an object. For now we’ll focus on three of the main
      primitive data types in Java. We’ll come back to reference types in <xref
      ref="topic-1-12-objects" />.
    </p>

    <p>
      The primitive types on the Advanced Placement Computer Science A exam are:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>int</c> which can represent integers, i.e. numbers with no
            fractional part such as 3, 0, -76, and 20393.
          </p>
        </li>

        <li>
          <p>
            <c>double</c> which can represent non-integer numbers like 6.3 -0.9,
            and 60293.93032. Computer people call these “floating point” numbers
            because the decimal point “floats” relative to the magnitude of the
            number, similar to the way it does in scientific notation like
            <m>6.5 ✕ 10^8</m>. The name <c>double</c> comes from the fact that
            <c>double</c>s are represented using 64 bits, double the 32 bits
            used for the type <c>float</c> which used to be the normal size
            floating point number when most computers did math in units of
            32-bits. (<c>float</c> is rarely used these days and is not part of
            the AP curriculum.)
          </p>
        </li>

        <li>
          <p>
            <c>boolean</c> which can represent only two values: <c>true</c> and
            <c>false</c>. (The data type is named for <url
            href="https://en.wikipedia.org/wiki/George_Boole"
            visual="https://en.wikipedia.org/wiki/George_Boole">George
            Boole</url>, a 19th century English mathematician who invented
            Boolean algebra, a system for dealing with statements made up of
            only true and false values.) We’ll return to <c>boolean</c>s in
            <xref ref="booleans-and-conditionals" />
          </p>
        </li>
      </ul>
    </p>

    <p>
      Another way to think of a data type is as a set of values (a domain, for
      the mathematically inclined) and a set of operations on those values. For
      example, the <c>int</c> datatype represent the set of integers that can be
      represented in 32 bits (-2147483648 to 2147483647) and they support the
      normal arithmetic operations like addition, subtraction, multiplication,
      and division as well as a few that you probably didn’t learn about in
      elementary school.
    </p>

    <p>
      The following <url href="https://youtu.be/pHgYlVjagmA"
      visual="https://youtu.be/pHgYlVjagmA">video</url> gives a quick summary of
      the relationship between variables, their names, and their data types.
    </p>

    <video youtube="pHgYlVjagmA" label="video-variables" />
    <activity label="chooseType1">
      <statement>
        <p>
          What type should you use to represent the average grade for a course?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int</p>
          </statement>

          <feedback>
            <p>
              While you could use an int, this would throw away any digits after
              the decimal point, so it isn't the best choice. You might want to
              round up a grade based on the average (89.5 or above is an A).
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>double</p>
          </statement>

          <feedback>
            <p>
              An average is calculated by summing all the values and dividing by
              the number of values. To keep the most amount of information this
              should be done with decimal numbers so use a double.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>boolean</p>
          </statement>

          <feedback>
            <p>Is an average true or false?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>String</p>
          </statement>

          <feedback>
            <p>
              While you can use a string to represent a number, using a number
              type (int or double) is better for doing calculations.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="chooseType2">
      <statement>
        <p>
          What type should you use to represent the number of people in a
          household?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>int</p>
          </statement>

          <feedback>
            <p>
              The number of people is a whole number so using an integer make
              sense.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>double</p>
          </statement>

          <feedback>
            <p>Can you have 2.5 people in a household?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>boolean</p>
          </statement>

          <feedback>
            <p>
              Is the number of people something that is either true or false?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>String</p>
          </statement>

          <feedback>
            <p>
              While you can use a string, a number is better for doing
              calculations with (like finding the average number of people in a
              household).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="chooseType3">
      <statement>
        <p>What type should you use to hold the first name of a person?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int</p>
          </statement>

          <feedback>
            <p>
              People don't usually have whole numbers like 7 as their first
              name.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>double</p>
          </statement>

          <feedback>
            <p>
              People don't usually have decimal numbers like 3.5 as their first
              name.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>boolean</p>
          </statement>

          <feedback>
            <p>
              This could only be used if the name was true or false. People
              don't usually have those as first names.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>String</p>
          </statement>

          <feedback>
            <p>
              Strings hold sequences of characters like you have in a person's
              name.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="chooseType4">
      <statement>
        <p>What type should you use to record if it is raining or not?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int</p>
          </statement>

          <feedback>
            <p>
              While you could use an int and use 0 for false and 1 for true this
              would waste 31 of the 32 bits an int uses. Java has a special type
              for things that are either true or false.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>double</p>
          </statement>

          <feedback>
            <p>
              Java has a special type for variables that are either true or
              false.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>boolean</p>
          </statement>

          <feedback>
            <p>Java uses boolean for values that are only true or false.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>String</p>
          </statement>

          <feedback>
            <p>
              While you can use a string to represent "True" or "False", using a
              boolean variable would be better for making decisions.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="chooseType5">
      <statement>
        <p>
          What type should you use to represent the time of the gold medal
          winner in the 100 meter dash in the Olympics?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int</p>
          </statement>

          <feedback>
            <p>
              The integer type (int) can't be used to represent numbers with
              fractional parts and the difference between gold and silver in the
              Olympics is often measured in just thousandths of a second.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>double</p>
          </statement>

          <feedback>
            <p>
              The double type is excellently suited to representing measured
              quantities that might not be whole numbers.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>boolean</p>
          </statement>

          <feedback>
            <p>Java uses boolean for values that are only true or false.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>String</p>
          </statement>

          <feedback>
            <p>
              While you can use a string to represent a number as a piece of
              text, you can only do calculations with the numeric types (int or
              double).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="summary-7">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 1.2.B.2) A <term>variable</term> is a memory storage location
            that holds a value, which can change while the program is running.
          </p>
        </li>

        <li>
          <p>
            (AP 1.2.B.2) Every variable has a name and an associated data type
            that determines the kind of data it can hold. A variable of a
            primitive type holds a primitive value from that type.
          </p>
        </li>

        <li>
          <p>
            A variable can be declared and initialized with the following code:
          </p>

          <program language="java">
            <code>
              int score;
              double gpa = 3.5;
            </code>
          </program>
        </li>

        <li>
          <p>
            (AP 1.2.A.1) A <term>data type</term> is a set of values and a
            corresponding set of operations on those values. Data types can be
            primitive types (like int) or reference types (like String).
          </p>
        </li>

        <li>
          <p>
            (AP 1.2.A.2) The <term>primitive</term> data types used in this
            course define the set of values and corresponding operations on
            those values for numbers and Boolean values.
          </p>
        </li>

        <li>
          <p>
            (AP 1.2.A.3) A <term>reference</term> type, like String, is used to
            define objects that are not primitive types.
          </p>
        </li>

        <li>
          <p>
            (AP 1.2.B.1) The three primitive data types used in this course are
            <term>int</term> (integer numbers), <term>double</term> (decimal
            numbers), and <term>boolean</term> (true or false).
          </p>
        </li>

        <li>
          <p>
            <c>String</c> is a reference data type representing a sequence of
            characters.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-6">
    <title>AP Practice</title>

    <activity label="AP1-2-types">
      <statement>
        <p>
          Which of the following pairs of declarations are the most appropriate
          to store a student’s average course grade in the variable GPA and the
          number of students in the variable numStudents?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int GPA; int numStudents;</p>
          </statement>

          <feedback>
            <p>The average grade in GPA could be a decimal number like 3.5.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>double GPA; int numStudents;</p>
          </statement>

          <feedback>
            <p>
              Yes, the average grade could be a decimal number, and the number
              of students is an integer.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>double GPA; double numStudents;</p>
          </statement>

          <feedback>
            <p>
              The number of students is an integer number. Although it could be
              saved in a double, an int would be more appropriate.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>int GPA; boolean numStudents;</p>
          </statement>

          <feedback>
            <p>
              The average grade in GPA could be a decimal number like 3.5.
              Booleans hold a true or false value, not numbers.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>double GPA; boolean numStudents;</p>
          </statement>

          <feedback>
            <p>Booleans hold a true or false value, not numbers.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
