<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-3-expressions">
  <title>Expressions</title>
  <introduction>
    <p>
      In the last section we saw how variables, such as <c>score</c>, can be
      used to name a place we store a value. And in this section we’ve seen how
      we can write literal values like <c>42</c> in our programs. Both variables
      and literal values are simple kinds of <term>expressions</term>.
    </p>

    <p>
      We also learned in <xref ref="topic-1-2-variables" /> how data types are
      defined by both by set of values they can represent and the set of
      operators that can operate on those values. Now we are going to see how we
      can use operators to create more complex expressions that compute new
      values from other expressions.
    </p>
  </introduction>

  <subsection xml:id="arithmetic-expressions">
    <title>Arithmetic Expressions</title>
    <p>
      To take a simple example, <c>2 + 3</c> is an expression consisting of the
      two literal values <c>2</c> and <c>3</c> and the operator <c>+</c>. The
      values are sometimes called the <term>operands</term> of the expression.
      The <c>+</c> operator works in Java about how you expect, adding together
      its two operands and producing a new value, in this case <c>5</c>. The
      expression <c>2 + 3</c> is an example of an <term>arithmetic
      expression</term>, an expressions consisting of numeric values being
      operated on by one of Java’s arithmetic operators.
    </p>

    <idx>expression</idx>
    <idx>operators</idx>
    <idx>
      <h>math</h><h>operators</h>
    </idx>

    <idx>
      <h>operators</h><h>addition</h>
    </idx>

    <idx>
      <h>operators</h><h>subtraction</h>
    </idx>

    <idx>
      <h>operators</h><h>multiplication</h>
    </idx>

    <idx>
      <h>operators</h><h>division</h>
    </idx>

    <idx>
      <h>operators</h><h>equality</h>
    </idx>

    <idx>
      <h>operators</h><h>inequality</h>
    </idx>

    <p>
      Java uses the standard mathematical operators for addition (<c>+</c>),
      subtraction (<c>-</c>), and division (<c>/</c>). The multiplication
      operator is written as <c>*</c>, as it is in most programming languages,
      since the character sets used until relatively recently didn’t have a
      character for a real multiplication sign, <c>×</c>, and keyboards still
      don’t have a key for it. For similar reasons the <c>÷</c> symbol is not
      used in Java.
    </p>

    <p>
      Just like variables have a type that was determined when we declared it,
      expressions have a type that is determined by the kind of value they
      produce. Arithmetic expressions can be of type <c>int</c> or <c>double</c>
      depending on the types of the values in the expression.
    </p>

    <p>
      An arithmetic expression consisting only of <c>int</c> values will always
      evaluate to an <c>int</c> value, even if the true mathematical result is
      not an integer. But an arithmetic expression that contains at least one
      <c>double</c> value will always evaluate to a <c>double</c> value.
    </p>

    <p>
      This means that when if we divide two <c>int</c>s, we will get an
      <c>int</c> result and the decimal part of the result will be thrown away.
      So, for instance, <c>5 / 2</c> would give us <c>2</c>, not <c>2.5</c>.
      This is called <term>truncating division</term>. If we want to preserve
      the part after the decimal point we need a <c>double</c> result, so we
      should make at least one of the values in the expression a double like
      2.0. The expression <c>5 / 2.0</c> will give us <c>2.5</c>.
    </p>

    <activity label="lcop1">
      <statement>
        <p>
          Run the code below to see the four basic arithmetic operators in
          action. Do all of those operators do what you expected? What about 2 /
          3? Isn’t it surprising that it prints 0? See the note above about
          truncating division with integers. Change the code to make it print
          the decimal part of the division too. You can do this by making at
          least one of the numbers a double like 2.0.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(2 + 3);
        System.out.println(2 - 3);
        System.out.println(2 * 3);
        System.out.println(2 / 3);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "5\n-1\n6\n" + 2.0/3;
        boolean passed =
                getResults(expect, output, "Expected output from main. Make sure you change 2/3 to 2.0/3.");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="the-remainder-operator">
    <title>The Remainder Operator</title>
    <p>
      Java also supports a fifth arithmetic operator, <c>%</c>, called the
      <term>remainder</term> operator. Like the other four basic arithmetic
      operators it takes two operands. Mathematically it returns the remainder
      after dividing the first number by the second, using truncating division.
      For instance, <c>5 % 2</c> evaluates to 1 since 2 goes into 5 two times
      with a remainder of 1.
    </p>

    <p>
      While you may not have heard of remainder as an operator, think back to
      elementary school math when you first learned long division, before you
      learned about decimals. You probably learned how to give the answer to a
      long division that didn’t divide evenly in terms of the number of even
      divisions and the remainder. The remainder is what is returned by the
      <c>%</c> operator. In the figures below, the remainders are the same
      values that would be returned by <c>2 % 3</c> and <c>5 % 2</c>.
    </p>

    <figure align="center">
      <caption>Long division showing the integer result and the remainder</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/mod-py.png" width="27%" />
    </figure>

    <p>
      Sometimes people—including Professor Lewis in the next video—will call
      <c>%</c> the <term>modulo</term>, or <term>mod</term>, operator. That is
      not actually correct though the difference between remainder and modulo,
      which uses <url
      href="https://en.wikipedia.org/wiki/Euclidean_division">Euclidean
      division</url> instead of truncating integer division, only matters when
      the signs of the operands differ. With operands of the same sign,
      remainder and modulo give the same results. Java does have a method
      <c>Math.floorMod</c> in the <c>Math</c> class if you need to use modulo
      instead of remainder, but <c>%</c> is all you need in the AP exam and it
      will only be used with positive operands.
    </p>

    <p>
      Here’s the <url
      href="https://www.youtube.com/watch?v=jp-T9lFISlI&amp;ab_channel=colleenlewis"
      visual="https://www.youtube.com/watch?v=jp-T9lFISlI&amp;ab_channel=colleenlewis">video</url>.
    </p>

    <video youtube="jp-T9lFISlI" label="video-mod" />
    <activity label="lcop2">
      <statement>
        <p>
          In the example below, try to guess what it will print out and then run
          it to see if you are right.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        System.out.println(11 % 10);
        System.out.println(3 % 4);
        System.out.println(8 % 2);
        System.out.println(9 % 2);
    }
}
        </code>
        <tests>
// Test Code for Lesson 1.4 Expressions - lcop2
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "1\n3\n0\n1";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        Remember that the value of <c>x % y</c> when <c>x</c> is smaller than
        <c>y</c> is always <c>x</c>. Since <c>y</c> can’t go into <c>x</c> at
        all (goes in 0 times), the result is just <c>x</c>. So <c>2 % 3</c> is
        <c>2</c> since <c>2 &lt; 3</c>.
      </p>
    </note>

    <idx>modulo</idx>
    <idx>remainder</idx>
    <idx>
      <h>operators</h><h>modulo</h>
    </idx>

    <idx>
      <h>operators</h><h>remainder</h>
    </idx>

    <activity label="mcq-rem1">
      <statement>
        <p>What is the result of 158 % 10?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>15</p>
          </statement>

          <feedback>
            <p>
              This would be the result of 158 divided by 10. % gives you the
              remainder.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>16</p>
          </statement>

          <feedback>
            <p>% gives you the remainder after the division.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>8</p>
          </statement>

          <feedback>
            <p>When you divide 158 by 10 you get a remainder of 8.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq-rem2">
      <statement>
        <p>What is the result of 3 % 8?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>3</p>
          </statement>

          <feedback>
            <p>
              8 goes into 3 no times so the remainder is 3. The remainder of a
              smaller number divided by a larger number is always the smaller
              number!
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>2</p>
          </statement>

          <feedback>
            <p>
              This would be the remainder if the question was 8 % 3 but here we
              are asking for the reminder after we divide 3 by 8.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>8</p>
          </statement>

          <feedback>
            <p>What is the remainder after you divide 3 by 8?</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="math-bugs">
    <title>Math Bugs</title>
    <p>
      While computers are pretty good at math they will only do what we tell
      them. And sometimes what we tell them isn’t exactly what we wanted. For
      instance, we can get bit by an unexpected truncating division if we divide
      two <c>int</c>s when we really wanted a <c>double</c> result.
    </p>

    <p>
      And sometimes it’s something as silly as using the wrong operator. For
      example, when the Hubble Space Telescope was launched to space in 1990, a
      <url
      href="https://scholar.lib.vt.edu/VA-news/ROA-Times/issues/1990/rt9005/900510/05100615.htm">bug
      where a programmer subtracted when they should have added</url> (or
      possibly the other way around) caused it to point in the wrong direction!
      It missed its target stars by about half a degree which is about the width
      of the moon seen from Earth. Thorough testing is the only way to make sure
      there are no logic errors that will cause runtime errors in your code. Try
      the following example that tries to convert centimeters to inches. Can you
      fix the runtime error?
    </p>

    <activity label="cm2in-runtime-error">
      <statement>
        <p>
          The following code is trying to convert centimeters to inches, but it
          has a math error. Run the code to see that there are no error
          messages, but it simply does the wrong calculation! Can you fix the
          logic error in the code? 1 inch = 2.54 cms.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class CmToInches
{
    public static void main(String[] args)
    {
        System.out.print("100 centimeters in inches is: ");
        System.out.println(100 * 2.54);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "" + 100/2.54;
        boolean passed =
                getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
    @Test
    public void test2()
    {
        String target = "/";
        boolean passed = checkCodeContains("the division operator", target);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      Another kind of math bug is when we ask Java to do something
      mathematically impossible. The main one we need to know about is what
      happens when we divide by zero, something that is not defined in math. In
      an <c>int</c> expression, dividing by 0 will result in an
      <term>ArithmeticException</term> , as we saw in the <xref
      ref="topic-1-1-intro-algorithms" />. Try it in one of the active codes to
      see what happens.
    </p>

    <note>
      <p>
        In <c>double</c> expressions, dividing by zero is not an error. Instead
        we get a special <c>double</c> value <c>Infinity</c> which might makes
        sense to you if you’ve learned about limits in math class. But if not,
        don’t worry about it; it’s not part of the AP exam.
      </p>
    </note>
  </subsection>

  <subsection xml:id="compound-expressions">
    <title>Compound Expressions</title>
    <p>
      Each arithmetic operator operates on just two operands. So what does an
      expression like <c>2 * 3 + 4</c> mean? If we remember our PEMDAS, we know
      in regular math that this expression should evaluate to <c>10</c> since we
      first multiply <c>2</c> times <c>3</c>, getting <c>6</c>, and then add
      <c>4</c> to that, getting <c>10</c>. It works the same in Java. Java
      evaluates the <c>*</c> operator with the two operands are <c>2</c> and
      <c>3</c>, and then the <c>+</c> operator with the value of the
      subexpression <c>2 * 3</c> and <c>4</c>.
    </p>

    <p>
      This kind of expression, where one or both of the operands are also
      arithmetic expressions, not just variables or a literal values, is called
      a <term>compound expression</term>.
    </p>

    <p>
      When compound expressions are evaluated, Java uses <term>operator
      precedence</term> rules, just like we do in regular math. So the
      expression <c>2 + 5 * 3</c> is <c>17</c>, not <c>21</c> because the
      expression <c>5 * 3</c> is evaluated first and then becomes one of the
      operands to the <c>+</c> operator.
    </p>

    <p>
      In Java, multiplication <c>*</c>, division <c>/</c>, and remainder
      <c>%</c> are done before addition <c>+</c> and subtraction <c>-</c>.
      However, as under PEMDAS rules, anything in parentheses is done first. It
      doesn’t hurt to put in extra parentheses if you are unsure as to what will
      be done first or just to make it more clear.
    </p>

    <activity label="compound1">
      <statement>
        <p>
          In the example below, try to guess what it will print out and then run
          it to see if you are right. Remember to consider <term>operator
          precedence</term>. How do the parentheses change the precedence?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class TestCompound
{
    public static void main(String[] args)
    {
        System.out.println(2 + 3 * 2);
        System.out.println((2 + 3) * 2);
        System.out.println(2 + (3 * 2));
    }
}
        </code>
        <tests>
// Test Code for Lesson 1.4 Expressions - compounds
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "8\n10\n8";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-pay-calculator">
    <title>Coding Challenge : Pay Calculator</title>
    <image source="Unit1-Using-Objects-and-Methods/Figures/dollarSign.png" width="18%" />
    <p>
      In this coding challenge, you can work in pairs to create a pay calculator
      using math expressions and operators.
    </p>

    <project label="challenge1-3-pay-calculator">
      <statement>
        <p>Complete the following expressions for a pay calculator.</p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Challenge1_3_Pay_Calculator
{
   public static void main(String[] args)
   {
       // Put in the math operator between 4 and 10 below to compute
       // the pay for 4 hours of work at 10 dollars per hour.
       System.out.println("Pay for 4 hours of work at 10 dollars an hour");
       System.out.println(4  10);

       // Put in the math operator to compute the number of hours worked
       // if the pay is 120 dollars and the rate is 15 dollars per hour.
       System.out.println("Number of hours worked for pay 120 dollars &amp; rate 15 dollars per hour");
       System.out.println(120  15);

       // Put in the math expression to compute the pay
       //  for 12 hours of work at 7.50 dollars per hour.
       System.out.println("Pay for 12 hours of work at 7.50 dollars an hour");
       System.out.println(        );

       // Add another statement to print the math expression to compute the integer number of
       // hours worked if the pay is 100 dollars and the rate is 9 dollars per hour.
       System.out.println("Number of int hours worked for pay 100 dollars &amp; rate 9 dollars per hour");



       // Add another statement to print the math expression to give the remainder when
       //  100 dollars is divided by 9 dollars per hour.
       System.out.println("The remainder of 100 dollars divided by 9 dollars per hour");


   }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "90.0";

        boolean passed = output.contains(expect);
        passed = getResults(expect, output, "Output contains 90.0 for 12*7.5", passed);
        assertTrue(passed);
    }

    @Test
    public void test1() throws IOException
    {
        String target = "100/9";
        boolean passed = checkCodeContains("expression 100/9", target);
        assertTrue(passed);
    }
    @Test
    public void test2() throws IOException
    {
        String target = "100%9";
        boolean passed = checkCodeContains("expression 100 % 9", target);
        assertTrue(passed);
    }
    @Test
    public void test0() throws IOException
    {
        String target = "4*10";
        boolean passed = checkCodeContains("expression 4*10", target);
        assertTrue(passed);
    }
    @Test
    public void testE2() throws IOException
    {
        String target = "120/15";
        boolean passed = checkCodeContains("expression 120/15", target);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection>
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 1.3.C.1) <term>Arithmetic expressions</term>, which consist of
            numeric values, variables, and operators, include expressions of
            type <c>int</c> and <c>double</c>.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.2) The arithmetic <term>operators</term> consist of
            <c>+</c>, <c>-</c>, <c>*</c> , <c>/</c>, and <c>%</c> also known as
            addition, subtraction, multiplication, division, and remainder.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.2) An arithmetic operation that uses two <c>int</c> values
            will evaluate to an <c>int</c> value. With integer division, any
            decimal part in the result will be thrown away.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.2) An arithmetic operation that uses at least one
            <c>double</c> value will evaluate to a <c>double</c> value.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.3) When dividing numeric values that are both int values,
            the result is only the integer portion of the quotient. Anything
            after the decimal point is thrown away. When dividing numeric values
            that use at least one double value, the result is the double
            quotient as expected.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.4) The <term>remainder (modulo) operator %</term> is used
            to compute the remainder when one number is divided by another
            number.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.5) Multiple operators can be used to combine expressions
            into <term>compound expressions</term>.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.5) During evaluation, numeric values are associated with
            operators according to <term>operator precedence</term> to determine
            how they are grouped. <c>*</c>, <c>/</c>, <c>%</c> have precedence
            over <c>+</c> and <c>-</c>, unless parentheses are used to group
            those to be evaluated first. Operators with the same precedence are
            evaluated from left to right.
          </p>
        </li>

        <li>
          <p>
            (AP 1.3.C.6) An attempt to divide an integer by zero will result in
            an <c>ArithmeticException</c>.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection>
    <title>AP Practice</title>
    <activity label="apcsa_sample1_exp">
      <statement>
        <p>Consider the following code segment.</p>
        <program language="java">
          <code>
System.out.println(5 + 5 / 2 * 3 - 1);
          </code>
        </program>

        <p>What is printed when the code segment is executed?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>0.666666666666667</p>
          </statement>

          <feedback>
            <p>
              Don't forget that division and multiplication will be done first
              due to operator precedence.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>9</p>
          </statement>

          <feedback>
            <p>
              Don't forget that division and multiplication will be done first
              due to operator precedence.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>10</p>
          </statement>

          <feedback>
            <p>Yes, this is equivalent to (5 + ((5 / 2) * 3) - 1).</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>11.5</p>
          </statement>

          <feedback>
            <p>
              Don't forget that division and multiplication will be done first
              due to operator precedence, and that an int/int gives an int
              truncated result where everything to the right of the decimal
              point is dropped.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>14</p>
          </statement>

          <feedback>
            <p>
              Don't forget that division and multiplication will be done first
              due to operator precedence.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
