  <subsection xml:id="turtle-class">
    <title>Turtle Class</title>

    <p>
      The Turtle class (that we’ve written for you and hidden on this page) is a
      blueprint for turtle objects. It defines attributes for graphical turtles
      like their color and position and methods to make the turtles move. Try
      the Java program below that creates a Turtle object called yertle using
      the Turtle class. If the code below does not work or is too slow in your
      browser, you can also see the <c>Turtle</c> code in action on <url
      href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/beca9c16-4004-4a4e-b4b0-11593e140808#f5357602-b60b-44c3-be0e-dfb07de2a778">JuiceMind</url>
      or <url
      href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java">replit</url>
      or download the files <url
      href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip">here</url>
      to use in your own IDE.
    </p>

    <activity label="TurtleTest">
      <statement>
        <p>
          Try clicking the run button below to see what the following program
          does.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();
                  yertle.forward();

                  habitat.show(true);
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest");
              }

              @Test
              public void test1() {
                  boolean passed = getResults("true", "true", "main()");
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <p>
      The following <url
      href="https://www.youtube.com/watch?v=TFmmG4_KK8I&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;ab_channel=colleenlewis">video</url>
      shows how the program creates a <c>World</c> object called <c>habitat</c>
      and a <c>Turtle</c> object called <c>yertle</c> in memory.
    </p>

    <figure align="center">
      <caption>Turtle Memory Model</caption>

      <video youtube="TFmmG4_KK8I" label="video-turtle" />
    </figure>

    <p>
      The <term>dot operator</term> (.) is used to run an object’s method. You
      can think of the (.) as asking the object to do something (execute one of
      its methods). For example, <c>yertle.forward()</c> asks the turtle
      <c>yertle</c> to go <c>forward</c>. It doesn’t tell <c>yertle</c> how much
      to go forward, so it goes forward 100 pixels by default. The parentheses
      <c>()</c> after a method name are there in case you need to give the
      method <term>arguments</term> (some data) to do its job, for example to go
      forward 50 pixels instead of 100 in <c>yertle.forward(50);</c> Try
      changing the code above to go forward 50 pixels instead and then run it
      again.
    </p>

    <activity label="TurtleTest2">
      <statement>
        <p>
          In the code below, <c>yertle</c> goes forward and then turns left. Can
          you change the code to make <c>yertle</c> go <c>forward</c> twice and
          then <c>turnRight</c>?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest2 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();

                  habitat.show(true);
              }
          }

        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest2");
              }

              @Test
              public void test1() {
                  String code = getCode();
                  String expect = "yertle.forward";

                  int count = countOccurences(code, expect);

                  boolean passed = getResults("2 time(s)", "" + count + " time(s)", "yertle.forward() twice");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String expect = "yertle.turnRight()";

                  int count = countOccurences(code, expect);

                  boolean passed = count >= 1;
                  passed = getResults("1+ time(s)", "" + count + " time(s)", "yertle.turnRight()", passed);
                  assertTrue(passed);
              }
          }


          ]]>
        </tests>
      </program>
    </activity>

    <p>
      A variable like <c>yertle</c> of a <term>reference</term> type like
      <c>Turtle</c> holds an object reference, which can be thought of as the
      memory address of that object. Variables that are of a primitive types
      like <c>int</c> hold just a single number value. But objects are complex
      and contain a collection of values called <term>attributes</term>, for
      example the color and the size of the turtle.
    </p>
  </subsection>

  <subsection xml:id="creating-turtle-objects">
    <title>Creating Turtle Objects</title>

    <p>
      When you write a class like the <c>Turtle</c> class, you can create many
      objects of that class type. In the code below, two turtle objects are
      created: <c>yertle</c> and <c>myrtle</c>. You can name your turtle and add
      in a line like the following in the main method to make it move:
    </p>

    <program>
      // To create or declare a new object, write:
      // ClassName variableName = new ClassName(arguments);
      Turtle yourTurtleName = new Turtle(habitat);
      yourTurtlename.forward();
    </program>

    <activity label="TurtleTest3">
      <statement>
        <p>Can you add another turtle object to the code below?</p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest3 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);
                  Turtle myrtle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();
                  yertle.forward();

                  myrtle.turnRight();
                  myrtle.forward();

                  habitat.show(true);
              }
          }

        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest3");
              }

              @Test
              public void test1() {
                  String code = getCode();
                  String expect = "new Turtle(habitat)";

                  int count = countOccurences(code, expect);

                  boolean passed = count >= 3;
                  passed = getResults("3+ Turtles", "" + count + " Turtles", "Add a new Turtle(s)", passed);
                  assertTrue(passed);
              }
          }


          ]]>
        </tests>
      </program>
    </activity>
  </subsection>



  <subsection xml:id="turtle-methods">
    <title>Turtle Methods</title>

    <p>
      Let’s practice more with the <c>Turtle</c> class and its methods. Here is
      a class diagram that shows some of the attributes and methods in the class
      <c>Turtle</c>.
    </p>

    <figure align="center">
      <caption>Turtle Class Diagram</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleUMLClassDiagram.png" width="71%" alt="Turtle class diagram" />
    </figure>

    <p>
      The Turtle world does not use the Cartesian coordinate system with (0,0)
      in the middle the screen. Instead, (0,0) is at the top left corner of the
      screen and x increases to the right and y increases towards the bottom of
      the screen. Most computer graphics systems use this coordinate system
      which is a carry over from before computers could display graphics and had
      to approximate the graphics with text print outs.
    </p>

    <figure align="center">
      <caption>
        The coordinate (0,0) is at the top left of the Turtle world.
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/coords.png" width="36%" />
    </figure>

    <activity label="ParsonsDraw7" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following code uses a turtle to draw the digital number 7 (with
          just straight lines), but the code is mixed up. Drag the code blocks
          to the right and put them in the correct order to first draw the line
          going up (towards the top of the page) and then turn and draw a line
          to the left to make a 7. Remember that the turtle is facing the top of
          the page when it is first created. Click on the “Check Me” button to
          check your solution.
        </p>
      </statement>

      <blocks>
        <block order="2">
          <cline>public class Draw7</cline>
          <cline>{</cline>
        </block>

        <block order="7">
          <cline>    public static void main(String[] args)</cline>
          <cline>    {</cline>
        </block>

        <block order="6">
          <cline>        World habitat = new World(300,300);</cline>
        </block>

        <block order="8">
          <cline>        Turtle yertle = new Turtle(habitat);</cline>
        </block>

        <block order="1">
          <cline>        yertle.forward();</cline>
        </block>

        <block order="4">
          <cline>        yertle.turnLeft();</cline>
          <cline>        yertle.forward();</cline>
        </block>

        <block order="9">
          <cline>        habitat.show(true);</cline>
        </block>

        <block order="5">
          <cline>    } // end main</cline>
        </block>

        <block order="3">
          <cline>} // end class</cline>
        </block>
      </blocks>
    </activity>

    <p>
      After you put the mixed up code in order above, type in the same code
      below to make the turtle draw a 7.
    </p>

    <activity label="TurtleDrawSeven">
      <statement>
        <p>
          Can you make yertle draw a 7 by going forward to go up and then left?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDraw7 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);
                  // Make yertle draw a 7 using the code above

                  habitat.show(true);
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleDraw7");
              }

              @Test
              public void test1() {
                  String orig = "yertle.forward();\nyertle.turnLeft();\nyertle.forward();";
                  boolean passed = checkCodeContains(orig);
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <activity label="TurtleDrawEight">
      <statement>
        <p>
          Can you make yertle draw the digital number 8, as 2 squares on top of
          each other?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDraw8 {
              public static void main(String[] args) {
                  World habitat = new World(500, 500);
                  Turtle yertle = new Turtle(habitat);
                  // Make yertle draw an 8 with 2 squares
                  yertle.forward();

                  habitat.show(true);
              }
          }

        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleDraw8");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                                  + "import java.util.*;\n\n"
                                  + "public class TurtleDraw8\n"
                                  + "{\n"
                                  + "  public static void main(String[] args)\n"
                                  + "  {\n"
                                  + "      World habitat = new World(300,300);\n"
                                  + "      Turtle yertle = new Turtle(habitat);\n"
                                  + "      // Make yertle draw an 8 with 2 squares\n"
                                  + "      yertle.forward();\n\n\n"
                                  + "      habitat.show(true);\n"
                                  + "  }\n"
                                  + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  int numForward = countOccurences(code, "forward(");

                  boolean passed = numForward >= 7;

                  passed = getResults("7 or more", "" + numForward, "Calls to forward()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  int numTurn = countOccurences(code, ".turn");

                  boolean passed = numTurn >= 5;

                  passed =
                          getResults("5 or more", "" + numTurn, "Calls to turnRight() or turnLeft()", passed);
                  assertTrue(passed);
              }
          }


          ]]>
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-draw-letters">
    <title>Coding Challenge: Draw Letters</title>

    <p>
      Working in pairs, use the area below to have your turtle draw simple
      block-style letters for your first or last name initials using just
      straight lines (no curves or diagonals).
    </p>

    <p>
      It may help to act out the code pretending you are the turtle. Remember
      that which way you turn depends on which direction you are facing, and the
      turtle begins facing north (towards the top of the page).
    </p>

    <p>Here are some simple turtle methods that you can use:</p>

    <p>
      <ul>
        <li>
          <p><c>forward()</c></p>
        </li>

        <li>
          <p><c>turnLeft()</c></p>
        </li>

        <li>
          <p><c>turnRight()</c></p>
        </li>

        <li>
          <p><c>backward()</c></p>
        </li>

        <li>
          <p><c>penUp()</c></p>
        </li>

        <li>
          <p><c>penDown()</c></p>
        </li>
      </ul>
    </p>

    <p>
      You may notice that it is challenging to have your turtle draw with these
      simple methods. In the next lessons, we will use more complex
      <c>Turtle</c> methods where you can indicate how many steps to take or
      what angle to turn that will make drawing a lot easier!
    </p>

    <project label="challenge-Turtle_Letter">
      <statement>
        <p>
          Have your turtle create a block drawing of the initials of your name.
          Use straight lines (no curves or diagonals unless you want to try
          adding arguments to the turtle methods).
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleLetter {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  // Create a turtle object

                  // have it draw your initials

                  habitat.show(true);
              }
          }

        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleLetter");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                                  + "import java.util.*;\n\n"
                                  + "public class TurtleLetter\n"
                                  + "{\n"
                                  + "  public static void main(String[] args)\n"
                                  + "  {\n"
                                  + "      World habitat = new World(300,300);\n\n\n\n"
                                  + "      habitat.show(true);\n"
                                  + "  }\n"
                                  + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String[] lines = code.split("\n");

                  boolean passed = lines.length >= 20;
                  passed =
                          getResults(
                                  "20 or more lines",
                                  lines.length + " lines",
                                  "Adding a reasonable amount of lines to code",
                                  passed);
                  assertTrue(passed);
              }
          }


          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-3">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 1.12.A.1) A <term>class</term> defines a new data type (a
            classification). It is the formal implementation, or blueprint, of
            the <em>attributes</em> and <em>behaviors</em> of the objects of
            that class.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.1) An <term>object</term> is a specific
            <term>instance</term> of a class with defined attributes. Objects
            are declared as variables of a class type.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.B.1) A variable of a reference type holds an object
            reference, which can be thought of as the memory address of that
            object.
          </p>
        </li>

        <li>
          <p>
            An <term>attribute</term> or <term>instance variable</term> is data
            the object knows about itself. For example a turtle object knows the
            direction it is facing or its color.
          </p>
        </li>

        <li>
          <p>
            A <term>behavior</term> or <term>method</term> is something that an
            object can do. For example a turtle object can go forward 100
            pixels.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.2) A <term>class hierarchy</term> can be developed by
            putting common attributes and behaviors of related classes into a
            single class called a <term>superclass</term>. Classes that
            <term>extend</term> a superclass, called <term>subclasses</term>,
            can draw upon the existing attributes and behaviors of the
            superclass without replacing these in the code. This creates an
            <term>inheritance</term> relationship from the subclasses to the
            superclass. Designing and implementing inheritance relationships are
            outside the scope of the AP Computer Science A course and exam.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.2) All classes in Java are subclasses of the
            <term>Object</term> class.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-2">
    <title>AP Practice</title>

    <p>
      Try these AP practice questions that will help to prepare you for the AP
      Classroom progress checks.
    </p>

    <activity label="AP-attributes">
      <statement>
        <p>
          A student has created a <c>Dog</c> class. The class contains variables
          to represent the following.
        </p>

        <p>
          <ul>
            <li>
              <p>
                A String variable called <c>breed</c> to represent the breed of
                the dog
              </p>
            </li>

            <li>
              <p>
                An int variable called <c>age</c> to represent the age of the
                dog
              </p>
            </li>

            <li>
              <p>
                A String variable called <c>name</c> to represent the name of
                the dog
              </p>
            </li>
          </ul>
        </p>

        <p>
          The object <c>pet</c> is declared as type Dog. Which of the following
          descriptions is accurate?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>An attribute of the name object is String.</p>
          </statement>

          <feedback>
            <p>name is an attribute of the pet object or Dog class.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>An attribute of the pet object is name.</p>
          </statement>

          <feedback>
            <p>name is an attribute of the pet object or Dog class.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>An instance of the pet class is Dog.</p>
          </statement>

          <feedback>
            <p>An instance of the Dog class is pet.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>An attribute of the Dog instance is pet.</p>
          </statement>

          <feedback>
            <p>An attribute of the Dog class is name.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>An instance of the Dog object is pet.</p>
          </statement>

          <feedback>
            <p>An instance of the Dog class is pet.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-objects">
      <statement>
        <p>
          A student has created a <c>Party</c> class. The class contains
          variables to represent the following.
        </p>

        <p>
          <ul>
            <li>
              <p>
                An int variable called <c>numOfPeople</c> to represent the
                number of people at the party.
              </p>
            </li>

            <li>
              <p>
                A boolean variable called <c>discoLightsOn</c> to represent
                whether the disco ball is on.
              </p>
            </li>

            <li>
              <p>
                A boolean variable called <c>partyStarted</c> to represent
                whether the party has started.
              </p>
            </li>
          </ul>
        </p>

        <p>
          The object <c>myParty</c> is declared as type Party. Which of the
          following descriptions is accurate?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>boolean is an attribute of the myParty object.</p>
          </statement>

          <feedback>
            <p>boolean is the type of an attribute, but not an attribute.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>myParty is an attribute of the Party class.</p>
          </statement>

          <feedback>
            <p>myParty is an instance of the Party class.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>myParty is an instance of the Party class.</p>
          </statement>

          <feedback>
            <p>myParty is an object that is an instance of the Party class.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>myParty is an attribute of the Party instance.</p>
          </statement>

          <feedback>
            <p>An attribute of the Party class is numOfPeople.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>numOfPeople is an instance of the Party object.</p>
          </statement>

          <feedback>
            <p>An attribute of the Party class is numOfPeople.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
