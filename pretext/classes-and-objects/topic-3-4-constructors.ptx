<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-3-4-constructors">
  <title>Constructors</title>

  <introduction>
    <idx><h>class</h><h>constructor</h></idx>
    <p>
      In Unit 1, we learned how to create objects by calling
      <term>constructors</term>. To review, a call to a constructor consists of
      the word <c>new</c> followed by the name of the class being constructed,
      and then an argument list in parentheses. For example, here is how we
      create <c>World</c>, <c>Turtle</c>, and <c>Person</c> objects.
    </p>

    <program>
      // To create a new object, write:
      // ClassName variableName = new ConstructorName(arguments);
      World world = new World();
      Turtle t = new Turtle(world);
      Person p = new Person("Pat", "pat@gmail.com", "123-456-7890");
    </program>

    <p>Now it’s time to learn to write our own constructors.</p>
  </introduction>

  <subsection xml:id="constructor-signature">
    <title>Constructor Signature</title>

    <p>
      In the source code for a class, constructors are usually written after the
      instance variables and before any methods.
    </p>

    <p>
      The signature of a constructor is similar to the signature of a method
      except there is no return type, not even <c>void</c>, and instead of a
      method name, the name of the constructor is always the same as the name of
      the class. The constructors you write will be marked <c>public</c>. Like
      methods, constructors also have a <term>parameter list</term> specified in
      parenthesis that declare the variables that will be used to hold the
      arguments passed when the constructor is called.
    </p>

    <program>
      public class ClassName {
          /* Instance variable declarations go here, before constructors */

          /* Constructor - same name as Class, no return type */
          public ClassName() {
              /* Implementation not shown */
          }

          /* Method definitions go here, after constructors */
      }

    </program>

    <note>
      <p>
        Constructors must have the same name as the class! Constructors have no
        return type!
      </p>
    </note>
  </subsection>

  <subsection xml:id="the-job-of-a-constructor">
    <title>The Job of a Constructor</title>

    <p>
      The job of a constructor is to set the initial values for the object’s
      instance variables to useful values. But what does “useful” mean?
      Sometimes we describe the values of all an object’s instance variables at
      a given time as the object’s <term>state</term>. And we say an object is
      in a <term>valid state</term> when all its instance variables have values
      that let us use the object by invoking its public methods. So another way
      to describe the job of a constructor is to set the object’s instance
      values so it’s in a valid state and ready to be used. Classes can have
      zero or more constructors but they should all produce an object in a valid
      state.
    </p>

    <p>
      An object’s <term>state</term> refers to its attributes and their values
      at a given time and is defined by instance variables belonging to the
      object. This defines a <term>has-a</term> relationship between the object
      and its instance variables. For example, a Person object <term>has</term>
      a name, email, and phone number attributes. A constructor is used to set
      the initial state of an object, which should include initial values for
      all instance variables. For example, <c>new Person("Pat", "pat@gmail.com",
      "123-456-7890")</c> calls the Person constructor with the values to fill
      in for its name (“Pat”), email (”<url
      href="mailto:pat@gmail.com">pat@gmail.com</url>”), and phone number
      (“123-456-7890”). When a constructor is called, memory is allocated for
      the object and the associated object reference is returned. Constructor
      parameters, if specified, provide data to initialize instance variables.
    </p>

    <p>
      The easiest way to write a constructor is to <em>not</em> write one. If
      you do not write a constructor your class will automatically get what is
      called the <term>default constructor</term> with no parameters. This
      constructor will initialize all your instance variables to the default
      value for their type:
    </p>

    <p>
      <ul>
        <li>
          <p>0 for <c>int</c></p>
        </li>

        <li>
          <p>0.0 for <c>double</c></p>
        </li>

        <li>
          <p><c>false</c> for <c>boolean</c></p>
        </li>

        <li>
          <p><c>null</c> for all reference types</p>
        </li>
      </ul>
    </p>

    <p>
      If those default values are sufficient to put your object into a valid
      state you may not need to write a constructor at all.
    </p>

    <p>
      Usually, however, if you are writing a class that has instance variables,
      you need to initialize your instance values to some other values. In that
      case you probably need to write a constructor that takes arguments and
      uses them to initialize your instance variables.
    </p>

    <p>
      For example, consider the constructor from the <c>Person</c> class from
      the last lesson.
    </p>

    <program>
      public Person(String initName, String initEmail, String initPhone)
      {
          name = initName;
          email = initEmail;
          phoneNumber = initPhone;
      }
    </program>

    <p>
      This constructor ensures that all three of the instance variables
      (<c>name</c>, <c>email</c>, and <c>phoneNumber</c>) in <c>Person</c> are
      initialized to the values provided by whatever code called the
      constructor. For example, in the constructor call <c>new Person("Pat",
      "pat@gmail.com", "123-456-7890")</c>, the argument “Pat” is passed into
      the parameter variable <c>initName</c>, which the constructor then assigns
      to the instance variable <c>name</c>.
    </p>

    <p>
      One important note: if you do write a constructor, Java will not generate
      the default constructor for you. This is a good thing because it lets you
      make sure that instances of your class are always properly initialized.
      With this constructor in place, for instance, there’s no way to construct
      a <c>Person</c> object without providing the three required <c>String</c>
      values.
    </p>

    <p>
      Sometimes you will want to write more than one constructor so that there
      are different ways of making an instance of your class. One reason to do
      that is to make it convenient to create instances from different kinds of
      arguments. This is called <term>overloading</term>. You could write a
      no-argument constructor for <c>Person</c> that provides fill-in values
      like the following, if those make sense for your program. It’s up to you
      to decide if this is actually a useful value to have or if it would be
      better to force the users of the <c>Person</c> class to choose the values
      themselves using the constructor with arguments.
    </p>

    <program>
      public Person()
      {
          name = "Anonymous";
          email = "unknown";
          phoneNumber = "unknown";
      }
    </program>

    <activity label="name_constructor">
      <statement>
        <p>
          Click on all the lines of code that are part of constructors in the
          following class.
        </p>
      </statement>

      <feedback>
        <p>Constructors are public and have the same name as the class.</p>
      </feedback>

      <areas>
        <cline><area correct="no">public class Name</area></cline>
        <cline><area correct="no">{</area></cline>
        <cline>    <area correct="no">private String first;</area></cline>
        <cline>    <area correct="no">private String last;</area></cline>
        <cline></cline>
        <cline>    <area correct="yes">public Name(String theFirst, String theLast)</area></cline>
        <cline>    <area correct="yes">{</area></cline>
        <cline>        <area correct="yes">first = theFirst;</area></cline>
        <cline>        <area correct="yes">last = theLast;</area></cline>
        <cline>    <area correct="yes">}</area></cline>
        <cline></cline>
        <cline>    <area correct="no">public void setFirst(String theFirst)</area></cline>
        <cline>    <area correct="no">{</area></cline>
        <cline>        <area correct="no">first = theFirst;</area></cline>
        <cline>    <area correct="no">}</area></cline>
        <cline></cline>
        <cline>    <area correct="no">public void setLast(String theLast)</area></cline>
        <cline>    <area correct="no">{</area></cline>
        <cline>        <area correct="no">last = theLast;</area></cline>
        <cline>    <area correct="no">}</area></cline>
        <cline></cline>
        <cline><area correct="no">}</area></cline>
      </areas>
    </activity>

    <activity label="constructor-purpose">
      <statement>
        <p>What best describes the purpose of a class’s constructor?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>
              Determines the amount of space needed for an object and creates
              the object
            </p>
          </statement>

          <feedback>
            <p>
              The object is already created before the constructor is called but
              the constructor initializes the instance variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Names the new object</p>
          </statement>

          <feedback>
            <p>Constructors do not name the object.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              Return to free storage all the memory used by this instance of the
              class.
            </p>
          </statement>

          <feedback>
            <p>
              Constructors do not free any memory. In Java the freeing of memory
              is done when the object is no longer referenced.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Initialize the instance variables in the object</p>
          </statement>

          <feedback>
            <p>
              A constructor initializes the instance variables to their default
              values or in the case of a parameterized constructor, to the
              values passed in to the constructor.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="class-Fraction">
      <statement>
        <p>
          The following class defines a <c>Fraction</c> with the instance
          variables <c>numerator</c> and <c>denominator</c>. Complete the body
          of its 2 constructors. The no-argument constructor should set the
          default instance variable values to 1 rather than 0 since a fraction
          with 0 in the denominator is not valid. The constructor with
          parameters should copy those parameters into the instance variables.
          What will the code print out? Try tracing through it. View it in the
          Java visualizer by clicking on the Show CodeLens button below.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Fraction {
              //  instance variables
              private int numerator;
              private int denominator;

              // no-arg constructor: set instance variables to default values of 1
              public Fraction() {
                  // 1. set numerator to 1

                  // 2. set denominator to 1
              }

              // constructor w/args: set instance variables to init parameters
              public Fraction(int initNumerator, int initDenominator) {
                  // 3. set numerator to initNumerator

                  // 4. set denominator to initDenominator

              }

              // Print fraction
              public void print() {
                  System.out.println(numerator + "/" + denominator);
              }

              // main method for testing
              public static void main(String[] args) {
                  Fraction f1 = new Fraction();
                  Fraction f2 = new Fraction(1, 2);
                  // What will these print out?
                  f1.print();
                  f2.print();
              }
          }

        </code>

        <tests>
          // Test Code for Lesson 5.2.0.1 - Fraction
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void test() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "1/1\n1/2";

                  boolean passed = getResults(expect, output, "Running main");
                  assertTrue(passed);
              }

              @Test
              public void testCodeContains1() {
                  boolean check1 = checkCodeContains("numerator = 1 in Fraction()", "numerator = 1");
                  assertTrue(check1);
              }

              @Test
              public void testCodeContains2() {
                  boolean check1 = checkCodeContains("denominator = 1 in Fraction()", "denominator = 1");
                  assertTrue(check1);
              }

              @Test
              public void testCodeContains3() {
                  boolean check1 =
                          checkCodeContains(
                                  "numerator = initNumerator in 2nd constructor",
                                  "numerator = initNumerator");
                  assertTrue(check1);
              }

              @Test
              public void testCodeContains4() {
                  boolean check1 =
                          checkCodeContains(
                                  "denominator = initDenominator in 2nd constructor",
                                  "denominator = initDenominator");
                  assertTrue(check1);
              }
          }

        </tests>
      </program>
    </activity>

    <activity label="class-Car">
      <statement>
        <p>
          The following class defines a Car with the instance variables model
          and year, for example a Honda 2010 car. However, some of the code is
          missing. First, fill in the code to create a <c>Car</c> constructor.
          Then, fill in the code to call the constructor in the main method to
          create 2 <c>Car</c> objects. The first car should be a 2023 Ford and
          the second car should be a 2010 Honda. Run your program and make sure
          it works and prints out the information for both cars.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Car
          {
             //  instance variables
             private String model;
             private int year;

             // constructor: set instance variables to init parameters
             public Car(String initModel, int initYear)
             {
                 // 1. set the instance variables to the init parameter variables


             }

             // Print Car info
             public void print()
             {
               System.out.println("Car model: " + model);
               System.out.println("Car year: " + year);
             }

             // main method for testing
             public static void main(String[] args)
             {
                 // 2. Call the constructor to create 2 new Car objects with different
                 // values The first car should be a 2023 Ford and the second car
                 // should be a 2010 Honda.

                 Car car1 =
                 Car car2 =

                 car1.print();
                 car2.print();
             }
          }
        </code>

        <tests>
          // Test Code for Lesson 5.2.0 - Car
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "Car model: Ford\nCar year: 2023\nCar model: Honda\nCar year: 2010";

                  boolean passed = getResults(expect, output, "Running main");
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-student-class">
    <title>Coding Challenge: Student Class</title>

    <p>
      We encourage you to work in pairs for this challenge to create a Student
      class with constructors.
    </p>

    <p>
      <ol>
        <li>
          <p>
            First, brainstorm in pairs to do the <term>Object-Oriented
            Design</term> for a Student class. What data should we store about
            Students? Come up with at least 4 different instance variables. What
            are the data types for the instance variables?
          </p>
        </li>

        <li>
          <p>
            Write a Student class below that has your 4 instance variables and
            write a constructor that has 4 parameters to set all of the instance
            variables.
          </p>
        </li>

        <li>
          <p>
            Add a print() method that uses System.out.println to print out all
            the instance variables.
          </p>
        </li>

        <li>
          <p>
            Add a main method that constructs at least 2 Student objects using
            the constructor with different values and then calls their print()
            methods.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-Student-class">
      <statement>
        <p>
          Create a class Student with 4 instance variables, a constructor, and a
          print method. Write a main method that creates 2 Student objects with
          the constructor and calls their print() method.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          /**
           * class Student with 4 instance variables, a constructor, a print method, and a main method to test
           * them.
           */
          public class Student {
              // Write 4 instance variables

              // Write a constructor with 4 parameters to initialize all of the instance
              // variables

              // Write a print method that prints all the instance variables
              public void print() {}

              // main method
              public static void main(String[] args) {
                  // Construct 2 Student objects using the constructor with different values

                  // call their print() methods

              }
          }

        </code>

        <tests>
          // Test Code for Lesson 5.2.1 - Challenge - Student
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("Student");

                  Object[] values = new Object[] {"Name", 0};
                  setDefaultValues(values);
              }

              @Test
              public void testCallConstructors() {
                  String code = getCodeWithoutComments();
                  String search = "= new Student(";

                  int num = countOccurences(code, search);

                  String expect = search + "...) x 2";
                  String actual = search + "...) x " + num;

                  boolean passed = getResults(expect, actual, "Checking that you made 2 Student objects");
                  assertTrue(passed);
              }

              @Test
              public void testConstructors() {
                  String code = getCodeWithoutComments();
                  String search = "public Student(";

                  int num = countOccurences(code, search);

                  String expect = search + "...) x 1";
                  String actual = search + "...) x " + num;

                  boolean passed = getResults(expect, actual, "Checking that you made a constructor");
                  assertTrue(passed);
              }

              @Test
              public void testPrint() {
                  String code = getCodeWithoutComments();
                  String search = ".print()";

                  int num = countOccurences(code, search);

                  String expect = search + " x 2";
                  String actual = search + " x " + num;

                  boolean passed = getResults(expect, actual, "Checking that you called print 2 times");
                  assertTrue(passed);
              }

              @Test
              public void testPrivateVariables() {
                  String expect = "4 Private";
                  String output = testPrivateInstanceVariables();

                  boolean passed = getResults(expect, output, "Checking for 4 Private Instance Variable(s)");
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="design-a-class-for-your-community-1">
    <title>Design a Class for your Community</title>

    <p>
      In the last lesson, you came up with a class of your own choice relevant
      to you or your community. In this lesson, you will add a constructor to
      this class.
    </p>

    <p>
      <ol>
        <li>
          <p>
            Consult your completed worksheet or your code in <url
            href="topic-3-3-anatomy-of-class.html#groupwork-design-a-class-for-your-community">lesson
            3.3 Community Challenge</url> for the class name and its 3 instance
            variables that you created. Copy them into the active code exercise
            below.
          </p>
        </li>

        <li>
          <p>
            Add a constructor with 3 parameters to set all of the instance
            variables to the given parameters.
          </p>
        </li>

        <li>
          <p>
            Write a print() method that uses <c>System.out.println</c> to print
            out all the instance variables.
          </p>
        </li>

        <li>
          <p>
            Write a main method that constructs at least 2 objects of your class
            using the constructor and then calls their <c>print()</c> methods.
          </p>
        </li>
      </ol>
    </p>

    <project label="community-challenge2">
      <statement>
        <p>
          Copy your class with its 3 instance variables from <url
          href="topic-3-3-anatomy-of-class.html#groupwork-design-a-class-for-your-community">lesson
          3.3 Community Challenge</url>. Add a constructor with 3 parameters to
          set all of the instance variables to the given parameters. Write a
          print() method that uses System.out.println to print out all the
          instance variables. Write a main method that constructs at least 2
          objects of your class using the constructors and then calls their
          print() methods.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class          // Add your class name here!
          {
              // 1. copy in your instance variables for class from the last lesson

              // 2. Add a constructor with 3 parameters to set all of the instance variables to the given parameters.


              // 3. Write a print() method that uses System.out.println to print out all the instance variables.

              // 4. Write a main method that constructs at least 2 objects of your class
              // using the constructor and then calls their print() methods.
              public static void main(String[] args)
              {
                 // Construct 2 objects of your class to test the constructors


                 // call the objects print() methods

              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testPrivateVariables() {
                  String expect = "3 Private";
                  String output = testPrivateInstanceVariables();
                  boolean passed = false;
                  if (Integer.parseInt(expect.substring(0, 1)) <= Integer.parseInt(output.substring(0, 1)))
                      passed = true;
                  passed = getResults(expect, output, "Checking private instance variable(s)", passed);
                  assertTrue(passed);
              }

              /* No longer required
              @Test
              public void testDefaultConstructor()
              {
                  String output = checkDefaultConstructor();
                  String expect = "pass";

                  boolean passed = getResults(expect, output, "Checking default constructor");
                  assertTrue(passed);
              }
              */

              @Test
              public void testConstructor3() {
                  String output = checkConstructor(3);
                  String expect = "pass";

                  boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
                  assertTrue(passed);
              }

              @Test
              public void testPrint() {
                  String output = getMethodOutput("print");
                  String expect = "More than 15 characters";
                  String actual = " than 15 characters";

                  if (output.length() < 15) {
                      actual = "Less" + actual;
                  } else {
                      actual = "More" + actual;
                  }
                  boolean passed = getResults(expect, actual, "Checking print method");
                  assertTrue(passed);
              }

              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main"); // .split("\n");
                  String expect = "3+ line(s) of text";
                  String actual = " line(s) of text";
                  int len = output.split("\n").length;

                  if (output.length() > 0) {
                      actual = len + actual;
                  } else {
                      actual = output.length() + actual;
                  }
                  boolean passed = len >= 3;

                  getResults(expect, actual, "Checking output", passed);
                  assertTrue(passed);
              }
          }


          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-30">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 3.4.A.1) An object’s <term>state</term> refers to its attributes
            and their values at a given time and is defined by instance
            variables belonging to the object. This defines a <term>has-a</term>
            relationship between the object and its instance variables.
          </p>
        </li>

        <li>
          <p>
            (AP 3.4.A.2) A constructor is used to set the initial state of an
            object, which should include initial values for all instance
            variables. When a constructor is called, memory is allocated for the
            object and the associated object reference is returned. Constructor
            parameters, if specified, provide data to initialize instance
            variables.
          </p>
        </li>

        <li>
          <p>
            A constructor must have the same name as the class! Constructors
            have no return type!
          </p>
        </li>

        <li>
          <p>
            (AP 3.4.A.4) When no constructor is written, Java provides a
            no-parameter constructor, and the instance variables are set to
            default values according to the data type of the attribute. This
            constructor is called the <term>default constructor</term>. (Note
            that AP 3.4.A.3 is covered in lesson 3.6).
          </p>
        </li>

        <li>
          <p>(3.4.A.5) Default values used by the default constructor:</p>

          <p>
            <ul>
              <li>
                <p>
                  The default value for an attribute of type <c>int</c> is
                  <c>0</c>.
                </p>
              </li>

              <li>
                <p>
                  The default value of an attribute of type <c>double</c> is
                  <c>0.0</c>.
                </p>
              </li>

              <li>
                <p>
                  The default value of an attribute of type <c>boolean</c> is
                  <c>false</c>.
                </p>
              </li>

              <li>
                <p>The default value of a reference type is <c>null</c>.</p>
              </li>
            </ul>
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-20">
    <title>AP Practice</title>

    <activity label="AP-constructor1">
      <statement>
        <p>
          Consider the definition of the Cat class below. The class uses the
          instance variable isSenior to indicate whether a cat is old enough to
          be considered a senior cat or not.
        </p>

        <program>
          <![CDATA[

          public class Cat {
              private String name;
              private int age;
              private boolean isSenior;

              public Cat(String n, int a) {
                  name = n;
                  age = a;
                  if (age >= 10) {
                      isSenior = true;
                  } else {
                      isSenior = false;
                  }
              }
          }


          ]]>
        </program>

        <p>
          Which of the following statements will create a Cat object that
          represents a cat that is considered a senior cat?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="AP-constructor1_opt_a">
            <p>Cat c = new Cat (“Oliver”, 7);</p>
          </statement>

          <feedback id="AP-constructor1_opt_a">
            <p>
              The age 7 is less than 10, so this cat would not be considered a
              senior cat.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor1_opt_b">
            <p>Cat c = new Cat (“Max”, “15”);</p>
          </statement>

          <feedback id="AP-constructor1_opt_b">
            <p>
              An integer should be passed in as the second parameter, not a
              string.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor1_opt_c">
            <p>Cat c = new Cat (“Spots”, true);</p>
          </statement>

          <feedback id="AP-constructor1_opt_c">
            <p>
              An integer should be passed in as the second parameter, not a
              boolean.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-constructor1_opt_d">
            <p>Cat c = new Cat (“Whiskers”, 10);</p>
          </statement>

          <feedback id="AP-constructor1_opt_d">
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor1_opt_e">
            <p>Cat c = new Cat (“Bella”, isSenior);</p>
          </statement>

          <feedback id="AP-constructor1_opt_e">
            <p>
              An integer should be passed in as the second parameter and
              isSenior would be undefined outside of the class.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-constructor2">
      <statement>
        <p>
          Consider the following class definition. Each object of the class Cat
          will store the cat’s name as name, the cat’s age as age, and the
          number of kittens the cat has as kittens. Which of the following code
          segments, found in a class other than Cat, can be used to create a cat
          that is 5 years old with no kittens?
        </p>

        <program>
          public class Cat
          {
              private String name;
              private int age;
              private int kittens;

              public Cat(String n, int a, int k)
              {
                  name = n;
                  age = a;
                  kittens = k;
              }
              public Cat(String n, int a)
              {
                  name = n;
                  age = a;
                  kittens = 0;
              }
              /* Other methods not shown */
          }

          I.   Cat c = new Cat("Sprinkles", 5, 0);
          II.  Cat c = new Cat("Lucy", 0, 5);
          III. Cat c = new Cat("Luna", 5);
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>I only</p>
          </statement>

          <feedback>
            <p>Option III can also create a correct Cat instance.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>II only</p>
          </statement>

          <feedback>
            <p>
              Option II will create a cat that is 0 years old with 5 kittens.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>III only</p>
          </statement>

          <feedback>
            <p>Option I can also create a correct Cat instance.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>I and III only</p>
          </statement>

          <feedback>
            <p>Good job!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>I, II and III</p>
          </statement>

          <feedback>
            <p>
              Option II will create a cat that is 0 years old with 5 kittens.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-constructor3">
      <statement>
        <p>Consider the following class definition.</p>

        <program>
          public class Cat {
              private String color;
              private boolean isHungry;
              /* missing constructor */
          }

        </program>

        <p>
          The following statement appears in a method in a class other than Cat.
          It is intended to create a new Cat object c with its attributes set to
          “black” and true. Which of the following can be used to replace
          <term>missing constructor code</term> in the class definition so that
          the object c below is correctly created?
        </p>

        <program>
          Cat c = new Cat("black", true);
        </program>
      </statement>

      <choices>
        <choice>
          <statement id="AP-constructor3_opt_a">
            <program>
              public Cat(String c, boolean h)
              {
                  c = "black";
                  h = true;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_a">
            <p>
              The constructor should be changing the instance variables, not the
              local variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor3_opt_b">
            <program>
              public Cat(String c, boolean h)
              {
                  c = "black";
                  h = "true";
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_b">
            <p>
              The constructor should be changing the instance variables, not the
              local variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor3_opt_c">
            <program>
              public Cat(String c, boolean h)
              {
                  c = color;
                  h = isHungry;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_c">
            <p>
              The constructor should be changing the instance variables, not the
              local variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor3_opt_d">
            <program>
              public Cat(String c, boolean h)
              {
                  color = black;
                  isHungry = true;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_d">
            <p>
              The constructor should be using the local variables to set the
              instance variables.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-constructor3_opt_e">
            <program>
              public Cat(String c, boolean h)
              {
                  color = c;
                  isHungry = h;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_e">
            <p>Correct!</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="progresscheck-u3-part1">
    <title>AP Classroom Progress Check Unit 3 Part 1</title>

    <p>
      This lesson ends the section for the College Board Unit 3 part 1. You can
      now do the College Board Progress Check for Unit 3 Part 1 in the AP
      Classroom.
    </p>
  </subsection>

  <subsection>
    <title>Old constructors intro</title>
    <idx><h>class</h><h>constructor</h></idx>
    <idx>constructors</idx>
    <idx>new</idx>
    <p>
      A Java class defines what objects of the class know (attributes) and what
      they can do (behaviors). Each class has <term>constructors</term> which
      are used to initialize the attributes in a newly created object.
      <term>Constructors</term> have the same name as the class.
    </p>

    <p>
      A new object is created with the <c>new</c> keyword followed by the class
      name which is a call to the constructor (<c>new ClassName()</c>). For
      example, <c>new World()</c> creates and initializes a new object of the
      <c>World</c> class, and <c>new Turtle(habitat)</c> creates and initializes
      a new <c>Turtle</c> object in the World habitat. The new object is saved
      in a variable of a <term>reference type</term> which holds an object
      reference or <c>null</c> if there is no object.
    </p>

    <program>
      // To create a new object and call a constructor write:
      // ClassName variableName = new ClassName(arguments);
      World habitat = new World();    // create a new World object
      Turtle t = new Turtle(habitat); // create a new Turtle object
    </program>
  </subsection>

  <subsection xml:id="the-world-class-constructors">
    <title>The World Class Constructors</title>

    <p>
      There can be more than one constructor defined in a class. This is called
      <term>overloading</term> the constructor. The <c>World</c> class has the 2
      constructors seen below. One doesn’t take any arguments and creates a
      default sized world and one takes the world’s width and height arguments
      to create a world of a specific size. An <term>argument</term> is a value
      that is passed into a constructor. Arguments are used to initialize the
      attributes of an object, in this case, the size of the world.
    </p>

    <figure align="center">
      <caption>Two World constructors</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/worldConstructors.png" width="63%" alt="Two World constructors" />
    </figure>

    <p>
      The <term>no-argument constructor</term> <c>World()</c>, with no arguments
      inside the parentheses following the name of the constructor, creates a
      graphical window with a default size of 640x480 pixels. No-argument
      constructors usually set the attributes of the object to default values.
      The second <c>World(int width, int height)</c> constructor takes two
      integer arguments, and initializes the <c>World</c> object’s width and
      height to them, for example <c>new World(300,400)</c> creates a 300x400
      pixel world.
    </p>

    <program>
      World world1 = new World(); // creates a default size 640x480 world
      World world2 = new World(300,400); // creates a 300x400 world
    </program>

    <activity label="mcq_world_constructor">
      <statement>
        <p>
          Which of these is valid syntax for creating and initializing a World
          object?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>World w = null;</p>
          </statement>

          <feedback>
            <p>
              This declares a variable w that refers to a World object, but it
              doesn't create a World object or initialize it.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = new World;</p>
          </statement>

          <feedback>
            <p>You must include parentheses () to call a constructor.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World();</p>
          </statement>

          <feedback>
            <p>
              Correct, use the new keyword followed by the classname and
              parentheses to create a new object and call the constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = World();</p>
          </statement>

          <feedback>
            <p>You must use the new keyword to create a new object.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World(300,500);</p>
          </statement>

          <feedback>
            <p>
              Correct, this constructor call creates a new World object with the
              size 300x500 pixels.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq_overload_constructor">
      <statement>
        <p>Which of these is overloading the constructor?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>When a constructor takes one argument.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>When a constructor takes more than one argument.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>When one constructor is defined in a class.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>When more than one constructor is defined in a class.</p>
          </statement>

          <feedback>
            <p>
              Overloading means that there is more than one constructor. The
              parameter lists must differ in either number, order, or type of
              parameters.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="the-turtle-class-constructors">
    <title>The Turtle Class Constructors</title>

    <p>
      The <c>Turtle</c> class also has multiple constructors, although it always
      requires a world as an argument in order to have a place to draw the
      turtle. The default location for the turtle is right in the middle of the
      world.
    </p>

    <p>
      There is another <c>Turtle</c> constructor that places the turtle at a
      certain (x,y) location in the world, for example at the coordinate (50,
      100) below.
    </p>

    <program>
      Turtle t1 = new Turtle(world1);
      Turtle t2 = new Turtle(50, 100, world1);
    </program>

    <note>
      <p>
        Notice that the order of the arguments matter. The <c>Turtle</c>
        constructor takes <c>(x,y,world)</c> as arguments in that order. If you
        mix up the order of the arguments it will cause an error, because the
        arguments will not be the data types that it expects. This is one reason
        why programming languages have data types – to allow for error-checking.
      </p>
    </note>

    <activity label="const_turtle">
      <statement>
        <p>
          Which of these is valid syntax for creating and initializing a Turtle
          object in world1?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Turtle t = Turtle(world1);</p>
          </statement>

          <feedback>
            <p>You must use the new keyword to create a new Turtle.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle();</p>
          </statement>

          <feedback>
            <p>All turtle constructors take a world as an argument.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(world1, 100, 100);</p>
          </statement>

          <feedback>
            <p>
              The order of the parameters matter, so this would cause a syntax
              error.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Turtle t = new Turtle(100, 100, world1);</p>
          </statement>

          <feedback>
            <p>
              This creates a new Turtle object in the passed world at location
              (100,100)
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="TurtleConstructorTest">
      <statement>
        <p>
          Try changing the code below to create a <c>World</c> object with
          300x400 pixels. Where is the turtle placed by default? What arguments
          do you need to pass to the <c>Turtle</c> constructor to put the turtle
          at the top right corner? Experiment and find out. What happens if you
          mix up the order of the arguments?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleConstructorTest {
              public static void main(String[] args) {
                  // Change the World constructor to 300x400
                  World world1 = new World(300, 300);

                  // Change the Turtle constructor to put the turtle in the top right
                  // corner
                  Turtle t1 = new Turtle(world1);

                  t1.turnLeft();
                  world1.show(true);
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleConstructorTest");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                              + "import java.util.*;\n\n"
                              + "public class TurtleConstructorTest\n"
                              + "{\n"
                              + "  public static void main(String[] args)\n"
                              + "  {\n"
                              + "      // Change the World constructor to 300x400\n"
                              + "      World world1 = new World(300,300);\n\n"
                              + "      // Change the Turtle constructor to put the turtle in the top right"
                              + " corner\n"
                              + "      Turtle t1 = new Turtle(world1);\n\n"
                              + "      t1.turnLeft();\n"
                              + "      world1.show(true);\n"
                              + "  }\n"
                              + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="object-variables-and-references">
    <title>Object Variables and References</title>

    <idx>reference</idx>
    <idx>null</idx>
    <p>
      New objects are saved in variables of a <term>reference type</term> which
      holds a reference to an object. A <term>reference</term> is a way to find
      the object in memory. It is like a tracking number that you can use to
      track the location of a package in the mail.
    </p>

    <p>
      A special reference value <term>null</term> (which means none) can be used
      when a variable doesn’t refer to any object. For instance, you can declare
      a variable and initialize it to <term>null</term> (<c>Turtle t1 =
      null;</c>) meaning the variable doesn’t refer to any object yet.
    </p>

    <p>
      Watch the <url
      href="https://www.youtube.com/watch?v=5fpjgXAV2BU&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;ab_channel=colleenlewis">video</url>
      below about null.
    </p>

    <video youtube="5fpjgXAV2BU" label="video-null" />
    <p>
      The code <c>Turtle t1 = null;</c> creates a variable <c>t1</c> that refers
      to a <c>Turtle</c> object, but the <c>null</c> means that it doesn’t refer
      to an object yet. You could later create the object and set the object
      variable to refer to that new object (<c>t1 = new Turtle(world1)</c>). Or
      more commonly, you can declare an object variable and initialize it in the
      same line of code (<c>Turtle t2 = new Turtle(world1);</c>).
    </p>

    <program>
      World world1 = new World();
      Turtle t1 = null;
      t1 = new Turtle(world1);
      // declare and initialize t2
      Turtle t2 = new Turtle(world1);
    </program>
  </subsection>

  <subsection xml:id="constructor-signatures">
    <title>Constructor Signatures</title>

    <idx>signature</idx>
    <idx>parameters</idx>
    <idx>arguments</idx>
    <idx>call by value</idx>
    <idx>overloading</idx>
    <p>
      When you use a class that someone has already written for you in a
      <term>library</term> that you can import like the <c>Turtle</c> class
      above, you can look up how to use the constructors and methods in the <url
      href="https://cseweb.ucsd.edu/~ricko/CSE11/turtleClassesDocs/index.html?turtleClasses/SimpleTurtle.html">documentation</url>
      for that class. The documentation will list the <term>signatures</term>
      (or headers) of the constructors or methods which will tell you their name
      and parameter list. The <term>parameter list</term>, in the
      <term>header</term> of a constructor, is an ordered list of variable
      declarations which includes data types. The parameter variables will store
      the argument values passed into the constructor.
    </p>

    <p>
      Constructors are said to be <term>overloaded</term> when there are
      multiple constructors, but the constructors have different signatures.
      They can differ in the number, type, and/or order of parameters. For
      example, here are the two constructors for the <c>Turtle</c> class that
      take different parameters:
    </p>

    <figure align="center">
      <caption>Turtle Class Constructor Signatures and Parameters</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/TurtleClassDefn.png" width="100%" alt="Turtle Class Constructor Signatures and Parameters" />
    </figure>

    <activity label="TurtleClass1">
      <statement>
        <p>
          Given the Turtle class in the figure above and a World object world1,
          which of the following code segments will correctly create an instance
          of a Turtle object at (x,y) coordinates (50,150)?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Turtle t = new Turtle();</p>
          </statement>

          <feedback>
            <p>
              There is no Turtle constructor that takes no arguments according
              to the figure above.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(50,150);</p>
          </statement>

          <feedback>
            <p>
              There is no Turtle constructor that takes 2 arguments according to
              the figure above.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(world1);</p>
          </statement>

          <feedback>
            <p>
              This would initialize the Turtle to the middle of the world, not
              necessarily coordinates (50,150).
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(world1,50,150);</p>
          </statement>

          <feedback>
            <p>
              Make sure the order of the arguments match the constructor
              signature above.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Turtle t = new Turtle(50,150,world1);</p>
          </statement>

          <feedback>
            <p>
              This matches the second constructor above with the parameters of
              x, y, and world.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      In Unit 3, you will learn to write your own classes. However, if you see a
      class definition on the AP exam, like the one below for a class called
      <c>Date</c>, you should be able to pick out the attributes (instance
      variables) and the constructors and know how to use them.
    </p>

    <figure align="center">
      <caption>A Date class showing attributes and constructors</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/DateClass.png" width="89%" alt="A Date class showing attributes and constructors" />
    </figure>

    <activity label="date_constructor">
      <statement>
        <p>Click on the constructor headers (signatures)</p>
      </statement>

      <feedback>
        <p>
          Constructors are public and have the same name as the class. Click on
          the constructor headers which are the first line of the constructors
          showing their name and parameters.
        </p>
      </feedback>

      <areas>
        <cline><area correct="no">public class Date {</area></cline>
        <cline></cline>
        <cline>    <area correct="no">private int year;</area></cline>
        <cline>    <area correct="no">private int month;</area></cline>
        <cline>    <area correct="no">private int day;</area></cline>
        <cline></cline>
        <cline>    <area correct="yes">public Date() </area></cline>
        <cline>        <area correct="no">{ /** Implementation not shown */ }</area></cline>
        <cline></cline>
        <cline>    <area correct="yes">public Date(int year, int month, int day) </area></cline>
        <cline>        <area correct="no">{ /** Implementation not shown */ }</area></cline>
        <cline></cline>
        <cline>     <area correct="no">public void print() </area></cline>
        <cline>        <area correct="no">{ /** Implementation not shown */ }</area></cline>
        <cline></cline>
        <cline><area correct="no">}</area></cline>
      </areas>
    </activity>

    <activity label="DateClass1">
      <statement>
        <p>
          Given the <c>Date</c> class in the figure above and assuming that
          months in the <c>Date</c> class are numbered starting at 1, which of
          the following code segments will create a <c>Date</c> object for the
          date September 20, 2020 using the correct constructor?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Date d = new Date();</p>
          </statement>

          <feedback>
            <p>
              This would initialize the date attributes to today's date
              according to the constructor comment above, which might not be
              Sept. 20, 2020.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Date d = new Date(9,20);</p>
          </statement>

          <feedback>
            <p>
              There is no Date constructor that takes 2 arguments according to
              the figure above.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Date d = new Date(9,20,2020);</p>
          </statement>

          <feedback>
            <p>
              The comment for the second constructor in the Date class above
              says that the first argument must be the year.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Date d = new Date(2020,9,20);</p>
          </statement>

          <feedback>
            <p>
              This matches the second constructor above with the parameters
              year, month, day.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Date d = new Date(2020,20,9);</p>
          </statement>

          <feedback>
            <p>
              Make sure the order of the arguments match the constructor
              signature above.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="arguments-parameters-and-call-by-value">
    <title>Arguments, Parameters, and Call by Value</title>

    <p>
      When a constructor like <c>Date(2005,9,1)</c> is called, the
      <term>parameters</term>, (<c>year</c>, <c>month</c>, and <c>day</c>), are
      set to copies of the <term>arguments</term>, (<c>2005</c>, <c>9</c>, and
      <c>1</c>). This is <term>call by value</term> which means that copies of
      the argument values are passed to the constructor. These values are used
      to initialize the object’s attributes. A constructor call interrupts the
      sequential execution of statements in that the program executes the
      statements in the constructor before continuing. Once the last statement
      in the constructor has been executed, the flow of control is returned to
      the point immediately following where the constructor was called.
    </p>

    <figure align="center">
      <caption>Parameter Mapping</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/parameterMappingDate.png" width="80%" alt="Parameter Mapping" />
    </figure>

    <p>
      The type of the values being passed in as arguments have to match the type
      of the parameter variables. We cannot give a constructor a <c>String</c>
      object when it is expecting an <c>int</c>. The order of the arguments also
      matters. If you mix up the month and the day in the <c>Date</c>
      constructor, you will get a completely different date, for example January
      9th (1/9) instead of Sept. 1st (9/1).
    </p>

    <activity label="mcq_params">
      <statement>
        <p>
          In <c>public World(int width, int height)</c> what are <c>width</c>
          and <c>height</c>?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>objects</p>
          </statement>

          <feedback>
            <p>Objects have attributes and behavior.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>classes</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>parameters</p>
          </statement>

          <feedback>
            <p>The parameters are in the constructor's signature.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>arguments</p>
          </statement>

          <feedback>
            <p>An argument is the value that is passed into the constructor.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq_arguments">
      <statement>
        <p>In <c>new World(150, 200)</c> what are <c>150</c> and <c>200</c>?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>objects</p>
          </statement>

          <feedback>
            <p>Objects have attributes and behavior.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>classes</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>parameters</p>
          </statement>

          <feedback>
            <p>A parameter is in the constructor's signature.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>arguments</p>
          </statement>

          <feedback>
            <p>An argument is the value that is passed into the constructor.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="TurtleConstructorDebug">
      <statement>
        <p>Debug the following code.</p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleConstructorDebug
          {
              public static void main(String[] args)
              {
                  World w = new World(300,0);
                  turtle t0;
                  Turtle t1 = new Turtle();
                  Turtle t2 = new Turtle(world, 100, 50)
                  t0.forward();
                  t1.turnRight();
                  t2.turnLeft();
                  world.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleConstructorDebug");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                                  + "import java.util.*;\n\n"
                                  + "public class TurtleConstructorDebug\n"
                                  + "{\n"
                                  + "  public static void main(String[] args)\n"
                                  + "  {\n"
                                  + "      World w = new World(300,0);\n"
                                  + "      turtle t0;\n"
                                  + "      Turtle t1 = new Turtle();\n"
                                  + "      Turtle t2 = new Turtle(world, 100, 50)\n"
                                  + "      t0.forward();\n"
                                  + "      t1.turnRight();\n"
                                  + "      t2.turnLeft();\n"
                                  + "      world.show(true);\n"
                                  + "  }\n"
                                  + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <p>
      This lesson introduces a lot of vocabulary, but don’t worry if you don’t
      understand everything about classes and constructors yet. You will learn
      more about how this all works in later units when you write your own
      classes and constructors. And you will see parameters again with methods
      in the next lessons.
    </p>

    <image source="Unit1-Using-Objects-and-Methods/Figures/customTurtles.png" width="36%" />
  </subsection>

  <subsection xml:id="coding-challenge-custom-turtles">
    <title>Coding Challenge: Custom Turtles</title>

    <p>
      Working in pairs, you will now look at a new class called CustomTurtle and
      design some colorful turtles with its constructors. The CustomTurtle class
      in the ActiveCode below inherits many of its attributes and methods from
      the Turtle class. However, it has some new constructors with more
      parameters to customize a turtle with its body color, shell color, width,
      and height. CustomTurtle has 3 constructors:
    </p>

    <program>
      /** Constructs a CustomTurtle in the middle of the world */
      public CustomTurtle(World w)

      /** Constructs a CustomTurtle with a specific body color,
          shell color, and width and height in the middle of the world */
      public CustomTurtle(World w, Color body, Color shell, int w, int h)

      /** Constructs a CustomTurtle with a specific body color,
          shell color, and width and height at position (x,y) in the world */
      public CustomTurtle(int x, int y, World w, Color body, Color shell, int w, int h)
    </program>

    <p>
      You will use the constructor(s) to create the CustomTurtles below. You can
      specify colors like Color.red by using the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.desktop/java/awt/Color.html">Color</url>
      class in Java.
    </p>

    <p>
      <ol>
        <li>
          <p>
            Create a large 150x200 (width 150 and height 200) CustomTurtle with
            a green body (Color.green) and a blue shell (Color.blue) at position
            (150,300)
          </p>
        </li>

        <li>
          <p>
            Create a small 25x50 CustomTurtle with a red body and a yellow shell
            at position (350,200)
          </p>
        </li>

        <li>
          <p>Create a CustomTurtle of your own design.</p>
        </li>
      </ol>
    </p>

    <project label="challenge-CustomTurtles">
      <statement>
        <p>
          Use the CustomTurtle constructors with the signatures below to create
          the turtles with the colors and positions described in the comments of
          the program.
        </p>

        <program>
          /** Constructs a CustomTurtle in the middle of the world */
          public CustomTurtle(World w)

          /** Constructs a CustomTurtle with a specific body color,
              shell color, and width and height in the middle of the world */
          public CustomTurtle(World w, Color body, Color shell, int w, int h)

          /** Constructs a CustomTurtle with a specific body color, shell color,
              and width and height at position (x,y) in the world */
          public CustomTurtle(int x, int y, World w, Color body, Color shell, int w, int h)
        </program>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class CustomTurtleRunner {
              public static void main(String[] args) {
                  World world1 = new World(400, 400);

                  // 1. Change the constructor call below to create a large
                  // 150x200 CustomTurtle with a green body (Color.green)
                  // and a blue shell (Color.blue) at position (150,300).
                  // Move it forward to see it.
                  CustomTurtle turtle1 = new CustomTurtle(world1);
                  turtle1.forward();

                  // 2. Create a small 25x50 CustomTurtle with a red body
                  // and a yellow shell at position (350,200)
                  // Move it forward to see it.

                  // 3. Create a CustomTurtle of your own design

                  world1.show(true);
              }
          }

          class CustomTurtle extends Turtle {
              private int x;
              private int y;
              private World w;
              private Color bodycolor;
              private Color shellcolor;
              private int width;
              private int height;

              /**
               * Constructor that takes the model display
               *
               * @param modelDisplay the thing that displays the model or world
               */
              public CustomTurtle(ModelDisplay modelDisplay) {
                  // let the parent constructor handle it
                  super(modelDisplay);
              }

              /**
               * Constructor that takes the model display to draw it on and custom colors and size
               *
               * @param m the world
               * @param body : the body color
               * @param shell : the shell color
               * @param w: width
               * @param h: height
               */
              public CustomTurtle(ModelDisplay m, Color body, Color shell, int w, int h) {
                  // let the parent constructor handle it
                  super(m);
                  bodycolor = body;
                  setBodyColor(body);
                  shellcolor = shell;
                  setShellColor(shell);
                  height = h;
                  width = w;
                  setHeight(h);
                  setWidth(w);
              }

              /**
               * Constructor that takes the x and y and a model display to draw it on and custom colors and
               * size
               *
               * @param x the starting x position
               * @param y the starting y position
               * @param m the world
               * @param body : the body color
               * @param shell : the shell color
               * @param w: width
               * @param h: height
               */
              public CustomTurtle(int x, int y, ModelDisplay m, Color body, Color shell, int w, int h) {
                  // let the parent constructor handle it
                  super(x, y, m);
                  bodycolor = body;
                  setBodyColor(body);
                  shellcolor = shell;
                  setShellColor(shell);
                  height = h;
                  width = w;
                  setHeight(h);
                  setWidth(w);
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("CustomTurtleRunner");
              }

              @Test
              public void test1() {
                  String target = "new CustomTurtle(150,300,world1, Color.green, Color.blue, 150, 200)";
                  boolean passed =
                          checkCodeContains(
                                  "constructor for a large 150x200 CustomTurtle with a green body and a blue"
                                          + " shell at position (150,300) in world1",
                                  target);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String target = "new CustomTurtle(350,200,world1, Color.red, Color.yellow, 25, 50)";
                  boolean passed =
                          checkCodeContains(
                                  "constructor for a small 25x50 CustomTurtle with a red body and a yellow"
                                          + " shell at position (350,200) in world1",
                                  target);
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-4">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 1.13.A.1) A class contains <term>constructors</term> that are
            called with the keyword <c>new</c> to create objects and initialize
            its attributes.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.1) <term>Constructors</term> have the same name as the
            class.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.1) An object is typically created using the keyword new
            followed by a call to one of the class’s constructors. <c>new
            ClassName()</c> creates a new object of the specified class and
            calls a constructor.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.B.1) The new object is saved in a variable of a
            <term>reference type</term> which holds an object reference or null
            if there is no object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.2) A <term>constructor signature</term> consists of the
            constructor’s name, which is the same as the class name, and the
            ordered list of parameter types.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.2) The <term>parameter list</term>, in the header of a
            constructor, lists the types of the values that are passed and their
            variable names.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.3) Constructors are said to be <term>overloaded</term>
            when there are multiple constructors with different signatures. They
            must differ in the number, type, or order of parameters.
          </p>
        </li>

        <li>
          <p>
            A <term>no-argument constructor</term> is a constructor that doesn’t
            take any passed in values (arguments).
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.2) <term>Parameters</term> allow constructors to accept
            values to establish the initial values of the attributes of the
            object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.3) A constructor <term>argument</term> is a value that is
            passed into a constructor when the constructor is called. The
            arguments passed to a constructor must be compatible in order and
            number with the types identified in the parameter list in the
            constructor signature.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.3) When calling constructors, arguments are passed using
            call by value. <term>Call by value</term> initializes the parameters
            with copies of the arguments.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.4) A constructor call interrupts the sequential execution
            of statements, causing the program to first execute the statements
            in the constructor before continuing. Once the last statement in the
            constructor has been executed, the flow of control is returned to
            the point immediately following where the constructor was called.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-3">
    <title>AP Practice</title>

    <activity label="AP-constructors">
      <statement>
        <p>
          Consider the following class. Which of the following successfully
          creates a new Cat object?
        </p>

        <program>
          public class Cat
          {
              private String color;
              private String breed;
              private boolean isHungry;

              public Cat()
              {
                  color = "unknown";
                  breed = "unknown";
                  isHungry = false;
              }

              public Cat(String c, String b, boolean h)
              {
                  color = c;
                  breed = b;
                  isHungry = h;
              }
          }

          I.   Cat a = new Cat();
          II.  Cat b = new Cat("Shorthair", true);
          III. String color = "orange";
               boolean hungry = false;
               Cat c = new Cat(color, "Tabby", hungry);
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>I only</p>
          </statement>

          <feedback>
            <p>
              I is one of the correct constructors but the second constructor
              can also be used.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>I and II</p>
          </statement>

          <feedback>
            <p>
              II is not correct because there is no Cat constructor with 2
              parameters.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>I and III</p>
          </statement>

          <feedback>
            <p>I and III call the correct constructors.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>I, II, and III</p>
          </statement>

          <feedback>
            <p>
              II is not correct because there is no Cat constructor with 2
              parameters.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>II and III</p>
          </statement>

          <feedback>
            <p>
              II is not correct because there is no Cat constructor with 2
              parameters.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-constructors2">
      <statement>
        <p>
          Consider the following class. Which of the following code segments
          will construct a Movie object m with a title of “Lion King” and rating
          of 8.0?
        </p>

        <program>
          public class Movie {
              private String title;
              private String director;
              private double rating;
              private boolean inTheaters;

              public Movie(String t, String d, double r) {
                  title = t;
                  director = d;
                  rating = r;
                  inTheaters = false;
              }

              public Movie(String t) {
                  title = t;
                  director = "unknown";
                  rating = 0.0;
                  inTheaters = false;
              }
          }

        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Movie m = new Movie(8.0, "Lion King");</p>
          </statement>

          <feedback>
            <p>There is no Movie constructor with 2 parameters.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Movie m = Movie("Lion King", 8.0);</p>
          </statement>

          <feedback>
            <p>There is no Movie constructor with 2 parameters.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Movie m = new Movie();</p>
          </statement>

          <feedback>
            <p>
              This creates a Movie object but it does not have the correct title
              and rating.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Movie m = new Movie("Lion King", "Disney", 8.0);</p>
          </statement>

          <feedback>
            <p>
              This creates a Movie object with the correct title and rating.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Movie m = new Movie("Lion King");</p>
          </statement>

          <feedback>
            <p>
              This creates a Movie object but it does not have a rating of 8.0.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
