<?xml version="1.0" encoding="utf-8"?>

<chapter xml:id="arrays" xml:lang="en-US" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Arrays</title>

  <introduction>
    <p>
      So far the data types we’ve focused on have been the three primitive data
      types <c>int</c>, <c>double</c>, and <c>boolean</c>. We’ve made a little
      bit of use of <c>String</c> for generating output and mentioned that it is
      <em>not</em> a primitive type but rather a <term>reference type</term>.
    </p>

    <p>
      In this unit we are going to look at <term>arrays</term> which as our
      first real dive into a reference type. Arrays sit a bit between the
      primitive types and classes, which we’ll learn about in <xref
      ref="reference-types" />, but they give us a good way to start to
      understand the difference between primitive and reference types. So we’ll
      start with a quick overview here before getting into arrays themselves in
      the next section.
    </p>

    <p>
      One way to describe the distinction is that primitive types are the things
      the computer actually knows about and reference types are defined by Java.
    </p>

    <p>
      For example, modern CPUs know how to do arithmetic with thirty-two-bit
      integers, i.e. <c>int</c> values, and sixty-four-bit floating point
      numbers, i.e. <c>doubles</c>. That is, completely independent of Java or
      any other programming language, they have circuitry devoted to
      interpreting sets of thirty-two or sixty-four bits in a certain way so we
      can do math with them. Similarly, the CPU has circuitry for doing Boolean
      logic that map very directly to what we can do in Java with <c>boolean</c>
      values. But anything beyond the handful of primitive types the computer
      inherently understands are represented in Java by reference types.
    </p>

    <p>
      Typically reference types represent more data than can fit in thirty-two
      or sixty-four bits; many can require an arbitrary amount of memory. For
      instance, a <c>String</c> can be short like <c>"foo"</c> but it can also
      be millions characters long, such as the complete text of <pubtitle>War
      and Peace</pubtitle>. Arrays, likewise, can represent essentially
      arbitrary amount of data from a handful of values to millions or even
      billions.
    </p>

    <p>
      To represent arbitrarily large values Java splits the value into two parts
      which together make up an <term>object</term>. The actual data—the text of
      <pubtitle>War and Peace</pubtitle> in a <c>String</c> or the millions of
      numbers in an array—is called the <term>object data</term> and it lives
      somewhere in the computer’s memory. But to get at the object data we need
      a special number, called a <term>reference</term>, that the CPU knows how
      to deal with. A reference is a single value that tells the CPU where in
      memory the object data lives. References, not the object data they refer
      to, are assigned to variables and passed as arguments to methods when
      dealing with objects.
    </p>

    <p>
      Most of the time we don’t have to distinguish between the object data and
      the reference to it since in Java there’s no way to get at the object data
      except through the reference. But when we say the value of some variable
      is a particular object what we really mean is that the variable holds a
      reference to that object’s data. And when we say an object contains a
      particular value, we means that that value is somewhere in the object
      data.
    </p>

    <p>
      With that preamble out of the way, we’re ready to actually look at arrays
      and how to use them.
    </p>
  </introduction>

  <xi:include href="./topic-4-3-array-basics.ptx" />
  <xi:include href="./topic-4-4-array-traversal.ptx" />
  <xi:include href="./topic-4-5-array-algorithms.ptx" />
  <xi:include href="./2d-arrays.ptx" />
</chapter>
