<?xml version="1.0" encoding="utf-8"?>

<section xml:id="two-dimensional-arrays">
  <title>Two-dimensional arrays</title>

  <idx>2D Arrays</idx>
  <idx>row</idx>
  <idx>column</idx>
  <idx><h>arrays</h><h>2D</h></idx>
  <idx><h>2D Array</h><h>definition</h></idx>
  <idx><h>2D Array</h><h>row</h></idx>
  <idx><h>2D Array</h><h>column</h></idx>
  <idx><h>2D Array</h><h>declaration</h></idx>
  <idx><h>2D Array</h><h>creation</h></idx>
  <introduction>
    <p>
      The arrays we’ve been dealing with so far are also called, more
      specifically, <term>one-dimensional arrays</term> because the elements are
      arranged along a one dimension like numbers on the number line or people
      on line to get a cinnamon bun or slice of pizza that’s gone viral on
      TikTok. In order to indicate which element we want out of a
      one-dimensional array we need just one number, the index.
    </p>

    <p>
      But sometimes it’s useful to think of data arranged in more than one
      dimension. For instance many things are arranged in horizontal
      <term>rows</term> and vertical <term>columns</term> like spreadsheets,
      chess boards, bingo cards, and theater seats. And all the images on a
      computer screen are ultimately made up of tiny pixels arranged into a
      two-dimensional arrangement of rows and columns. In the picture below
      there are three rows of lockers and six columns.
    </p>

    <figure align="center">
      <caption>Lockers in rows and columns</caption>

      <image source="Unit4-Data-Collections/Figures/2DLockers.jpg" width="63%" />
    </figure>

    <p>
      In Java we can also make <term>two-dimensional arrays</term> or <term>2d
      arrays</term> which can be indexed with two indices which we can think of
      as rows and columns or x and y. Though as it turns out, Java’s 2d arrays
      are really just 1d arrays that happen to contain 1d arrays as their
      elements. So if we fully understand how arrays work in general, there’s
      not much more to learn about 2d arrays.
    </p>
  </introduction>

  <subsection>
    <title>Declaring 2d arrays</title>

    <p>
      The key to understanding 2d arrays is to understanding that 1d arrays can
      contain any kind of value, which includes other arrays. So, to review, if
      we want to make an array of <c>int</c> values, we use <c>int[]</c>. And
      for an array of <c>String</c> values we use <c>String[]</c>.
    </p>

    <p>
      Which means if we want to make an array whose values are <c>int[]</c>,
      that is, one-dimensional arrays, we use <c>int[][]</c>, adding another
      pair of square brackets <c>[]</c> after the element type. Thus we can
      think of an <c>int[][]</c> either as a 2d array (which is how we normally
      think of it) or as a 1d array whose elements are <c>int[]</c>.
    </p>

    <p>Here are two declarations of 2d array variables:</p>

    <program>
      int[][] ticketInfo;
      String[][] seatingChart;
    </program>

    <p>
      As with any array declarations, declaring a variable doesn’t cause an
      actual array to be created so these variables will be <c>null</c> until
      they are initialized. And we have no idea how big the arrays will be that
      these variables will eventually reference.
    </p>
  </subsection>

  <subsection>
    <title>Creating 2d arrays</title>

    <p>
      The array creation expressions and array initializers we used with
      one-dimensional arrays also work to create 2d arrays. The main difference
      is that when we want to construct a 2d array of a specific size, we need
      to specify the size of both dimensions and when we use an array
      initializer we need use nested <c>{}</c> to provide initial values in two
      dimensions.
    </p>

    <p>
      For example, here’s how to create array values of a particular size and
      assign them to the <c>ticketInfo</c> and <c>seatingChart</c> declared
      above:
    </p>

    <program>
      ticketInfo = new int[2][3];
      seatingChart = new String[3][2];
    </program>

    <p>
      Those array creation expressions create an outer array which has the
      length specified by the number in the first set of <c>[]</c> and then
      creates that many inner arrays whose length is specified in the second set
      of <c>[]</c>. Typically (and always on the AP exam) we think of the first
      dimension as rows and the second as columns. So we’d describe
      <c>ticketInfo</c> as two rows of three columns each while
      <c>seatingChart</c> is three rows of two columns each. Each row of a 2d
      array is represented by a 1d array containing the actual values in that
      row and each column.
    </p>

    <p>
      The values in the inner arrays are filled with the appropriate zero type
      for their element type, <c>int</c> for the inner arrays of
      <c>ticketInfo</c> and <c>String</c> for the inner ararys of
      <c>seatingChart</c>. So in total ticketInfo contains six <c>int</c> zeros
      arranged into two three-element inner arrays while <c>seatingChart</c>
      contains six <c>null</c> refernces arranged into three two-element inner
      arrays.
    </p>

    <p>
      We can also use array initializers to create array values with specific
      values. We write the inner arrays as array initializers nested within an
      outer set of <c>{}</c>. As with a one-dimensional array initializer we
      don’t need to specify the dimensions of the array in the <c>[]</c> because
      it’s implicit in the number of values provided. Here are initializers for
      our two variables that set them to arrays of the same shape (number of
      rows and columns) as the previous array creation expressions, though this
      time with specific, non-zero values in the inner arrays.
    </p>

    <program>
      // Using array initializer
      ticketInfo = new int[][] { { 25, 20, 25 }, { 25, 20, 25 } };
      seatingInfo = new String[][] { { "Jamal", "Maria" }, {"Jake", "Suzy" }, { "Emma", "Luke" } };
    </program>

    <p>
      Also similar to creating 1d arrays we can use array initializers to
      provide specific values. In this case, the syntactic sugar of not having
      to include the <c>new</c> and the type of the arrays when we’re
      initializing a newly declared array variable, makes things pretty compact
      and readable:
    </p>

    <program>
      int[][] ticketInfo = { { 25, 20, 25}, { 25, 20, 25} };
      String[][] seatingInfo = { { "Jamal", "Maria" }, { "Jake", "Suzy" }, { "Emma", "Luke" } };
    </program>

    <activity label="twodaGetElfill">
      <statement>
        <p>
          What is the value at <c>seatingInfo[2][1]</c> after the code above
          executes?
        </p>

        <p>
          Remember that indices start at 0, and the first index is for rows and
          the second index is for columns.
        </p>

        <p>
          <fillin answer="Luke" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              Correct! The string at row index 2 and column index 1 is "Luke."
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              Remember, indices start at 0, and the row index comes first,
              followed by the column index.
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <note>
      <p>
        There are other ways to create arrays that are outside of the scope of
        the AP curriculum. For instance, we can make a new array with the second
        dimension unspecified like <c>new int[10][]</c> which will create a
        ten-element array initialized with <c>null</c> values that can latter be
        assigned references to any <c>int[]</c>. And those arrays don’t
        necessarily all have be the same length, giving us a non-rectangular
        array. Similarly with array initializers we can make arbitrarily shaped
        arrays. But all 2d arrays on the AP exam will be rectangular, meaning
        every row will be the same length.
      </p>
    </note>

    <activity label="twodaNumElfill">
      <statement>
        <p>How many elements are in <c>ticketInfo</c>?</p>

        <p>
          <fillin answer="6" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>Correct! 2 × 3 = 6.</feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              Multiply the number of rows and the number of columns.
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <activity label="twoDArrayCreate">
      <statement>
        <p>
          What will the following code print out? Can you change ticketInfo to
          be an array of 5 rows and 10 columns? Can you declare another array
          called studentNames that has 10 rows and 5 columns? The length
          property of arrays will be explained below.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class TicketInfo {
            public static void main(String[] args) {
              // declare arrays
              int[][] ticketInfo = new int[2][3];
              System.out.println(ticketInfo.length + " rows");
              System.out.println(ticketInfo[0].length + " columns");
            }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import java.io.*;
          import org.junit.*;

          public class RunestoneTests extends CodeTestHelper {
            public RunestoneTests() {
              super("TicketInfo");
            }

            @Test
            public void test1() {
              String output = getMethodOutput("main");
              String expected = "5 rows\n10 columns";

              boolean passed = output.contains(expected);
              passed = getResults(expected, output, "Changed ticketInfo to 5 rows and 10 columns", passed);

              assertTrue(passed);
            }

            @Test
            public void test2() {
              String expected = "studentNames = new String[10][5]";

              boolean passed = checkCodeContains(expected);
              assertTrue(passed);
            }
          }
        </tests>
      </program>
    </activity>

    <p>
      Try to answer the following questions. Click on the value or values to
      select them. Click again to unselect a value.
    </p>

    <activity label="clicktd1">
      <statement>
        <p>Click on all the values in the row at index 2</p>
      </statement>

      <feedback>
        <p>
          Rows are horizontal and columns are vertical and both start with index
          0.
        </p>
      </feedback>

      <areas>
        <table>
          <tabular>
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">8</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-1</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">5</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">0</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-7</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="yes">2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">-3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">-4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">-5</area>
              </cell>
            </row>
          </tabular>
        </table>
      </areas>
    </activity>

    <activity label="clicktd2">
      <statement>
        <p>Click on all the values in the column at index 1</p>
      </statement>

      <feedback>
        <p>
          Rows are horizontal and columns are vertical and both start with index
          0.
        </p>
      </feedback>

      <areas>
        <table>
          <tabular>
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">8</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">-2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-1</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">5</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">0</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-7</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">-3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-5</area>
              </cell>
            </row>
          </tabular>
        </table>
      </areas>
    </activity>

    <activity label="clicktd3">
      <statement>
        <p>Click on the value at row index 2 and column index 1</p>
      </statement>

      <feedback>
        <p>
          Rows are horizontal and columns are vertical and both start with index
          0.
        </p>
      </feedback>

      <areas>
        <table>
          <tabular>
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">8</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-1</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">5</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">0</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-7</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">-3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-5</area>
              </cell>
            </row>
          </tabular>
        </table>
      </areas>
    </activity>

    <activity label="clicktd4">
      <statement>
        <p>Click on the value at row index 0 and column index 2</p>
      </statement>

      <feedback>
        <p>
          Rows are horizontal and columns are vertical and both start with index
          0.
        </p>
      </feedback>

      <areas>
        <table>
          <tabular>
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <col top="minor" />
            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">8</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="yes">3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-1</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">5</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">0</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-7</area>
              </cell>
            </row>

            <row left="minor">
              <cell bottom="minor" right="minor">
                <area correct="no">2</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-3</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-4</area>
              </cell>

              <cell bottom="minor" right="minor">
                <area correct="no">-5</area>
              </cell>
            </row>
          </tabular>
        </table>
      </areas>
    </activity>

    <activity label="clicktd5">
      <statement>
        <p>Click on the value at row index 1 and column index 1</p>
      </statement>

      <feedback>
        <p>
          Rows are horizontal and columns are vertical and both start with index
          0.
        </p>
      </feedback>

      <areas>
        <table>
          <tabular bottom="minor" right="minor" top="minor" left="minor">
            <row>
              <cell><area correct="no">8</area></cell>
              <cell><area correct="no">-2</area></cell>
              <cell><area correct="no">3</area></cell>
              <cell><area correct="no">-1</area></cell>
            </row>

            <row>
              <cell><area correct="no">4</area></cell>
              <cell><area correct="yes">5</area></cell>
              <cell><area correct="no">0</area></cell>
              <cell><area correct="no">-7</area></cell>
            </row>

            <row>
              <cell><area correct="no">2</area></cell>
              <cell><area correct="no">-3</area></cell>
              <cell><area correct="no">-4</area></cell>
              <cell><area correct="no">-5</area></cell>
            </row>
          </tabular>
        </table>
      </areas>
    </activity>
  </subsection>

  <subsection xml:id="set-values-in-a-2d-array">
    <title>Accessing values in a 2d array</title>

    <idx><h>2D Array</h><h>initialization</h></idx>
    <idx><h>2D Array</h><h>set value</h></idx>

    <p>
      Another similarity between one-dimensional and 2d arrays is the way we
      access the values. Normally we want to get and set the actual values in
      the array, such as the <c>int</c> values in an <c>int[][]</c>. Just like
      with a one-dimensional array we use an array access expression, but this
      time with two pairs of <c>[]</c> rather than just one. The expression in
      the first pair gives us the index into the outer array, or the row index,
      and the expression in the second pair gives the column index used to index
      into the inner array.
    </p>

    <p>
      Here’s some code that initializes some arrays and then accesses some
      values, getting the value from row one, column zero of <c>ticketInfo</c>
      and from row zero, column one of <c>seatingInfo</c>. It then assigns a new
      value to row zero, column zero of <c>ticketInfo</c>:
    </p>

    <program>
      int[][] ticketInfo = { {25,20,25}, {25,20,25} };
      String[][] seatingInfo = { {"Jamal", "Maria"}, {"Jake", "Suzy"}, {"Emma", "Luke"} };

      int value = ticketInfo[1][0];
      String name = seatingInfo[0][1];
      ticketInfo[0][0] = 15;
    </program>

    <activity label="qa2dab_2">
      <statement>
        <p>What is the value of <c>name</c> after the code above executes?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Jamal</p>
          </statement>

          <feedback>
            <p>
              This would be true for if <c>name</c> was set to
              <c>seatingInfo[0][0];</c> instead.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Maria</p>
          </statement>

          <feedback>
            <p>Maria is the value of <c>seatingInfo[0][1];</c>.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Jake</p>
          </statement>

          <feedback>
            <p>
              This would be true for if <c>name</c> was set to
              <c>seatingInfo[1][0];</c> instead.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Suzy</p>
          </statement>

          <feedback>
            <p>
              This would be true for if <c>name</c> was set to
              <c>seatingInfo[1][1];</c> instead.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Emma</p>
          </statement>

          <feedback>
            <p>
              This would be true for if <c>name</c> was set to
              <c>seatingInfo[2][1];</c> instead.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>


    <activity label="twoDArraySet">
      <statement>
        <p>
          Try to predict what the code below will print then run it. Did it
          print what you expected? If it didn’t, open the Hint below for an
          explanation. After you’ve run it once, edit the code to add an extra
          row to the <c>seatingChart</c> array and add your name and a friend’s
          name in the columns of this extra row using assignment statements.
        </p>
      </statement>

      <hint>
        <p>
          While <c>System.out.println</c> can turn any value into a
          <c>String</c> to print it, not all reference types to a particularly
          useful string representation. Arrays, in particular, turn into the
          gibberish you see when you run this program.
        </p>

        <p>
          In the next lesson, we’ll learn how to use nested loops to print out a
          whole 2D Array. Right now, you can use the CodeLens button to see what
          the values are after this code runs. Or you can add this line at the
          top of the code.
        </p>

        <program>
          import java.util.Arrays;
        </program>

        <p>
          and the change the two <c>System.out.println</c> lines to:
        </p>

        <program>
          System.out.println(Arrays.deepToString(ticketInfo));
          System.out.println(Arrays.deepToString(seatingChart));
        </program>

        <p>
          to get more readable representations of the two arrays.
        </p>
      </hint>

      <program interactive="activecode">
        <code>
          public class TwoDArraySet {
            public static void main(String[] args) {
              // declare arrays
              int[][] ticketInfo;
              String[][] seatingChart;

              // create arrays
              ticketInfo = new int[2][3];
              seatingChart = new String[3][2];

              // initialize the array elements
              ticketInfo[0][0] = 15;
              ticketInfo[0][1] = 10;
              ticketInfo[0][2] = 15;
              ticketInfo[1][0] = 25;
              ticketInfo[1][1] = 20;
              ticketInfo[1][2] = 25;
              seatingChart[0][0] = "Jamal";
              seatingChart[0][1] = "Maria";
              seatingChart[1][0] = "Jacob";
              seatingChart[1][1] = "Suzy";
              seatingChart[2][0] = "Emma";
              seatingChart[2][1] = "Luke";

              // print the contents
              System.out.println(ticketInfo);
              System.out.println(seatingChart);
            }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import java.io.*;
          import org.junit.*;

          public class RunestoneTests extends CodeTestHelper {
            public RunestoneTests() {
              super("TwoDArraySet");
            }

            @Test
            public void test1() {
              String output = getMethodOutput("main");
              String expected = "[[I@", expected2 = "[[Ljava.lang.String;@";

              boolean passed = output.contains(expected) && output.contains(expected2);

              passed = getResults("true", "" + passed, "Prints two 2D arrays");
              assertTrue(passed);
            }

            @Test
            public void test2() {
              String code = getCode();
              String expected = "new String[4][2]";

              boolean passed = code.contains(expected);

              passed = getResults("true", "" + passed, "Add another row to seatingChart");
              assertTrue(passed);
            }

            @Test
            public void test3() {
              String code = getCode();
              String expected1 = "seatingChart[3][0]";
              String expected2 = "seatingChart[3][1]";

              boolean passed = code.contains(expected1) && code.contains(expected2);

              passed = getResults("true", "" + passed, "Give values to new elements");
              assertTrue(passed);
            }
          }

          ]]>
        </tests>
      </program>
    </activity>

    <activity label="qa2dab_1">
      <statement>
        <p>
          Which of the following sets the value for the 3rd row and 2nd column
          of a 2D array called <c>nums</c>?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>nums[3][2] = 5;</p>
          </statement>

          <feedback>
            <p>Remember that the indices start at 0.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>nums[1][2] = 5;</p>
          </statement>

          <feedback>
            <p>Remember that the row is first then the column.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>nums[2][1] = 5;</p>
          </statement>

          <feedback>
            <p>This will set the value of the 3rd row and 2nd column.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>nums[2][3] = 5;</p>
          </statement>

          <feedback>
            <p>
              Remember that the row is first and then the column and that the
              indices start at 0.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>



    <activity label="twoDArrayInitGet">
      <statement>
        <p>
          Add another row to seatingInfo initialized to your name and a friend’s
          name. Get these names out of the array using the correct indices and
          then print them out.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class TwoDArrayInitGet {
            public static void main(String[] args) {
              String[][] seatingInfo = {
                {"Jamal", "Maria"},
                {"Jake", "Suzy"},
                {"Emma", "Luke"}
              };
              String name = seatingInfo[0][0];
              System.out.println(name + " is at [0,0]");
            }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import java.io.*;
          import org.junit.*;

          public class RunestoneTests extends CodeTestHelper {
            public RunestoneTests() {
              super("TwoDArrayInitGet");
            }

            @Test
            public void test1() {
              String output = getMethodOutput("main");
              String expected = "Jamal is at [0,0]";

              boolean passed = output.contains(expected);

              passed = getResults("true", "" + passed, "Output contains " + expected);
              assertTrue(passed);
            }

            @Test
            public void test2() {
              String output = getMethodOutput("main");
              String[] lines = output.split("\n");

              String expected = "[3,0]";
              String actual = "";

              boolean passed = false;

              for (String l : lines) {
                if (l.replaceAll(" ", "").contains(expected)) {
                  actual = l;
                  passed = true;
                }
              }

              passed =
                  getResults(
                      "Name is at " + expected, actual, "Add one name to new row and print it out", passed);
              assertTrue(passed);
            }

            @Test
            public void test3() {
              String output = getMethodOutput("main");
              String[] lines = output.split("\n");

              String expected = "[3,1]";
              String actual = "";

              boolean passed = false;

              for (String l : lines) {
                if (l.replaceAll(" ", "").contains(expected)) {
                  actual = l;
                  passed = true;
                }
              }

              passed =
                  getResults(
                      "Name is at " + expected,
                      actual,
                      "Add second name to new row and print it out",
                      passed);
              assertTrue(passed);
            }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="d-array-row-and-column-length">
    <title>2D array sizes</title>

    <idx><h>2D Array</h><h>number of rows</h></idx>
    <idx><h>2D Array</h><h>number of columns</h></idx>
    <idx>length</idx>
    <p>
      As we know, we can get the length of a one-dimensional aarray using it’s
      <c>length</c> property. That property of course exists on 2d arrays too,
      because they are just one-dimensional arrays that happen to contain other
      arrays. So the <c>length</c> of a 2d array is the number of rows in the
      array and the <c>length</c> of any of those rows is the number of columns.
      Traditionally programmers will use <c>array[0].length</c> since as long as
      the array has any rows it has a row <c>0</c>.
    </p>

    <program>
      ticketInfo.length    // number of rows
      ticketInfo[0].length // number of columns
    </program>

    <p>
      As always, the length of an array determines what indices are valid. So
      the valid row indices of a 2d array, <c>grid</c> are from <c>0</c> to
      <c>grid.length - 1</c>, inclusive, and the valid column indices are from
      <c>0</c> to <c>grid[0].length - 1</c>, also inclusive. Using an index
      value outside of these ranges will result in an
      <c>ArrayIndexOutOfBoundsException</c>.
    </p>

    <note>
      <p>
        Using the length of the zeroth row as number of columns only works if
        the array is rectangular, meaning all the rows contain the same number
        of columns. That will be true of all 2d arrays on the AP exam but is not
        necessarily true in general.
      </p>
    </note>

    <activity label="qa2ldb_2">
      <statement>
        <p>
          How many rows does <c>a</c> have if it is created as follows
          <c>int[][] a = { {2, 4, 6, 8}, {1, 2, 3, 4}};</c>?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>2</p>
          </statement>

          <feedback>
            <p>The size of outer list is the number of rows.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>4</p>
          </statement>

          <feedback>
            <p>The size of the inner list is the number of columns.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>8</p>
          </statement>

          <feedback>
            <p>This is the total number of items in the array.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qa2ldb_3">
      <statement>
        <p>
          Which of the following could be used to get the value in the third row
          and second column from a 2D array called <c>nums</c>?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>nums[3][2]</p>
          </statement>

          <feedback>
            <p>
              This would be true if array indices started with 1 but they start
              with 0.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>nums[2][3]</p>
          </statement>

          <feedback>
            <p>
              This would be true if array indices started with 1 and the column
              was specified first. However, array indices start at 0 and the row
              is given first in row-major order.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>nums[2][1]</p>
          </statement>

          <feedback>
            <p>
              Array indices start with 0 so the third row has an index of 2 and
              the second column has an index of 1.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>nums[1][2]</p>
          </statement>

          <feedback>
            <p>
              This would be true if the column index was first, but in row-major
              order the row index is first.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-ascii-art">
    <title>Coding Challenge: ASCII art</title>

    <p>
      ASCII is a commonly used character encoding standard where each key you
      press on the keyboard is translated to an ASCII number to be stored in the
      computer. ASCII has been mostly replaced by UNICODE which includes
      characters in other languages like Chinese. In the days before good
      graphics, some people made ASCII art just using the keyboard characters.
      Take a look at this <url href="https://www.asciiart.eu/">ASCII art</url>
      collection!
    </p>

    <p>
      We can represent ASCII art in a 2D array of rows and columns. What do you
      think the following code will print out? Try to guess before you run it.
      The loops to print out the 2D array will be explained in the next lesson.
      Then, do the following:
    </p>

    <p>
      <ol>
        <li>
          <p>
            Change the code to use 2 assignment statements with the 2D array
            <c>asciiArt</c> to change the “o” characters to “@” characters. You
            should figure out what the row and column indices should be for the
            “o” characters and use them with the array name to set that
            character to “@”. After testing this code, comment it out so that
            your teacher can still see it.
          </p>
        </li>

        <li>
          <p>
            Add a new <c>asciiArt</c> array with a different <url
            href="https://www.asciiart.eu/">ASCII art</url> from the collection
            or of your own design. Be careful with the special characters like
            <c>"</c> and <c>\</c>. You will need to put another backslash in
            front of these to print them out like <c>\"</c> and <c>\\</c>.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-8-1-ascii-art">
      <statement>
        <p>
          Part 1: Add 2 assignment statements for the 2D array asciiArt to
          change the “o” characters to “@” characters. Part 2: Create a new
          asciiArt array and print it out.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class AsciiArt {
            public static void main(String[] args) {

              String[][] asciiArt = {
                {" ", " ", "_", "_", "_", " ", " "},
                {" ", "(", "o", " ", "o", ")", " "},
                {"(", " ", " ", "V", " ", " ", ")"},
                {" ", "-", "m", "-", "m", "-", " "},
              };

              // Part 1: Add 2 assignment statements to change "o" to "@"

              // print the asciiArt for Part 1
              System.out.println("ASCII Art:");
              for (String[] row : asciiArt) {
                for (String column : row) System.out.print(column);
                System.out.println();
              }

              // Part 2: Create your own ASCII art array and print it out!

            }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import java.io.*;
          import org.junit.*;

          public class RunestoneTests extends CodeTestHelper {
            public RunestoneTests() {
              super("AsciiArt");
            }

            @Test
            public void test0() {
              String output = getMethodOutput("main");
              String expect = "ASCII Art: \n___  \n (@ @) \n(  V  )\n -m-m-";

              boolean passed = getResults(expect, output, "Running main()", true);
              assertTrue(passed);
            }

            /* removed because doesn't work if their own art has o
            @Test
            public void test1()
            {
                String output = getMethodOutput("main");
                String expect = "ASCII Art: \n___  \n (@ @) \n(  V  )\n -m-m-";

                boolean passed = output.contains("@") && !output.contains("o");
                passed = getResults(expect, output, "changed o to @", passed);
                assertTrue(passed);
            }
            */

            @Test
            public void test2() {
              String output = getMethodOutput("main");
              String expect = "___  \n (@ @) \n(  V  )\n -m-m-";

              if (output.contains("-m-m-")) {
                int i = output.indexOf("-m-m-") + "-m-m-".length();
                output = output.substring(i);
              }

              String[] lines = output.split("\n");

              boolean passed = output.length() >= 10 && lines.length >= 3;

              passed =
                  getResults(
                      "Your art", output, "added your own ascii art (should be at least 3 x 3)", passed);
              assertTrue(passed);
            }

            @Test
            public void test3() {
              String expect = "asciiArt[#][#] = \"@\"";
              String code = getCode();
              int num = countOccurencesRegex(code, expect);

              boolean passed = num >= 2;

              getResults("2", "" + num, "Number of asciiArt[#][#] = \"@\" lines in code", passed);

              assertTrue(passed);
            }
          }

          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-38">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 4.11.A.1) A <term>2D array</term> is stored as an array of
            arrays. Therefore, the way 2D arrays are created and indexed is
            similar to 1D array objects. The size of a 2D array is established
            at the time of creation and cannot be changed. 2D arrays can store
            either primitive data or object reference data. Nonrectangular 2D
            array objects (with varying column length for each row) are outside
            the scope of the AP Computer Science A course and exam.
          </p>
        </li>

        <li>
          <p>
            2D arrays are declared and created with the following syntax:
            <c>datatype[][] variableName = new
            datatype[numberRows][numberCols]</c>;
          </p>
        </li>

        <li>
          <p>
            (AP 4.11.A.2) When a 2D array is created using the keyword
            <c>new</c>, all of its elements are initialized to the default
            values for the element data type. The default value for <c>int</c>
            is <c>0</c>, for <c>double</c> is <c>0.0</c>, for <c>boolean</c> is
            <c>false</c>, and for a reference type is <c>null</c>.
          </p>
        </li>

        <li>
          <p>
            (AP 4.11.A.3) The initializer list used to create and initialize a
            2D array consists of initializer lists that represent 1D arrays; for
            example, <c>int[][] arr2D = { {1, 2, 3}, {4, 5, 6} };</c>.
          </p>
        </li>

        <li>
          <p>
            (AP 4.11.A.4) The square brackets <c>[row][col]</c> are used to
            access and modify an element in a 2D array. For the purposes of the
            AP exam, when accessing the element at <c>arr[first][second]</c>,
            the <c>first</c> index is used for rows, the <c>second</c> index is
            used for columns.
          </p>
        </li>

        <li>
          <p>
            <term>Row-major order</term> refers to an ordering of 2D array
            elements where traversal occurs across each row, while
            <term>column-major order</term> traversal occurs down each column.
          </p>
        </li>

        <li>
          <p>
            (AP 4.11.A.5) A single array that is a row of a 2D array can be
            accessed using the 2D array name and a single set of square brackets
            containing the row index.
          </p>
        </li>

        <li>
          <p>
            (AP 4.11.A.6) The number of rows contained in a 2D array can be
            accessed through the <c>length</c> attribute. The valid row index
            values for a 2D array are <c>0</c> through one less than the number
            of rows or the length of the array, inclusive. The number of columns
            contained in a 2D array can be accessed through the <c>length</c>
            attribute of one of the rows. The valid column index values for a 2D
            array are <c>0</c> through one less than the number of columns or
            the length of any given row of the array, inclusive. For example,
            given a 2D array named <c>values</c>, the number of rows is
            <c>values.length</c> and the number of columns is
            <c>values[0].length`</c>. Using an index value outside of these
            ranges will result in an <c>ArrayIndexOutOfBoundsException</c>.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

</section>
