<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-4-4-array-traversal">
  <title>Looping over arrays</title>

  <introduction>
    <p>
      Loops and arrays go together like peas and carrots. It’s like they were
      made for each other. Actually, they kind of were. In this lesson, we will
      learn how to combine loops with arrays, from simple cases like using a
      loop to do something with each element of an array in order, to more
      complex cases like processing just part of an array or processing the
      elements backwards.
    </p>
  </introduction>

  <subsection>
    <title>Using a canonical <c>for</c> loop</title>

    <p>
      In the last lesson, we mentioned that we can use a variable or any other
      <c>int</c> expression for the index in an array access expression. We can
      even do math inside the <c>[]</c>, like below.
    </p>

    <program>
      // highScores array declaration
      int[] highScores = { 10, 9, 8, 8};
      // use a variable for the index
      int index = 3;
      // modify array value at index
      highScores[index] = 11;
      // print array value at index
      System.out.println(highScores[index]);
      System.out.println(highScores[index - 1]);
    </program>

    <p>
      What does the code above print out? You can follow the code in this <url
      href="http://www.pythontutor.com/visualize.html#code=public%20class%20ArrayWithIndexVar%20%7B%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20//%20highScores%20array%20declaration%0A%20%20%20%20%20%20int%5B%5D%20highScores%20%3D%20%7B%2010,%209,%208,%208%7D%3B%0A%20%20%20%20%20%20//%20use%20a%20variable%20for%20the%20index%0A%20%20%20%20%20%20int%20index%20%3D%203%3B%0A%20%20%20%20%20%20//%20modify%20array%20value%20at%20index%0A%20%20%20%20%20%20highScores%5Bindex%5D%20%3D%2011%3B%0A%20%20%20%20%20%20//%20print%20array%20value%20at%20index%0A%20%20%20%20%20%20System.out.println%28%20%20highScores%5Bindex%5D%20%29%3B%0A%20%20%20%20%20%20System.out.println%28%20%20highScores%5Bindex%20-%201%5D%20%29%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualizer</url>
      and look at the image depicting the array below.
    </p>

    <figure align="center">
      <caption>Array with index variable</caption>

      <image source="Unit4-Data-Collections/Figures/arraywithindex.png" width="63%" />
    </figure>

    <p>
      One of the most common situations where we will use a variable for the
      index into an array is when the variable is the loop variable in a
      canonical <c>for</c> loop where the loop limit is the length of the array.
      Indeed, it’s traditional to name the loop variable in a <c>for</c> loop
      <c>i</c> as an abbreviation for “index”.
    </p>

    <figure align="center">
      <caption>For Loop Traversing Array</caption>

      <image source="Unit4-Data-Collections/Figures/arrayForLoop.png" width="89%" />
    </figure>

    <p>
      Here’s a canonical <c>for</c> loop that loops over (or
      <term>traverses</term>) the <c>highScores</c> array. Try the code below in
      the <url
      href="http://www.pythontutor.com/visualize.html#code=public%20class%20ArrayLoop%0A%7B%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%0A%20%20%20%20%7B%0A%0A%20%20%20%20%20%20%20%20int%5B%5D%20highScores%20%3D%20%7B%2010,%209,%208,%208%7D%3B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20highScores.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20%20highScores%5Bi%5D%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%20%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualizer</url>
      to see how it executes step by step.
    </p>

    <program>
      <![CDATA[
      int[] highScores = { 10, 9, 8, 11};

      // Loop over array with a canonical for loop
      for (int i = 0; i < highScores.length; i++) {
          System.out.println(highScores[i]);
      }
      ]]>
    </program>

    <p>
      However, with a bit of practice we won’t need to step through loops like
      this to understand them. We should be able to see at a glance that this
      loop is doing something with each element of the array in order. Once we
      see what that something is—printing the value—we can describe what the
      loop does at a higher level than tracing through it step by step. We could
      describe what the loop above does as, “prints every element of
      <c>highScores</c>”.
    </p>

    <activity label="arraytrace2">
      <title>Code reading</title>

      <statement>
        <p>
          What do you think the following code will print out? If you need to,
          you can trace through it on paper with a trace table or with the Code
          Lens button. But see if you can describe it at a higher level first.
          Then, run it to see if you were right.
        </p>

        <p>
          Once you understand the loop, try adding your name and a friend’s name
          to the array <c>names</c> and run the code again. Did the code work
          without changing the loop?
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class Test2 {
              public static void main(String[] args) {
                  String[] names = {"Jamal", "Emily", "Destiny", "Mateo", "Sofia"};

                  for (int i = 0; i < names.length; i++) {
                      System.out.println(names[i]);
                  }
              }
          }
          ]]>
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("Test2");
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect = "Jamal\nEmily\nDestiny\nMateo\nSofia";

                  boolean passed = output.contains(expect);
                  passed = getResults(expect, output, "Did you run the code?", passed);
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  String output = getMethodOutput("main");
                  String expect = "Jamal\nEmily\nDestiny\nMateo\nSofia\nYour name\nFriend's name";

                  int len = output.split("\n").length;

                  boolean passed = len >= 6;

                  passed = getResults(expect, output, "Did you add two more names?", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>

    <p>
      Using a canonical <c>for</c> loop pretty much ensures that we won’t create
      any of the common looping bugs. Our loop variable will take on exactly the
      legal indices into our array, starting at <c>0</c> and going up to one
      less than the length so we won’t crash our program with an
      <c>ArrayIndexOutOfBoundsException</c>.
    </p>

    <activity label="qIndexOutOfBounds">
      <title>Pick the right loop</title>

      <statement>
        <p>
          Which of the following loop headers will cause an
          <c>ArrayIndexOutOfBounds</c> error while traversing the array scores?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="qIndexOutOfBounds_opt_a">
            <p>for (int i = 0; i &lt; scores.length; i++)</p>
          </statement>

          <feedback id="qIndexOutOfBounds_opt_a">
            <p>This loop will traverse the complete array.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="qIndexOutOfBounds_opt_b">
            <p>for (int i = 1; i &lt; scores.length; i++)</p>
          </statement>

          <feedback id="qIndexOutOfBounds_opt_b">
            <p>
              This loop will not cause an error even though it will not visit
              the element at index 0.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="qIndexOutOfBounds_opt_c">
            <p>for (int i = 0; i &lt;= scores.length; i++)</p>
          </statement>

          <feedback id="qIndexOutOfBounds_opt_c">
            <p>
              The index cannot be equal to scores.length, since (scores.length -
              1) is the index of the last element.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="qIndexOutOfBounds_opt_d">
            <p>for (int i = 0; scores.length &gt; i; i++)</p>
          </statement>

          <feedback id="qIndexOutOfBounds_opt_d">
            <p>
              Although the ending condition looks strange, (scores.length &gt;
              i) is equivalent to (i &lt; scores.length).
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="qIndexOutOfBounds_opt_e">
            <p>for (int i = scores.length - 1; i &gt;= 0; i++)</p>
          </statement>

          <feedback id="qIndexOutOfBounds_opt_e">
            <p>
              This will cause an error because i++ will continue to increment
              the index past the end of the array. It should be replaced with i–
              to avoid this error.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="offbyone">
      <title>Fix the off-by-ones</title>

      <statement>
        <p>
          The following code has an ArrayIndexOutOfBoundsException. It has 2
          common off-by-one errors in the loop. Can you fix it and make the loop
          print out all the scores?
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class OffByone
          {
              public static void main(String[] args)
              {
                  int[] scores = {10, 9, 8, 7};
                  // Make this loop print out all the scores!
                  for (int i = 1; i <= scores.length; i++)
                  {
                      System.out.println(scores[i]);
                  }
              }
          }
          ]]>
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

           import org.junit.*;

           import java.io.*;

           public class RunestoneTests extends CodeTestHelper
           {
               public RunestoneTests()
               {
                   super("OffByone");
               }

               @Test
               public void test1()
               {
                   String output = getMethodOutput("main");
                   String expect = "9\n8\n7".replaceAll(" ", "\n");

                   boolean passed = output.contains(expect);
                   getResults(expect, output, "Testing right off-by-one error", passed);
                   assertTrue(passed);
               }

               @Test
               public void test2()
               {
                   String output = getMethodOutput("main");
                   String expect = "10\n9\n8".replaceAll(" ", "\n");

                   boolean passed = output.contains(expect);
                   getResults(expect, output, "Testing left off-by-one error", passed);
                   assertTrue(passed);
               }

               @Test
               public void checkCodeContains1()
               {
                   boolean passed = checkCodeContains("fixes to for loop", "for (int i = 0; i <");
                   assertTrue(passed);
               }
           }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection>
    <title>Enhanced <c>for</c> loop</title>

    <p>
      There is a special kind of loop that can be used with arrays (and some
      other data structures) called the <term>enhanced <c>for</c> loop</term> or
      a <term>for each loop</term>. This loop is designed for the common case
      where we just want to do something with each element of an array and don’t
      actually care about the index.
    </p>

    <p>
      The basic structure looks like the loop on the left which is equivalent to
      the normal <c>for</c> loop on the right, both looping over a <c>String</c>
      array, <c>names</c>. The only difference is that in the enhanced
      <c>for</c> loop the code doesn’t have to worry about the index variable
      <c>i</c>.
    </p>

    <sidebyside>
      <listing>
        <title>Enhanced <c>for</c> loop</title>

        <program>
          for (String s : names) {

            // use s
          }
        </program>
      </listing>

      <listing>
        <title>Regular <c>for</c> loop</title>

        <program>
          <![CDATA[
          for (int i = 0; i < names.length; i++) {
            String s = names[i];
            // use s
          }
          ]]>
        </program>
      </listing>
    </sidebyside>

    <p>
      In an enhanced <c>for</c> loop the loop variable before the <c>:</c> holds
      the value of each element of the array in turn without us having to use a
      separate index variable to get at it. This means the type of the variable
      has to be the same as the element type of the array. We can read this loop
      as “for each <c>s</c> in <c>names</c>” which is why this kind of loop is
      called a for-each loop.
    </p>

    <p>
      See the examples below in Java that loop through an int and a String
      array. Notice the type of the loop variable is the type of the array.
    </p>

    <program>
      int[] highScores = { 10, 9, 8, 8 };
      String[] names = { "Jamal", "Emily", "Destiny", "Mateo" };

      // for each score in highScores print it
      for (int score : highScores) {
          System.out.println(score); // Notice no index or [], just the variable score!
      }

      // for each name in names print it
      for (String name : names) {
          System.out.println(name);
      }
    </program>

    <p>
      We should use the enhanced <c>for</c> loop whenever we can, because it’s
      more concise and cuts down on errors. However it isn’t always applicable.
      The main limitation is that we don’t have access to the underlying index
      variable. So we can’t, for instance, easily compare adjacent elements of
      an array or modify the value at whatever position we are in, in the array.
      For instance, there’s no way to use an enhanced <c>for</c> loop to write
      something like this regular <c>for</c> loop which adds one to each element
      of an array of <c>int</c>:
    </p>

    <program>
      <![CDATA[
      for (int i = 0; i < numbers.length; i++) {
        numbers[i]++; // Need the index to be able to change the array element
      }
      ]]>
    </program>

    <p>
      Similarly, since we have no control over the order we access the elements
      of the array we can’t use the enhanced <c>for</c> loop if we want to loop
      backwards through an array or over only part of an array. And to use the
      enhanced loop we need something to loop over. That can be an array or a
      few other data types, such as <c>ArrayList</c> which we’ll learn about in
      <xref ref="array-lists" />. But we need <em>something</em> to loop over
      whereas with a regular <c>for</c> loop we can loop using whatever
      initializer, condition, and updater we want.
    </p>

    <p>
      Because a regular <c>for</c> loop is more flexible than the enhanced
      <c>for</c> loop, we can always rewrite an enhanced loop using a regular
      loop but not always the other way around.
    </p>

    <activity label="foreach1">
      <statement>
        <p>
          Try the following code. Notice the for each loop with an <c>int</c>
          array and a <c>String</c> array. Add another high score and another
          name to the arrays and run again.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          public class ForEachDemo {
              public static void main(String[] args) {
                  int[] highScores = {10, 9, 8, 8};
                  String[] names = {"Jamal", "Emily", "Destiny", "Mateo"};
                  // for each loop with an int array
                  for (int value : highScores) {
                      System.out.println(value);
                  }
                  // for each loop with a String array
                  for (String value : names) {
                      System.out.println(value); // this time it's a name!
                  }
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("ForEachDemo");
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect1 = "10\n9\n8\n8";
                  String expect2 = "Jamal\nEmily\nDestiny\nMateo";

                  boolean passed = output.contains(expect1) && output.contains(expect2);

                  passed = getResults(expect1 + " " + expect2, output, "Original main()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  String output = getMethodOutput("main");
                  String expect = "10 9 8 8 Jamal Emily Destiny Mateo".replaceAll(" ", "\n");

                  boolean passed = !output.equals(expect) && output.length() > expect.length();

                  passed = getResults(expect, output, "Added another high score and name", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>

    <activity label="evenLoop">
      <title>Rewrite as enhanced <c>for</c> loop</title>

      <statement>
        <p>
          Rewrite the following for loop which prints out the even numbers in
          the array as an enhanced <c>for</c> loop. Make sure it works!
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class EvenLoop {
              public static void main(String[] args) {
                  int[] values = {6, 2, 1, 7, 12, 5};
                  // Rewrite this loop as a for each loop and run
                  for (int i = 0; i < values.length; i++) {
                      if (values[i] % 2 == 0) {
                          System.out.println(values[i] + " is even!");
                      }
                  }
              }
          }
          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("EvenLoop");
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect = "6 is even!\n2 is even!\n12 is even!";

                  boolean passed = getResults(expect, output, "main()");
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  boolean passed = checkCodeContains("for each loop", "for(int * : values)");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="incrementLoop">
      <statement>
        <p>
          The for-each loop below cannot change the values in the array because
          only the loop variable value will change. Run it with the CodeLens
          button to see why this is. Then, change the loop to an indexed for
          loop to make it change the array values.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          public class IncrementLoop
          {
              public static void main(String[] args)
              {
                  int[] values = {6, 2, 1, 7, 12, 5};
                  // Can this loop increment the values?
                  for (int val : values)
                  {
                      val++;
                      System.out.println("New val: " + val);
                  }
                  // Print out array to see if they really changed
                  System.out.println("Array after the loop: ");
                  for (int v : values)
                  {
                      System.out.print(v + " ");
                  }
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("IncrementLoop");
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect =
                          "New val: 7\n"
                              + "New val: 3\n"
                              + "New val: 2\n"
                              + "New val: 8\n"
                              + "New val: 13\n"
                              + "New val: 6\n"
                              + "Array after the loop:\n"
                              + "7 3 2 8 13 6";

                  boolean passed = getResults(expect, output, "main()");
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  String target = "for (int * = #; * ? *.length; *~)";
                  boolean passed = checkCodeContains("for loop", target);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="mcq_for_each1">
      <statement>
        <p>
          Which of the following are reasons you would use an enhanced
          <c>for</c> loop instead of a regular <c>for</c> loop?
        </p>

        <pre>
            I: If you wish to access every element of an array.
           II: If you wish to modify elements of the array.
          III: If you wish to refer to elements through a variable name instead of an array index.
        </pre>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Only I.</p>
          </statement>

          <feedback>
            <p>
              This style of loop does access every element of the array, but
              using a for-each loop also means the user can access elements
              through the variable name.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>I and III only.</p>
          </statement>

          <feedback>
            <p>
              Correct! For-each loops access all elements and enable users to
              use a variable name to refer to array elements, but do not allow
              users to modify elements directly.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>II and III only.</p>
          </statement>

          <feedback>
            <p>
              For-each loops, as well as allowing users to refer to array
              elements, run through every element. For-each loops also do not
              allow users to modify elements directly.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>All of the Above.</p>
          </statement>

          <feedback>
            <p>
              For-each loops access all of an array's elements and allow users
              to refer to elements through a variable, but do not allow users to
              modify elements directly.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcqfor-each2">
      <statement>
        <p>What is the output of the following code segment?</p>

        <program>
          int[] numbers = { 44, 33, 22, 11 };

          for (int num : numbers) {
              num *= 2;
          }

          for (int num : numbers) {
              System.out.print(num + " ");
          }
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement id="mcqfor-each2_opt_a">
            <p>44 33 22 11</p>
          </statement>

          <feedback id="mcqfor-each2_opt_a">
            <p>
              The array is unchanged because the foreach loop cannot modify the
              array elements.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="mcqfor-each2_opt_b">
            <p>46 35 24 13</p>
          </statement>

          <feedback id="mcqfor-each2_opt_b">
            <p>
              Remember that the foreach loop cannot modify the array elements,
              but it also uses multiplication, not addition.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="mcqfor-each2_opt_c">
            <p>88 66 44 22</p>
          </statement>

          <feedback id="mcqfor-each2_opt_c">
            <p>
              Remember that the foreach loop cannot modify the array elements.
              Only the variable num will be doubled, not the original array
              values.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="mcqfor-each2_opt_d">
            <p>The code will not compile.</p>
          </statement>

          <feedback id="mcqfor-each2_opt_d">
            <p>This code will compile.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>More complex loops</title>

    <p>
      While we should us the enhanced <c>for</c> loop when we can, there are
      cases where we will need the flexibility of a regular loop such as if we
      want to loop over a specific range in the array, to process the array in
      reverse order, or to use the index for something beyond just getting the
      element from one position in one array.
    </p>

    <p>
      For example, the following code doubles the first five elements in an
      array. Notice that it uses <c>Math.min</c> to compute the limit because we
      want the loop to run five times or the whole length of the array if it has
      fewer than five elements. Another way to write this would be with a more
      complex boolean expression such as <c>i &lt; values.length &amp;&amp; i
      &lt; 5</c>. Which is clearer is a matter of taste but using
      <c>Math.min</c> is arguably more to the point.
    </p>

    <program>
      <![CDATA[
      // Notice: Math.min to limit the number of iterations.
      for (int i = 0; i < Math.min(5, values.length); i++) {
        values[i] *= 2;
      }
      ]]>
    </program>

    <p>
      We couldn’t write this with an enhanced <c>for</c> loop for two reasons:
      we want to change the values in the array and we want to only loop over
      part of the array.
    </p>

    <p>
      Now consider if we wanted to print the elements of an array backwards.
      Easy to do with a regular for loop where we loop down from the biggest
      index to the smallest.
    </p>

    <program>
      <![CDATA[
      String[] names = { "Jamal", "Emily", "Destiny", "Mateo" };

      for (int i = names.length - 1; i >= 0; i--) {
        System.out.println(names[i]);
      }
      ]]>
    </program>

    <p>
      Or if we wanted to print out students with their ages, given two arrays we
      could write this:
    </p>

    <program>
      <![CDATA[
      String[] names = { "Jamal", "Emily", "Destiny", "Mateo" };
      int[] ages = { 15, 16, 14, 17 };

      for (int i = 0; i < names.length; i++) {
        System.out.println("Name: " + names[i] + "; age: " + ages[i]);
      }
      ]]>
    </program>

    <p>
      That code relies on the fact that the two arrays are the same length so we
      don’t get an <c>ArrayIndexOutOfBoundsException</c> but otherwise is pretty
      simple. And we can only access elements from both arrays because we have
      the index in our loop variable.
    </p>

    <activity label="mcq_array_mystery">
      <title>Mystery loop</title>

      <statement>
        <p>
          Given the initial values of <c>a</c> what will the values of <c>a</c>
          be after the loop runs?
        </p>

        <program>
          <![CDATA[
          private int[] a = { -20, -15, 2, 8, 16, 33 };

          for (int i = 0; i < a.length / 2; i += 2) {
             a[i] *= 2;
          }
          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p><c>{ -40, -30, 4, 16, 32, 66 }</c></p>
          </statement>

          <feedback>
            <p>
              This would true if it looped through the whole array and doubled
              each. Does it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p><c>{ -40, -30, 4, 8, 16, 33 }</c></p>
          </statement>

          <feedback>
            <p>
              This would be true if it looped from the beginning to the middle
              and doubled each. Does it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p><c>{ -20, -15, 2, 16, 32, 66 }</c></p>
          </statement>

          <feedback>
            <p>
              This would be true if it looped from the middle to the end and
              doubled each. Does it?
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p><c>{ -40, -15, 4, 8, 16, 33 }</c></p>
          </statement>

          <feedback>
            <p>
              This loops from the beginning to the middle and doubles every
              other element (i+=2 is the same as i = i + 2).
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p><c>{ -40, -15, 4, 8, 32, 33 }</c></p>
          </statement>

          <feedback>
            <p>
              This would be true if it looped through the whole array and
              doubled every other element. Does it?
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>Coding Challenge: SpellChecker</title>

    <p>
      In this challenge, you will use an array of English words from a
      dictionary file to see if a given word is spelled correctly. We encourage
      you to work in pairs for this challenge.
    </p>

    <datafile label="dictionary" filename="dictionary.txt" editable="no" hide="yes">
      <pre source="_static/datasets/dictionary.txt" />
    </datafile>

    <project label="challenge-spellchecker">
      <title>Spellchecker</title>

      <statement>
        <sidebyside widths="15% 100%" margins="-20% 0%">
          <image source="Unit4-Data-Collections/Figures/spellcheck.png" width="18%">
            <shortdescription>Spell Checker</shortdescription>
          </image>

          <p>
            This challenge includes a dictionary file of 10,000 English words
            which is read into the array <c>dictionary</c> for you. You could
            use this <url
            href="https://replit.com/@BerylHoffman/SpellChecker1">replit</url>
            code instead that has an even bigger dictionary of English words and
            lets you do input with your spell checker. We will learn how to read
            in files using Java later on in <xref ref="text-files" />.
          </p>
        </sidebyside>

        <p>
          <ol>
            <li>
              <p>
                Write a <c>print10</c> method that prints out the first 10 words
                of the dictionary array. Do not print out the whole array of
                10,000 words!
              </p>
            </li>

            <li>
              <p>
                Write a <c>spellcheck</c> method that takes a word as a
                parameter and returns true if it is in the dictionary array. It
                should return false if it is not found (When can you tell that
                you have not found a word in the dictionary?). Test your code
                below by changing the word sent to the spellcheck() method in
                main. This algorithm is called a <term>linear search</term>
                where we step through the array one element at a time (here the
                dictionary one word at a time) looking for a certain element.
              </p>
            </li>

            <li>
              <p>
                Optional Challenge: Write a method
                <c>printStartsWith(String)</c> that prints out the words that
                start with a <c>String</c> of letters in the <c>dictionary</c>
                array. Your method should take a parameter for the
                <c>firstLetters</c> as a <c>String</c>. You could use the Java
                String <url
                href="https://www.w3schools.com/java/ref_string_startswith.asp">startsWith()</url>
                method here if you’d like to, or use <c>indexOf</c> to see if
                the <c>firstLetters</c> is at index 0 of the string. This is not
                autograded.
              </p>
            </li>
          </ol>
        </p>
      </statement>

      <program interactive="activecode" datafile="dictionary.txt">

        <code>
          <![CDATA[
          import java.io.*;
          import java.nio.file.*;
          import java.util.*;

          public class SpellChecker {

              // This dictionary has 10,000 English words that will be read
              // in from a dictionary file in the constructor
              private String[] dictionary = new String[10000];

              /* 1. Write a print10() method that prints out the first ten
               * words of the dictionary array. Do not print out the whole array!
               */

              /* 2. Write a spellcheck() method that takes a word as a
               * parameter and returns true if it is in the dictionary array.
               * Return false if it is not found.
               */

              // Do not change "throws IOException" which is needed for reading in the input
              // file
              public static void main(String[] args) throws IOException {
                  SpellChecker checker = new SpellChecker();
                  // Uncomment to test Part 1
                  // checker.print10();

                  // Uncomment to test Part 2
                  /*
                  String word = "catz";


                  if (checker.spellcheck(word) == true) {
                      System.out.println(word + " is spelled correctly!");
                  } else {
                      System.out.println(word + " is misspelled!");
                  }

                  word = "cat";
                  System.out.println(word + " is spelled correctly? " + checker.spellcheck(word));
                  */

                  // 3. optional and not autograded
                  // checker.printStartsWith("b");
              }

              // The constructor reads in the dictionary from a file
              public SpellChecker() throws IOException {
                  // Let's use java.nio method readAllLines and convert to an array!
                  List<String> lines = Files.readAllLines(Paths.get("dictionary.txt"));
                  dictionary = lines.toArray(dictionary);

                  /* The old java.io.* Scan/File method of reading in files, replaced by java.nio above
                  // create File object
                  File dictionaryFile = new File("dictionary.txt");

                  //Create Scanner object to read File
                  Scanner scan = new Scanner(dictionaryFile);

                  // Reading each line of the file
                  // and saving it in the array
                  int i = 0;
                  while(scan.hasNextLine()) {
                      String line = scan.nextLine();
                      dictionary[i] = line;
                      i++;
                  }
                  scan.close();
                  */
              }
          }
          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("SpellChecker");
              }

              @Test
              public void testMain()
              {
                  boolean passed =
                          checkCodeContains(
                                  "checker.print10() - Did you uncomment the main method?",
                                  "checker.print10();");
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  String output = getMethodOutput("print10");
                  String expect =
                          "a aa aaa aaron ab abandoned abc aberdeen abilities ability".replaceAll(" ", "\n");
                  boolean passed = getResults(expect, output, "print10()");
                  assertTrue(passed);
              }

              @Test
              public void test3()
              {
                  Object[] args = {"dogz"};
                  String output = getMethodOutput("spellcheck", args);
                  String expect = "false";

                  boolean passed = getResults(expect, output, "spellcheck(\"dogz\")");
                  assertTrue(passed);
              }

              @Test
              public void test4()
              {
                  Object[] args = {"dog"};
                  String output = getMethodOutput("spellcheck", args);
                  String expect = "true";

                  boolean passed =
                          getResults(
                                  expect,
                                  output,
                                  "spellcheck(\"dog\") (If false, spellcheck may be returning false too"
                                      + " soon!)");
                  assertTrue(passed);
              }

              @Test
              public void testEquals()
              {
                  boolean passed = checkCodeContains("use of equals method", ".equals(");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </project>
  </subsection>

  <subsection>
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 4.4.A.1) <term>Traversing an array</term> is when repetition
            statements are used to access all or an ordered sequence of elements
            in an array.
          </p>
        </li>

        <li>
          <p>
            (AP 4.4.A.2) Traversing an array with an indexed <c>for</c> loop or
            <c>while</c> loop requires elements to be accessed using their
            indices.
          </p>
        </li>

        <li>
          <p>
            In <c>for</c> and <c>while</c> loops, make sure the index for an
            array starts at 0 and end at the number of elements − 1. <term>Off
            by one</term> errors are easy to make when traversing an array,
            resulting in an <term>ArrayIndexOutOfBoundsException</term> being
            thrown.
          </p>
        </li>

        <li>
          <p>
            An <term>enhanced for loop</term>, also called a <term>for each
            loop</term>, can be used to loop through an array without using an
            index variable.
          </p>
        </li>

        <li>
          <p>
            To set up a for-each loop, use <term>for (type variable :
            arrayname)</term> where the type is the type for elements in the
            array, and read it as “for each variable value in arrayname”.
          </p>
        </li>

        <li>
          <p>
            (AP 4.4.A.3) An enhanced <c>for</c> loop header includes a variable,
            referred to as the enhanced <c>for</c> loop variable. For each
            iteration of the enhanced <c>for</c> loop, the enhanced <c>for</c>
            loop variable is assigned a copy of an element without using its
            index.
          </p>
        </li>

        <li>
          <p>
            (AP 4.4.A.4) Assigning a new value to the enhanced <c>for</c> loop
            variable does not change the value stored in the array. (So, you
            can’t change an array using the enhanced for loop.)
          </p>
        </li>

        <li>
          <p>
            (AP 4.4.A.5) When an array stores object references, the attributes
            can be modified by calling methods on the enhanced <c>for</c> loop
            variable. This does not change the object references stored in the
            array. (So, you can change the attributes of an object in an array
            using the enhanced for loop.)
          </p>
        </li>

        <li>
          <p>
            (AP 4.4.A.6) Code written using an enhanced <c>for</c> loop to
            traverse elements in an array can be rewritten using an indexed
            <c>for</c> loop or a <c>while</c> loop.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
