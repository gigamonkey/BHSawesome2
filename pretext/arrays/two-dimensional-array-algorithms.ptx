<?xml version="1.0" encoding="utf-8"?>

<section xml:id="two-dimensional-array-algorithms">
  <title>Two-dimensional array algorithms</title>

  <introduction>
    <p>
      There are a few algorithms and idioms that are specific to 2D arrays. And
      then there are ways we can apply the patterns and algorithms we already
      know how to use with one-dimensional arrays to 2D arrays. In this section
      we will quickly run through some of those.
    </p>
  </introduction>

  <subsection xml:id="nested-loops">
    <title>Nested Loops</title>

    <idx><h>2D Array</h><h>traversal</h></idx>
    <idx><h>loop</h><h>nested</h></idx>
    <idx>traversal</idx>
    <idx>nested loops</idx>
    <p>
      Just like <c>for</c> loops and 1D arrays are made for each other, nested
      <c>for</c> loops and 2D arrays are similarly well-suited. Using a regular
      <c>for</c> loop to access the elements of a 2D array looks like this:
    </p>

    <program>
      <![CDATA[

      for (int r = 0; r < array.length; r++) {
          for (int c = 0; c < array[0].length; c++) {
              System.out.println(array[r][c]);
          }
      }

      ]]>
    </program>

    <p>Note a few things about this code:</p>

    <p>
      <ul>
        <li>
          <p>
            Both the outer and the inner loop are canonical <c>for</c> loops,
            looping from <c>0</c> to a limit of the array length, stepping by
            one.
          </p>
        </li>

        <li>
          <p>
            The loop limits are <c>array.length</c> for the number of rows and
            <c>array[0].length</c> for the number of columns.
          </p>
        </li>

        <li>
          <p>
            We use <c>r</c> and <c>c</c> as our loop variables as a useful
            reminder to the human reader of which is the row index and which is
            the column.
          </p>
        </li>
      </ul>
    </p>

    <p>
      That loop traverses the array in what’s called <term>row-major
      order</term> which just means that we visit every element of each row
      before moving to the next row. It’s also possible to visit the elements in
      <term>column-major order</term> which means going down each column before
      moving to the next one. To implement a column-major traversal we simply
      need to swap the order of the two loop headers so the column loop is now
      the outer loop:
    </p>

    <program>
      <![CDATA[

      for (int c = 0; c < array[0].length; c++) {
          for (int r = 0; r < array.length; r++) {
              System.out.println(array[r][c]);
          }
      }

      ]]>
    </program>

    <p>
      Note that we <em>don’t</em> swap the order of the indices in the array
      access expression. It’s still <c>array[r][c]</c> not <c>array[c][r]</c>.
    </p>

    <activity label="lcgetAverage">
      <statement>
        <p>
          What does the following code do? Add another row of numbers to the
          matrix. Will the loops traverse this row too? And what does the
          expression <c>a.length * a[0].length</c> represent?
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class Test1 {

              public static double getAverage(int[][] a) {
                  double total = 0;
                  int value = 0;
                  for (int row = 0; row < a.length; row++) {
                      for (int col = 0; col < a[0].length; col++) {
                          value = a[row][col];
                          total = total + value;
                      }
                  }
                  return total / (a.length * a[0].length);
              }

              public static void main(String[] args) {
                  int[][] matrix = {{1, 2, 3}, {4, 5, 6}};
                  System.out.println(getAverage(matrix));
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {

              @Test
              public void test1() {
                  String output = getMethodOutput("main");
                  String expected = "3.5";

                  boolean passed = !output.contains(expected);

                  passed = getResults("true", "" + passed, "Average has changed");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String expected = "int[][] matrix = { {1,2,3},{4,5,6}};";

                  boolean passed = !code.replaceAll(" ", "").contains(expected.replaceAll(" ", ""));

                  passed = getResults("true", "" + passed, "Matrix has been changed");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="ColumnMajorTraversal">
      <statement>
        <p>
          What will the following code print out? Try to guess before you run
          it.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class ColumnMajorTraversal {
              public static void main(String[] args) {
                  int[][] array = {{1, 2, 3}, {4, 5, 6}};
                  for (int col = 0; col < array[0].length; col++) {
                      for (int row = 0; row < array.length; row++) {
                          System.out.println(array[row][col]);
                      }
                  }
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void test1() {
                  String output = getMethodOutput("main");
                  String expected = "1\n4\n2\n5\n3\n6";

                  boolean passed = getResults(expected, output, "main()", true);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="AP-2DArrays">
      <statement>
        <p>
          Consider the following code segment. What is the last row of numbers
          printed when this code segment is executed?
        </p>

        <program>
          <![CDATA[

          int[][] points = {
               {11, 12, 13, 14, 15},
               {21, 22, 23, 24, 25},
               {31, 32, 33, 34, 35},
               {41, 42, 43, 44, 45}
           };

           for (int row = 0; row < points.length; row++) {
               for (int col = points[0].length - 1; col >= row; col--) {
                    System.out.print(points[row][col] + " ");
               }
               System.out.println();
          }

          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>45 44 43 42 41</p>
          </statement>

          <feedback>
            <p>
              Trace through the code. Notice that the inner loop stops at index
              row.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>45</p>
          </statement>

          <feedback>
            <p>
              Trace through the code. Notice that the inner loop stops at index
              row.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>41 42</p>
          </statement>

          <feedback>
            <p>
              Trace through the code. Notice that the inner loop works through
              the row backwards.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>45 44</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>44 45</p>
          </statement>

          <feedback>
            <p>
              Trace through the code. Notice that the inner loop works through
              the row backwards.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="enhanced-for-each-loop-for-2d-arrays">
    <title>Enhanced <c>for</c> loops with 2D arrays</title>

    <idx><h>2D Array</h><h>for-each loop</h></idx>
    <idx>enhanced for loop</idx>
    <p>
      Since 2D arrays are just regular arrays we can also use nested enhanced
      <c>for</c> loops to loop through all elements in an array. When we use
      enhanced <c>for</c> loops with a 2D array, the fact that we can only loop
      forward through the array means that we can only easily loop through a 2D
      array in row-major order. But when that’s what we want, and we don’t need
      access to the indices themselves or to modify the array elements, an
      enhanced <c>for</c> loop can be nicely concise.
    </p>

    <p>
      The only trick with enhanced <c>for</c> loops and 2D arrays, is that the
      type of the loop variable in the outer loop has to be a 1D array:
    </p>

    <program>
      String[][] array;

      for (String[] row : array) { // Note the type of the loop variable
         for (String value : row) {
             System.out.println(value);
         }
      }
    </program>

    <p>
      We can read that code as, “for each row in the array, print each value in
      the row”.
    </p>

    <activity label="getAvgForEach">
      <statement>
        <p>
          Nested for-each loops demo. Click on the CodeLens button to trace
          through the code.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Average {

              public static double getAvg(int[][] a) {
                  double total = 0;
                  for (int[] innerArray : a) {
                      for (int val : innerArray) {
                          total = total + val;
                      }
                  }
                  return total / (a.length * a[0].length);
              }

              public static void main(String[] args) {
                  int[][] theArray = {{80, 90, 70}, {20, 80, 75}};
                  System.out.println(getAvg(theArray));
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "69.16666666666667";
                  boolean passed = getResults(expect, output, "Expected output from main", true);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection>
    <title>Applying 1D algorithms to 2D arrays</title>

    <p>
      All of the array algorithms we discussed in <xref
      ref="topic-4-5-array-algorithms" /> can also be applied to 2D arrays. The
      only wrinkle is now we have two dimensions to play with. So we could, for
      instance, write an algorithm to find the row in a 2D array whose values
      add up to the largest total by applying the maximizing pattern to the
      outer array and the summing pattern to each inner array.
    </p>

    <program>
      <![CDATA[

      int biggestRowIndex = 0;
      int biggestSum = Integer.MIN_VALUE;

      // This loop is finding the index of the row with the biggest total
      for (int r = 0; r < array.length; r++) {
          int sum = 0;

          // This loop is summing the current row
          for (int c = 0; c < array[r].length; c++) {
              sum += array[r][c];
          }
          if (sum > biggestSum) {
              biggestSum = sum;
              biggestRowIndex = r;
          }
      }

      ]]>
    </program>

    <p>
      We could use the same basic algorithm but with a column-major traversal to
      find the number of the column with the largest sum. And we can endlessly
      mix and match, write an outer summing loop that totals up the smallest
      value in each row. Or write an outer any loop around an inner all loop to
      check whether any row consists of all even numbers. Or write an outer loop
      that reverses the order of rows of an array while the inner loop reverses
      the values within each row. The combinations are endless.
    </p>

    <p>
      Relatedly we can also apply the idea of any of the 1D algorithms that
      accumulate a value to 2D arrays by accumulating across all the values in
      the 2D array. In that case we just use nested loops and do the
      accumulation in the body of the inner loop. Compare these two bits of
      code. On the left, accumulating the total in a 1D array and on the right,
      the same algorithm with a 2D array.
    </p>

    <sidebyside>
      <listing>
        <title>1D sum</title>

        <program>
          int total = 0;

          for (int n : array) {
              total += n;

          }
        </program>
      </listing>

      <listing>
        <title>2D sum</title>

        <program>
          int total = 0;
          for (int[] row : array) {
              for (int n : row) {
                  total += n;
              }
          }
        </program>
      </listing>
    </sidebyside>

    <activity label="lca2dloopPart">
      <statement>
        <p>
          What will the following code print out? Can you complete the method
          called <c>getTotalForCol</c> that gets the total for a column? To do
          this, you must loop through the rows. The array’s length will tell you
          how many rows you have since it is an array of arrays, while the
          length of the array’s first element will tell you how many columns.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class Total {

              public static int getTotalForRow(int row, int[][] a) {
                  int total = 0;
                  for (int col = 0; col < a[0].length; col++) {
                      total = total + a[row][col];
                  }
                  return total;
              }

              // Complete the method getTotalForCol below
              public static int getTotalForCol(int col, int[][] a) {
                  int total = 0;
                  // Add a loop here to total a column col

                  return total;
              }

              public static void main(String[] args) {
                  int[][] matrix = {{1, 2, 3}, {4, 5, 6}};
                  System.out.println(getTotalForRow(0, matrix));
                  System.out.println(getTotalForCol(0, matrix));
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("Total");
              }

              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "6\n5";
                  boolean passed = getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  int[][] array = {{1, 4, 8}, {6, 7, 9}};
                  int value = 0;
                  Object[] args = {value, array};

                  String output = getMethodOutput("getTotalForCol", args);
                  String expect = "7";

                  boolean passed =
                          getResults(expect, output, "Testing getTotalForCol(0, { {1, 4,8},{6, 7, 9} })");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="max2DArrayParsons" numbered="yes" adaptive="yes" indentation="show" language="java">
      <statement>
        <p>
          The following has the correct code to find the largest value in a 2D
          array. Drag the blocks from the left into the correct order on the
          right. Check your solution by clicking on the Check button. You will
          be told if any of the blocks are in the wrong order.
        </p>
      </statement>

      <hint>
        <p>
          You can step through this code using the Java Visualizer by clicking
          on the following <url
          href="http://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+Test+%7B%0A+++%0A+++public+static+int+getLargest(int%5B%5D%5B%5D+arr)++%7B%0A++++int+largest+%3D+arr%5B0%5D%5B0%5D%3B%0A++++for+(int+row+%3D+0%3B+row+%3C+arr.length%3B+row%2B%2B)++%7B%0A++++++for+(int+col+%3D+0%3B+col+%3C+arr%5B0%5D.length%3B+col%2B%2B)++%7B%0A++++++++if+(arr%5Brow%5D%5Bcol%5D+%3E+largest)++%7B%0A++++++++++largest+%3D+arr%5Brow%5D%5Bcol%5D%3B%0A++++++++%7D+//+end+if%0A++++++%7D+//+end+column+loop%0A++++%7D+//+end+row+loop%0A++++return+largest%3B%0A+++%7D+//+end+method%0A+++%0A+++public+static+void+main(String%5B%5D+args)+%7B%0A++++++int%5B%5D%5B%5D+testArray+%3D+%7B%7B-32,+-6,+-3%7D,+%7B-392,+-93,+-2%7D%7D%3B%0A++++++System.out.println(getLargest(testArray))%3B%0A+++%7D%0A%7D&amp;mode=display&amp;curInstr=40">Java
          Visualizer</url>.
        </p>
      </hint>

      <blocks>
        <block order="3">
          <cline>public int getLargest(int[][] arr)</cline>
          <cline>{</cline>
        </block>

        <block order="7">
          <cline> int largest = arr[0][0];</cline>
          <cline> int current = 0;</cline>
          <cline> for(int r=0;r &lt; arr.length;r++)</cline>
          <cline> {</cline>
          <cline></cline>
        </block>

        <block order="2">
          <cline>   for(int c=0;c &lt; arr[0].length;c++)</cline>
          <cline>   {</cline>
          <cline></cline>
        </block>

        <block order="8">
          <cline>     current = arr[r][c];</cline>
          <cline>     if (current &gt; largest)</cline>
          <cline>     {</cline>
          <cline></cline>
        </block>

        <block order="9">
          <cline>       largest = current;</cline>
          <cline></cline>
        </block>

        <block order="1">
          <cline>     } // end if</cline>
          <cline></cline>
        </block>

        <block order="5">
          <cline>   } // end column loop</cline>
          <cline></cline>
        </block>

        <block order="6">
          <cline> } // end row loop</cline>
          <cline> return largest;</cline>
        </block>

        <block order="4">
          <cline>} // end method</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="subsection-of-a-2d-array-for-a-property">
    <title>Slicing 2D arrays</title>

    <idx><h>2D Array</h><h>loop range</h></idx>
    <p>
      Finally, we can write algorithms that operate on arbitrary slices of a 2D
      array such as a single row, a single column, or some rectangular subset of
      the array. We will need to use regular <c>for</c> loops because we need
      control over exactly what indices we use, but beyond that it’s just a
      matter of determining what the 2D indices are of the elements in the slice
      we want.
    </p>

    <p>
      Slicing a single row or a single column turns into a 1D problem where we
      just have to pick out the elements we want by fixing either the row or
      column index we use. For instance:
    </p>

    <listing>
      <title>A single row, at index <c>r</c></title>

      <program>
        <![CDATA[

        // r never changes so we loop across the row
        for (int c = 0; c < array[r].length; c++) {
            System.out.println(array[r][c]);
        }

        ]]>
      </program>
    </listing>

    <listing>
      <title>A single column, at index <c>c</c></title>

      <program>
        <![CDATA[

        // c never changes so we loop down the column
        for (int r = 0; r < array.length; r++) {
            System.out.println(array[r][c]);
        }

        ]]>
      </program>
    </listing>

    <p>
      Rectangular slices are still 2D so we still need nested loops. We control
      the slice by where we start and end the row and column loops. Here are
      some examples:
    </p>

    <listing>
      <title>
        A rectangle from the top left to <c>row</c>, <c>col</c>, exclusive
      </title>

      <program>
        <![CDATA[

        for (int r = 0; r < row; r++) {
            for (int c = 0; c < col; c++) {
                System.out.println(array[r][c]);
            }
        }

        ]]>
      </program>
    </listing>

    <listing>
      <title>
        A rectangle from <c>row</c>, <c>col</c>, inclusive, to the bottom right.
      </title>

      <program>
        <![CDATA[

        for (int r = row; r < array.length; r++) {
            for (int c = col; c < array[0].length; c++) {
                System.out.println(array[r][c]);
            }
        }

        ]]>
      </program>
    </listing>

    <listing>
      <title>
        A rectangle from <c>row1</c>, <c>col1</c>, inclusive, to <c>row2</c>,
        <c>col2</c>, exclusive.
      </title>

      <program>
        <![CDATA[

        for (int r = row1; r < row2; r++) {
            for (int c = col1; c < col2; c++) {
                System.out.println(array[r][c]);
            }
        }

        ]]>
      </program>
    </listing>

    <activity label="lca2dloopPart2">
      <statement>
        <p>
          The following code counts the number of times a value appears in a
          part of the 2D array indicated by the row and column start and end
          values.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class Count {
              public static int countValues(
                      int value, int[][] a, int rowStart, int rowEnd, int colStart, int colEnd) {
                  int count = 0;
                  for (int row = rowStart; row <= rowEnd; row++) {
                      for (int col = colStart; col <= colEnd; col++) {
                          if (a[row][col] == value) {
                              count++;
                          }
                      }
                  }
                  return count;
              }

              public static void main(String[] args) {
                  int[][] matrix = {{3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
                  System.out.println(countValues(3, matrix, 0, 2, 0, 2));
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "4";
                  boolean passed = getResults(expect, output, "Expected output from main", true);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="summary-39">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 4.12.A.1) Nested iteration statements (loops) are used to
            traverse and access all or an ordered sequence of elements in a 2D
            array. Since 2D arrays are stored as arrays of arrays, the way 2D
            arrays are traversed using <c>for</c> loops and enhanced <c>for</c>
            loops is similar to 1D array objects.
          </p>
        </li>

        <li>
          <p>
            (AP 4.12.A.1) Nested iteration statements can be written to traverse
            the 2D array in row-major order, column-major order, or a uniquely
            defined order. <term>Row-major order</term> refers to an ordering of
            2D array elements where traversal occurs across each row, whereas
            <term>column-major order</term> traversal occurs down each column.
          </p>
        </li>

        <li>
          <p>
            (AP 4.12.A.2) The outer loop of a nested enhanced <c>for</c> loop
            used to traverse a 2D array traverses the rows. Therefore, the
            enhanced <c>for</c> loop variable must be the type of each row,
            which is a 1D array. The inner loop traverses a single row.
            Therefore, the inner enhanced <c>for</c> loop variable must be the
            same type as the elements stored in the 1D array. Assigning a new
            value to the enhanced <c>for</c> loop variable does not change the
            value stored in the array.
          </p>
        </li>

        <li>
          <p>
            The 2D array’s length gives the number of rows. A row’s length
            array[0].length gives the number of columns.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-24">
    <title>AP Practice</title>

    <activity label="AP-2DArrays2">
      <statement>
        <p>
          Consider the following code segment. What is the value of sum as a
          result of executing the code segment?
        </p>

        <program>
          <![CDATA[

          int[][] arr = { {1, 2, 3, 4},
                          {5, 6, 7, 8},
                          {9, 10, 11, 12} };
          int sum = 0;
          for (int[] x : arr)
          {
              for (int y = 0; y < x.length - 1; y++)
              {
                   sum += x[y];
              }
          }

          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>36</p>
          </statement>

          <feedback>
            <p>Trace through the code.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>54</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>63</p>
          </statement>

          <feedback>
            <p>Trace through the code.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>68</p>
          </statement>

          <feedback>
            <p>Trace through the code.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>78</p>
          </statement>

          <feedback>
            <p>
              Notice that the inner loop goes up to but not including x.length -
              1.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
