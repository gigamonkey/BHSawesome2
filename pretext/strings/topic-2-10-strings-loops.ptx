<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-2-10-strings-loops">
  <title>Implementing string algorithms</title>

  <introduction>
    <idx>string processing</idx>
    <idx><h>string</h><h>loop</h></idx>
    <p>
      Beyond what we can do with the <c>String</c> methods we looked at in the
      previous section, there are a number of algorithms for manipulating and
      producing <c>String</c> values, often by treating a <c>String</c> as a
      collection of individual characters that we loop over. Some of them are
      somewhat similar to array algorithms we covered in <xref ref="arrays" />.
      Others are a bit different because, unlike arrays, <c>String</c> values
      are immutable so we can produce new <c>String</c> values based on existing
      values but we can’t change a <c>String</c> once it is created.
    </p>

    <p>In this section we will cover some standard algorithms to:</p>

    <p>
      <ul>
        <li>
          <p>
            Find if one or more substrings has a particular property or count
            the number of substrings with a particular property.
          </p>
        </li>

        <li>
          <p>
            Produce new strings by removing all occurences all certain
            substrings from another string.
          </p>
        </li>

        <li>
          <p>Create a new string with the characters reversed</p>
        </li>
      </ul>
    </p>
  </introduction>

  <subsection xml:id="finding-substrings">
    <title>Finding and counting substrings</title>

    <p>
      The first category of <c>String</c> algorithms are related to the array
      searching algorithms we discussed in <xref ref="min-max-search-algorithms"
      /> and the the any and all algorithms from <xref ref="test-property" />.
      However rather than searching for or testing elements of an array, we will
      search for or test for the presence of substrings of a given string that
      have certain properties. The basic structure of this sort of algorithm is
      a canonical <c>for</c> loop that loops over the valid indices of the
      <c>String</c> and calls to the <c>substring</c> method inside the loop to
      extract substrings that we can then test to see if they have whatever
      property we care about. As a really simple example of this we can test
      whether any single character, a.k.a. a one-character substring, in the
      <c>String</c> <c>s</c> is a lowercase vowel with this code:
    </p>

    <program>
      <![CDATA[
      public boolean containsVowel(String s) {
          for (int i = 0; i < s.length(); i++) {
              if ("aeiou".indexOf(s.substring(i, i + 1)) != -1) {
                  return true;
              }
          }
          return false;
      }
      ]]>
    </program>

    <p>
      Notice that the loop is just a canonical <c>for</c> loop over the valid
      indices of <c>s</c>. All the interesting work happens inside the loop. In
      the <c>if</c> inside the loop we use the expression <c>s.substring(i, i +
      1)</c> to extract the one-character substring starting an index <c>i</c>.
      Then we check if it’s a vowel by testing whether it occurs somewhere in
      the string <c>"aeiou"</c>, using the fact that <c>indexOf</c> returns
      <c>-1</c> if the argument is not present in the <c>String</c>
      <c>indexOf</c> was called on.
    </p>

    <p>
      That is the basic pattern. We could have used the same pattern but
      returned the substring we found. Or we could have looped through the whole
      string and kept a count of how many vowels we saw. Or tested every
      substring and returned false if any of them weren’t vowels to implement a
      method to check whether every every letter of the <c>String</c> was a
      vowel.
    </p>

    <p>
      And we are not limited to one-character substrings; we could do tests of
      longer substrings.
    </p>

    <p>
      That is, with a <c>for</c> loop and a call to <c>substring</c> to extract
      the subtring, we can build any of the finding, counting, and property
      testing algorithms we first used with arrays.
    </p>

    <activity label="countEs" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following main method has the correct code to count the number of
          e’s in a string, but the code is mixed up. Drag the blocks from the
          left area into the correct order in the right area. Click on the
          “Check Me” button to check your solution.
        </p>
      </statement>

      <blocks>
        <block order="7">
          <cline>public static void main(String[] args)</cline>
          <cline>{</cline>
        </block>

        <block order="2">
          <cline>   String message = "e is the most frequent English letter.";</cline>
          <cline>   int count = 0;</cline>
        </block>

        <block order="3">
          <cline>   for(int i=0; i &lt; message.length(); i++)</cline>
          <cline>   {</cline>
        </block>

        <block order="1">
          <cline>      if (message.substring(i,i+1).equalsIgnoreCase("e"))</cline>
        </block>

        <block order="5">
          <cline>         count++;</cline>
        </block>

        <block order="6">
          <cline>   }</cline>
        </block>

        <block order="4">
          <cline>   System.out.println(count);</cline>
        </block>

        <block order="8">
          <cline>}</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="while-find-and-replace-loop">
    <title>Removing substrings</title>

    <p>
      Since <c>String</c> values are immutable it might seem that we can’t
      remove anything from a <c>String</c>. But we can in the same sense that we
      can subtract one number from another and get a new number. That is, we can
      make a new <c>String</c> that is made up of parts of the original
      <c>String</c> with some parts left out.
    </p>

    <p>
      So to make a new <c>String</c> with a substring taken out we need to know
      two things:
    </p>

    <p>
      <ol>
        <li>
          The index of the start of the substring that we want to take out.
        </li>

        <li>Where the substring ends.</li>
      </ol>
    </p>

    <p>
      To take a really simple example, suppose we wanted to remove the substring
      <c>"cd"</c> from <c>"abcdef"</c> to get <c>"abef"</c>. Since both values
      are fixed we can just count letters and see that substring we want to
      remove starts at index <c>2</c> and ends at index <c>4</c> as shown in the
      diagram below.
    </p>

    <figure align="center">
      <caption>The <c>substring(2, 4)</c> of <c>"abcdef"</c>.</caption>

      <image source="_static/img/abcdef.svg" width="50%">
        <shortdescription>abcdef with cd shaded</shortdescription>
      </image>
    </figure>

    <p>
      But in order to remove the <c>"cd"</c> we want to get the two substrings
      before and after it: the one from the start up to position <c>2</c> and
      the one starting at position <c>4</c> to the end of the string. The
      following code demonstrates how to use <c>substring</c> and <c>+</c> to
      extract those two parts and concatenate them to get the string with
      <c>"cd"</c> removed.
    </p>

    <program>
      String s = "abcdef";
      System.out.println(s.substring(0, 2) + s.substring(4)); // prints "abef"
    </program>

    <p>
      Now to make things slightly more interesting, suppose we want to take the
      specific substring <c>"and cheese "</c> out of some <c>String</c> that
      contains it, perhaps something like <c>"Ham and cheese sandwich"</c>. This
      code does that:
    </p>

    <program>
      String sandwich = "Ham and cheese sandwich."; // Could be anything that contains "and cheese "
      int start = sandwich.indexOf("and cheese ");  // Figure out where it starts ...
      int end = start + "and cheese ".length();     // And where it ends
      sandwich = sandwich.substring(0, start) + sandwich.substring(end);
    </program>

    <p>
      In this code we got the computer to figure out what indices we needed to
      use by finding the start af the substring we want to snip out with
      <c>indexOf</c> and then adding the length of the substring to that to get
      the end.
    </p>

    <p>
      Notice also how the last lines assigns the new value back to the variable
      <c>sandwich</c>. While that doesn’t change the original
      <c>String</c>—assigning to a variable never has an effect on the value
      previously stored in that variable—it does mean that after that line the
      value of <c>sandwich</c> no longer contains <c>"and cheese "</c>.
    </p>

    <p>
      Now we are ready to see an algorithm for computing a string with
      <em>all</em> the occurrences of a particular substring removed. We just
      need to wrap the previous code in a <c>while</c> loop that runs as long as
      the <c>String</c> we want to remove is still present in the <c>String</c>
      referenced by the variable.
    </p>

    <p>
      We use a <c>while</c> loop because we don’t need a loop variable and also
      we don’t know how many times the loop needs to run; we just want to keep
      running as long as there’s still at least once occurrence of the string to
      be removed.
    </p>

    <p>
      This code shows a method that computes a new <c>String</c> value
      consisting of the text of its first argument with all occurrences of its
      second argument removed:
    </p>

    <program>
      <![CDATA[
      public static String without(String s, String toRemove) {
          while (s.indexOf(toRemove) >= 0) {
              int i = s.indexOf(toRemove);
              s = s.substring(0, i) + s.substring(i + toRemove.length());
          }
          return s;
      }
      ]]>
    </program>

    <p>
      The example in the mixed up code below finds and removes all the letter
      a’s in a string. You can watch it in action in this <url
      href="http://www.pythontutor.com/visualize.html#code=public%20class%20RemoveAs%20%7B%0A%20%20%20%0A%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%7B%0A%0A%20%20%20%20%20%20String%20s%20%3D%20%22are%20apples%20tasty%20without%20a's%3F%22%3B%20%0A%20%20%20%20%20%20int%20index%20%3D%200%3B%0A%20%20%20%20%20%20System.out.println%28%22Original%20string%3A%20%22%20%2B%20s%29%3B%0A%0A%20%20%20%20%20%20//%20while%20there%20is%20an%20a%20in%20s%0A%20%20%20%20%20%20while%20%28s.indexOf%28%22a%22%29%20%3E%3D%200%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%0A%20%20%20%20%20%20%20%20%20//%20Find%20the%20next%20index%20for%20an%20a%0A%20%20%20%20%20%20%20%20%20index%20%3D%20s.indexOf%28%22a%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20//%20Remove%20the%20a%20at%20index%20by%20concatenating%20%0A%20%20%20%20%20%20%20%20%20//%20substring%20up%20to%20index%20and%20then%20rest%20of%20the%20string.%0A%20%20%20%20%20%20%20%20%20s%20%3D%20s.substring%280,index%29%20%2B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20s.substring%28index%2B1%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D%20//%20end%20loop%20%0A%20%20%0A%20%20%20%20%20%20System.out.println%28%22String%20with%20a's%20removed%3A%22%20%2B%20s%29%3B%0A%20%20%20%0A%20%20%20%7D%20//%20end%20method%0A%7D&amp;cumulative=false&amp;curInstr=23&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">Java
      visualizer</url>.
    </p>

    <activity label="removeA" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following program removes all the a’s from a string, but the code
          is mixed up. Drag the blocks from the left area into the correct order
          in the right area. Click on the “Check Me” button to check your
          solution.
        </p>
      </statement>

      <blocks>
        <block order="4">
          <cline>public static void main(String[] args)</cline>
          <cline>{</cline>
        </block>

        <block order="8">
          <cline>   String s = "are apples tasty without an a?";</cline>
          <cline>   int index = 0;</cline>
          <cline>   System.out.println("Original string: " + s);</cline>
        </block>

        <block order="1">
          <cline>   // while there is an a in s</cline>
          <cline>   while (s.indexOf("a") &gt;= 0)</cline>
          <cline>   {</cline>
        </block>

        <block order="3">
          <cline>      // Find the next index for an a</cline>
          <cline>      index = s.indexOf("a");</cline>
        </block>

        <block order="2">
          <cline>      // Remove the a at index by concatenating</cline>
          <cline>      // substring up to index and then rest of the string.</cline>
          <cline>      s = s.substring(0,index) +</cline>
          <cline>          s.substring(index+1);</cline>
        </block>

        <block order="7">
          <cline>   } // end loop</cline>
        </block>

        <block order="6">
          <cline>   System.out.println("String with a's removed:" + s);</cline>
        </block>

        <block order="5">
          <cline>} // end method</cline>
        </block>
      </blocks>
    </activity>

    <activity label="string-replace1">
      <title>Replace 1s</title>

      <statement>
        <p>
          Google has been scanning old books and then using software to read the
          scanned text. But, the software can get things mixed up like using the
          number <c>1</c> for the letter <c>l</c>. Try the code below (and in
          the <url
          href="http://www.pythontutor.com/visualize.html#code=public%20class%20Test%0A%20%20%20%7B%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20String%20message%20%3D%20%22Have%20a%201ong%20and%20happy%201ife%22%3B%20%0A%20%20%20%20%20%20%20%20int%20index%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20//%20while%20more%201s%20in%20the%20message%0A%20%20%20%20%20%20%20%20while%20%28message.indexOf%28%221%22%29%20%3E%3D%200%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20//%20Find%20the%20next%20index%20for%201%0A%20%20%20%20%20%20%20%20%20%20%20index%20%3D%20message.indexOf%28%221%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22Found%20a%201%20at%20index%3A%20%22%20%2B%20index%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20//%20Replace%20the%201%20with%20a%20l%20at%20index%20by%20concatenating%20substring%20up%20to%20index%20and%20then%20the%20rest%20of%20the%20string.%0A%20%20%20%20%20%20%20%20%20%20%20String%20firstpart%20%3D%20message.substring%280,index%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20String%20lastpart%20%3D%20message.substring%28index%2B1%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20message%20%3D%20firstpart%20%2B%20%22l%22%20%2B%20lastpart%3B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22Replaced%201%20with%20l%20at%20index%20%22%20%2B%20index%29%3B%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20System.out.println%28%22Cleaned%20text%3A%20%22%20%2B%20message%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D&amp;cumulative=false&amp;curInstr=21&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0">Java
          visualizer</url>) to clean up scanning mistakes like this.
        </p>

        <p>
          The following code loops through a string replacing all 1’s with l’s.
          Trace through the code below with a partner and explain how it works
          on the given message. You can run it line by line in the <url
          href="http://www.pythontutor.com/visualize.html#code=public%20class%20Test%0A%20%20%20%7B%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20String%20message%20%3D%20%22Have%20a%201ong%20and%20happy%201ife%22%3B%20%0A%20%20%20%20%20%20%20%20int%20index%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20//%20while%20more%201s%20in%20the%20message%0A%20%20%20%20%20%20%20%20while%20%28message.indexOf%28%221%22%29%20%3E%3D%200%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20//%20Find%20the%20next%20index%20for%201%0A%20%20%20%20%20%20%20%20%20%20%20index%20%3D%20message.indexOf%28%221%22%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22Found%20a%201%20at%20index%3A%20%22%20%2B%20index%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20//%20Replace%20the%201%20with%20a%20l%20at%20index%20by%20concatenating%20substring%20up%20to%20index%20and%20then%20the%20rest%20of%20the%20string.%0A%20%20%20%20%20%20%20%20%20%20%20String%20firstpart%20%3D%20message.substring%280,index%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20String%20lastpart%20%3D%20message.substring%28index%2B1%29%3B%0A%20%20%20%20%20%20%20%20%20%20%20message%20%3D%20firstpart%20%2B%20%22l%22%20%2B%20lastpart%3B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%22Replaced%201%20with%20l%20at%20index%20%22%20%2B%20index%29%3B%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20System.out.println%28%22Cleaned%20text%3A%20%22%20%2B%20message%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D&amp;cumulative=false&amp;curInstr=21&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&amp;curInstr=0">Java
          visualizer</url>. Note that <c>indexOf</c> here can work repeatedly to
          find the next occurrence of a 1 because they are replaced as soon as
          they are found.
        </p>

        <p>
          Change the code to add code for a counter variable to count the number
          of 1’s replaced in the message and print it out. Change the message to
          have more mistakes with 1’s to test it.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class FindAndReplace {
              public static void main(String[] args) {
                  String message = "Have a 1ong and happy 1ife";

                  // while there are still 1's in the message
                  while (message.indexOf("1") >= 0) {
                      // Find the next index for 1
                      int index = message.indexOf("1");
                      System.out.println("Found a 1 at index: " + index);

                      // Replace the 1 with a l at index by concatenating substring up to
                      // index and then the rest of the string.
                      String firstpart = message.substring(0, index);
                      String lastpart = message.substring(index + 1);
                      message = firstpart + "l" + lastpart;

                      System.out.println("Replaced 1 with l at index " + index);
                      System.out.println("Message currently: " + message);
                      System.out.println("But we aren't done looping yet!");
                  }
                  System.out.println("Cleaned text: " + message);
              }
          }
          ]]>
        </code>

        <tests>
          // Test for Lesson 4.3.1 - While Loop FindAndReplace lclw1
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("FindAndReplace");
              }

              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main").trim();
                  String expect =
                          "Found a 1 at index: 7\n"
                                  + "Replaced 1 with l at index 7\n"
                                  + "The message is currently Have a long and happy 1ife but we aren't done"
                                  + " looping yet!\n"
                                  + "Found a 1 at index: 22\n"
                                  + "Replaced 1 with l at index 22\n"
                                  + "The message is currently Have a long and happy life but we aren't done"
                                  + " looping yet!\n"
                                  + "Cleaned text: Have a long and happy life\n";

                  boolean pass = !output.equals(expect.trim());

                  boolean passed = getResults(expect, output, "Output should be different", pass);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="for-loops-reverse-string">
    <title>Reversing a <c>String</c></title>

    <p>
      Finally, let’s look at how to reverse a <c>String</c>. The algorithm for
      reversing a <c>String</c> is a bit different from the algorithm for
      reversing an array we discussed in <xref ref="reversing-an-array" /> since
      we can’t swap the characters in a <c>Sting</c> in place because a
      <c>String</c> is immutable. So we have to produce a new <c>String</c>
      whose contents are the original <c>String</c> but in reverse order.
    </p>

    <p>
      We can use a similar strategy as in the previous algorithm, but this time
      instead of assigning new values to a variable that contain only parts of
      the current value, we’ll build up a <c>String</c> one character at a time.
    </p>

    <p>
      Since we’re going to need to do something with each character of the
      <c>String</c>, a <c>for</c> loop is an appropriate choice. To keep things
      simple we can use a canonical <c>for</c> loop, processing each character
      in order and then reverse it by how we build up the new <c>String</c>.
    </p>

    <activity label="reverseString">
      <statement>
        <p>
          Here is a <c>for</c> loop that creates a new <c>String</c> that
          contains the contents of <c>s</c> but in reverse. We start with a
          blank string <c>reversed</c> and build up our reversed string in that
          variable by copying each character from the <c>String</c> <c>s</c> in
          order but putting each new character at the front of the <c>String</c>
          we are building up. Clearly that puts the original first character
          last and the last character first.
        </p>

        <p>
          What would happen if you started the loop at <c>1</c> instead? What
          would happen if you used <c>&lt;=</c> instead of <c>&lt;</c>? What
          would happen if you changed the order in which you added the
          <c>letter</c> at line 8?
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class ReverseString {
              public static void main(String[] args) {
                  String s = "Hello";
                  String reversed = "";

                  for (int i = 0; i < s.length(); i++) {
                      String letter = s.substring(i, i + 1);
                      reversed = letter + reversed;
                  }
                  System.out.println(s + " reversed is " + reversed);
              }
          }
          ]]>
        </code>

        <tests>
          // Test for Lesson 4.3 - ReverseString
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("ReverseString");
              }

              @Test
              public void testMain() throws IOException {
                  assertTrue(codeDigestChanged("0bb878194e30f49f6fbd5ad1b7893730409dfa99"));
              }
          }
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-string-replacement-cats-and-dogs">
    <title>Coding Challenge: Cats and dogs</title>

    <sidebyside widths="15% 100%" margins="-20% 0%">
      <image source="Unit2-Selection-and-Iteration/Figures/catordog.jpg" width="27%">
        <shortdescription>Cat or Dog</shortdescription>
      </image>

      <stack>
        <p>
          Are you a cat person or a dog person? The code below prints a nice
          message about cats, but if you’re a dog person, you might not agree.
        </p>

        <p>
          <ol>
            <li>
              <p>
                Write some code below that changes every occurrence of
                <c>"cat"</c> to <c>"dog"</c> in the message. This code will be
                more like the first program in this lesson where we replaced 1’s
                with l’s.
              </p>
            </li>

            <li>
              <p>
                (Optional - not autograded) add a counter to count the number of
                replacements and print it out.
              </p>
            </li>

            <li>
              <p>
                (Optional - challenging and not autograded) What if you like
                both cats and dogs? After you replace <c>"cat"</c> with
                <c>"dog"</c>, add another loop that looks for the word
                <c>"dogs"</c> and adds <c>" and cats"</c> to it. Do not replace
                <c>"dog"</c>, just <c>"dogs"</c>. This will only change the
                first sentence in the example below but you can add other
                sentences to test.
              </p>

              <p>
                For this loop, you will need to use a special version of
                <c>indexOf</c> that takes two arguments where the second
                argument is the index to start looking from, rather than
                starting at index <c>0</c>. If you don’t use this version you’ll
                probabyl end up with an infinite loop endlessly finding the
                first occurrence of <c>"dogs"</c>. Make sure you add a variable
                <c>fromIndex</c> that is initialized to 0 and that is changed
                each time through the loop to skip over the last word that was
                found.
              </p>

              <p>
                The two-argument version of <c>int indexOf(String target, int
                fromIndex)</c> searches left-to-right for the target substring,
                but starts the search at the given fromIndex. You are not
                required to know this version of indexOf for the AP CSA exam,
                but you can use it (and any valid Java code) in the Free
                Response Questions.
              </p>
            </li>
          </ol>
        </p>
      </stack>
    </sidebyside>

    <project label="challenge-string-replace">
      <statement>
        <p>
          Write a while loop that replaces every occurrence of “cat” in the
          message with “dog” using the indexOf and substring methods.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          public class ChallengeReplace {
              public static void main(String[] args) {
                  String message = "I love cats! I have a cat named Coco. My cat's very smart!";

                  // Write a loop here that replaces every occurrence of "cat"
                  // in the message with "dog", using indexOf and substring.

                  System.out.println(message);
              }
          }
        </code>

        <tests>
          // Test Code for Lesson 4.3.3 - String Replacement - ChallengeReplace

          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("ChallengeReplace");
              }

              @Test
              public void test1() throws IOException {
                  String output = getMethodOutput("main");
                  String expect =
                          "I love cats! I have a cat named Coco. My cat's very smart!"
                                  .replaceAll("cat", "dog");

                  boolean passed = getResults(expect, output, "Running main");
                  assertTrue(passed);
              }

              @Test
              public void testWhile() throws IOException {
                  String target = "while(";
                  boolean passed = checkCodeContains("while loop", target);
                  assertTrue(passed);
              }

              @Test
              public void testSubString() {
                  String target = "substring(";
                  boolean passed = checkCodeContains("substring", target);
                  assertTrue(passed);
              }

              @Test
              public void testReplace() throws IOException {
                  String target = ".replace";
                  boolean passed = checkCodeNotContains("shortcut replace", target);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-16">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>Loops can be used to traverse or process a string.</p>
        </li>

        <li>
          <p>(AP 2.10.A.1) There are standard string algorithms to:</p>

          <p>
            <ul>
              <li>
                <p>Find if one or more substrings has a particular property</p>
              </li>

              <li>
                <p>
                  Determine the number of substrings that meet specific criteria
                </p>
              </li>

              <li>
                <p>Create a new string with the characters reversed</p>
              </li>
            </ul>
          </p>
        </li>
      </ul>
    </p>

    <p>
      For more practice with string processing, see the Free Response Question
      in the Practice and Summary section of this unit.
    </p>
  </subsection>
</section>
