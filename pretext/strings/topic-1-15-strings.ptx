<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-1-15-strings">
  <title>Strings</title>

  <introduction>
    <idx>String</idx>
    <idx>object reference</idx>
    <idx>reference</idx>
    <idx><h>String</h><h>definition</h></idx>
    <p>
      The <c>String</c> datatype is another reference type. Like most reference
      types in Java other than arrays, <c>String</c> is defined by a
      <term>class</term>. We’ll look at the structure of classes and how to
      write our own in <xref ref="topic-3-3-anatomy-of-class" />. But
      <c>String</c> gets a bit of extra love from Java compared to pretty much
      all other classes. For one thing it’s one of the handful of classes in the
      <c>java.lang</c> package which means its available by default in all Java
      programs. But it is also special in that it is the only class in Java that
      supports an operator other than <c>==</c> and <c>!=</c>, namely the
      <c>+</c> string concatenation operator. And it’s the only class in Java
      with a literal value syntax that lets us write <c>String</c> values in our
      programs like <c>"hello, world!</c>.
    </p>
  </introduction>

  <subsection>
    <title>More string concatenation</title>

    <idx><h>String</h><h>append</h></idx>
    <p>
      We first used string concatention in <xref ref="text-output" /> to
      generate formatted strings to be printed out. As we saw then a <c>+</c>
      expression where one of the values is a <c>String</c> results in a new
      <c>String</c> formed by concatenating (smooshing together) the string
      representation of both values.
    </p>

    <p>
      Like the arithmetic <c>+</c> operator, there’s also a compound assignment
      version, <c>+=</c> that updates <c>String</c> variable to a new
      <c>String</c> consisting of its old value plus the string representation
      of the value being added.
    </p>

    <program>
      String s = "hello";
      s += ", world!";
      System.out.println(s); // prints "hello, world!"
    </program>

    <p>
      It’s important to note that like the arithmetic version <c>String</c>
      <c>+=</c> changes the variable, not the <c>String</c> itself. In fact
      <c>String</c> values are <term>immutable</term>, meaning once a
      <c>String</c> is created, its text cannot be changed. When we add two
      <c>String</c>s (or a <c>String</c> and another value converted to a
      <c>String</c>) we get a new <c>String</c> without making any change to the
      values being added together just like when we add the <c>int</c> values
      <c>1 + 2</c> the original <c>1</c> and <c>2</c> aren’t changed. When we
      use <c>+=</c> we are making a new <c>String</c> by adding something to the
      current value of a variable and then assigning that new value back into
      the variable, again just like with numbers.
    </p>

    <activity label="lcso1">
      <title>Happy birthday greeting</title>

      <statement>
        <p>
          Try the following code. Add another variable, <c>lastname</c>, with
          the value <c>"Hernandez"</c>. Use <c>+=</c> or <c>+</c> to add the
          <c>lastname</c> variable after <c>name</c> to <c>result</c>. Then use
          <c>+=</c> or <c>+</c> to add two more exclamation points (!) to the
          end of the happy birthday greeting in <c>result</c>. Note that you
          will need to add a space between <c>name</c> and <c>lastname</c> to
          get the correct output.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Test1 {
              public static void main(String[] args) {
                  String start = "Happy Birthday";
                  String name = "Jose";
                  String result = start + " " + name; // add together strings
                  result += "!"; // add on to the same string
                  System.out.println(result);
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "Happy Birthday Jose Hernandez!!!";
                  boolean passed = getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <activity label="qse_1">
      <statement>
        <p>
          Given the following code segment, what is in the string referenced by
          s1?
        </p>

        <program>
          String s1 = "xy";
          String s2 = s1;
          s1 = s1 + s2 + "z";
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>xyz</p>
          </statement>

          <feedback>
            <p>s1 will equal "xy" plus another "xy" then z at the end.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>xyxyz</p>
          </statement>

          <feedback>
            <p>s1 contains the original value, plus itself, plus "z"</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>xy xy z</p>
          </statement>

          <feedback>
            <p>No spaces are added during concatenation.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>xy z</p>
          </statement>

          <feedback>
            <p>
              No spaces are added during concatenation, and an additional "xy"
              should be included at the beginning.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>z</p>
          </statement>

          <feedback>
            <p>
              s1 was set to "xy" initially, so the final answer will be "xyxyz"
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="lcso2">
      <statement>
        <p>
          What do you think the following will print? Guess before you hit run.
          If you want the addition to take place before the numbers are turned
          into a string what should you do? Try to modify the code so that it
          adds 4 + 3 before appending the value to the string. Hint: you used
          this to do addition before multiplication in arithmetic expressions.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Test2 {
              public static void main(String[] args) {
                  String message = "12" + 4 + 3;
                  System.out.println(message);
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "127";
                  boolean passed = getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }

              @Test
              public void testParen() throws IOException {
                  String code = removeSpaces(getCodeWithoutComments());
                  String expect = "(4+3)";
                  boolean passed = code.contains(expect);

                  passed = getResults("" + true, "" + passed, "Checking code for added parentheses");
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <p>
      Since the same operators are processed from left to right this will print
      <c>1243</c>. First 4 will be turned into a string and appended to 12 and
      then 3 will be turned into a string and appended to 124. If you want to do
      addition instead, try using parentheses!
    </p>
  </subsection>

  <subsection>
    <title>String lengths and character indices</title>

    <idx><h>String</h><h>length</h></idx>
    <idx><h>String</h><h>substring</h></idx>
    <idx><h>String</h><h>indexOf</h></idx>
    <idx><h>String</h><h>compareTo</h></idx>
    <idx><h>String</h><h>equals</h></idx>
    <idx><h>String</h><h>methods</h></idx>
    <p>
      So far we’ve been using as <c>String</c> values as atomic values that we
      can print or concatenate with other strings to produce bigger strings. But
      it’s also possible to treat a <c>String</c> as a sequence of individual
      characters.
    </p>

    <p>
      For instance, thinking about a string in terms of a sequence of characters
      raises questions like, how long is it? The answer in Java is the length of
      a string is the number of characters in it, including any spaces or other
      special characters. The string shown below is fourteen characters long.
    </p>

    <p>
      Then we can think about the position of each character in a <c>String</c>.
      The position of each character is called its <term>index</term> which is a
      number that says how many positions away from the front of the
      <c>String</c> it is. That means that unlike in English, but like many
      other programming languages (but not Snap!), indices start at zero, rather
      than one, since the first character is zero positions from the front of
      the <c>String</c>.
    </p>

    <p>
      Note that because the first character is at index <c>0</c>, the last
      character’s index is one less than the length of the string. So in a
      fourteen-character string like the one diagramed below, the last index is
      <c>13</c>.
    </p>

    <figure>
      <caption>
        A string with length 14 with the index of each character shown below it.
      </caption>

      <image source="_static/img/text-with-indices.svg" width="89%" alt="a string with the position (index) shown above each character" />
    </figure>
  </subsection>

  <subsection xml:id="string-methods-subsection">
    <title>String instance methods</title>

    <p>
      So that’s fine but how do we actually use the length of a string or the
      index of a character in a program? This brings us to one of the big
      differences between primitive types and classes like <c>String</c>.
    </p>

    <p>
      With primitive types the only things we can do with them is compute new
      values using operators or pass them to methods like the <c>Math</c>
      methods we learned about in <xref ref="topic-1-11-Math" /> (which then
      compute new values using operators).
    </p>

    <p>
      To do things with <c>String</c> values we instead use <term>instance
      methods</term> which are like the methods we learned about in <xref
      ref="topic-1-9-method-signatures" /> but attached to the specific object
      so it has access to the data that makes up that object’s value. When we
      call a method with the dot operator, we say we <term>call</term> or
      <term>invoke</term> it <term>on</term> the object referenced by the
      expression to the left of the dot. The method then has access to the
      actual data that makes up the referenced object.
    </p>

    <p>
      For example there’s a <c>length</c> method defined in the <c>String</c>
      class that returns the the <c>String</c>’s length. The number it returns
      depends on the specific <c>String</c> we call it on.
    </p>

    <program>
      // Invoking length on the literal string "hello". Prints 5
      System.out.println("hello".length());

      // Invoking length on the literal string "boo". Prints 3.
      System.out.println("boo".length());

      // Invoking length on the value of the variable x. Prints 5.
      String x = "hello";
      System.out.println(x.length());

      // Invoking length on the value of a string concatenation expression. Prints 12.
      System.out.println((x + ", fred!").length());
    </program>

    <p>
      The <c>String</c> class includes a ton of methods but for the AP exam, you
      only need to know how to use the methods we look at below. They are all
      also decribed in the <url
      href="https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-java-quick-reference.pdf">AP
      CSA Java Quick Reference Sheet</url> that you have access to during the
      exam.
    </p>
  </subsection>

  <subsection>
    <title>
      Slicing and dicing with <c>length</c>, <c>substring</c>, and
      <c>indexOf</c>
    </title>

    <p>
      With a couple more methods we will have all the tools we need to take
      apart strings to extract interesting parts or to determine if strings
      contain certain text.
    </p>

    <p>
      To get a part of an existing <c>String</c> we use the <c>substring</c>
      method which takes two <c>int</c> arguments specifying the part of the
      original string to extract. For instance <c>"abcdef".substring(2, 5)</c>
      returns the <c>"cde"</c> which is made up the characters starting at index
      <c>2</c> of <c>"abcdef"</c> and ending at (but not including) index
      <c>5</c>.
    </p>

    <p>
      Remember that <c>String</c> objects are immutable so the original
      <c>String</c> isn’t changed. Instead <c>substring</c> method returns a new
      <c>String</c> that contains a copy of some of the same text.
    </p>

    <p>
      The first argument to <c>substring</c> must be a valid index into the
      string and the second must either be a valid index or the length of the
      string. If either argument is invalid the method will crash with a
      <c>StringIndexOutOfBoundsException</c>.
    </p>

    <p>
      Perhaps the easiest way to understand both arguments to <c>substring</c>
      is to think of them as specifying where to cut the string to extract the
      substring. If we had the string shown below on a strip piece of paper, to
      cut out the <c>substring(5, 9)</c> we’d cut at the line just before box 5
      and again just before box 9, giving us the shaded substring <c>"is a"</c>.
    </p>

    <figure>
      <caption>
        Cutting <c>substring(5, 9)</c> out of <c>"This is a test"</c>.
      </caption>

      <image source="_static/img/text-with-indices-substring.svg" width="89%" alt="a string with the position (index) shown above each character" />
    </figure>

    <p>
      Note that this also works for <c>0</c>, which just means “cut” before the
      first character in the string and for the length of the string, which
      means “cut” just before the non-existant character that would be at that
      position. Here are some more examples.
    </p>

    <program>
      String s = "This is a test";
      s.substring(0, 1);                       // "T"
      s.substring(1, 2);                       // "hi"
      s.substring(0, 4);                       // "This"
      s.substring(4, 4);                       // ""
      s.substring(0, s.length());              // "This is a test"
      s.substring(10, s.length());             // "test"
      s.substring(s.length() - 3, s.length()); // "est"
    </program>

    <p>
      Note how we can use any expression that produces an <c>int</c> as either
      argument to <c>substring</c>, such as <c>s.length() - 3</c> and
      <c>s.length()</c> in the last example. That also means if we had a
      variable, <c>i</c>, that held a valid index into a string <c>s</c> we
      could get a <c>String</c> containing the one character at that index with
      the <c>substring</c> call <c>s.substring(i, i + 1)</c>.
    </p>

    <activity label="substring-preconditions">
      <title>Fix out of bounds bugs</title>

      <statement>
        <p>
          The following code crashes with a
          <c>StringIndexOutOfBoundsException</c> because the arguments to
          <c>substring</c> aren’t valid. Can you fix the code by changing the
          arguments for the substring method to print out the substring
          <c>"o"</c>?
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class SubstringPreconditions {
              public static void main(String[] args) {
                  String str = "hello";
                  System.out.println(str.substring(-1, 10));
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("SubstringPreconditions");
              }

              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "o";
                  boolean passed = getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <p>
      If <c>substring</c> is for when we want to extract a substring from a
      particular position in a <c>String</c>, the method <c>indexOf</c> method
      is kind of the opposite, allowing us to find the position where a
      particular substring occurs in a <c>String</c>. We call the method on the
      string we want to search in (sometimes called the haystack) and pass the
      string whose text we are looking for (the needle) as an argument and the
      method returns the index indicating the position where the needle is found
      in the haystack. If the needle doesn’t occur in the haystack it returns
      -1.
    </p>

    <program>
      String haystack = "abcdef";
      haystack.indexOf("a");   // 0
      haystack.indexOf("abc"); // also 0
      haystack.indexOf("b");   // 1
      haystack.indexOf("f");   // 5
      "abc".indexOf(haystack); // -1, longer String can't be in a shorter one
      haystack.indexOf("xyz"); // -1, not found
    </program>

    <p>
      We can use <c>indexOf</c> when we are taking apart strings to find the
      index of some particular piece of text which we can then pass to
      <c>substring</c> to extract the text before or after it. For instance, if
      we had a text containing the first paragraph of a book we could extract
      the first sentence with an expression like this:
    </p>

    <program>
      paragraph.substring(0, paragraph.indexOf(". ") + 1);
    </program>

    <p>
      The call to <c>indexOf</c> finds the index of the first period followed by
      a space. (This does assume that the first sentence doesn’t end in a
      exclamation point or a question mark.) The resulting index is where the
      period is. That index plus one, is used as the second argument to a call
      to <c>substring</c> which then extracts everything from index <c>0</c> up
      to and including the period.
    </p>

    <activity label="lcsm1">
      <statement>
        <p>
          Run the code below to see the output from the <c>String</c> methods
          <c>length</c>, <c>substring</c>, and <c>indexOf</c>. How many letters
          does <c>substring(0, 3)</c> return? What does <c>indexOf</c> return
          when its argument is not found?
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Test1 {
              public static void main(String[] args) {
                  String message1 = "This is a test";
                  String message2 = "Hello Class";

                  System.out.println(message1.length());
                  System.out.println(message2.length());

                  System.out.println(message1.substring(0, 3));
                  System.out.println(message1.substring(2, 3));
                  System.out.println(message1.substring(5));

                  System.out.println(message1.indexOf("is")); // This will match the is in "This"!
                  System.out.println(message1.indexOf("Hello"));
                  System.out.println(message2.indexOf("Hello"));

                  // lowercase and uppercase are not on the AP exam, but still useful
                  System.out.println(message2.toLowerCase());
                  System.out.println(message2.toUpperCase());
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main").trim();
                  boolean passed = getResults(output, output, "Expected output from main", true);
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <activity label="qsb_3">
      <statement>
        <p>
          What is the value of <c>pos</c> after the following code executes?
        </p>

        <program>
          String s1 = "abccba";
          int pos = s1.indexOf("b");
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>2</p>
          </statement>

          <feedback>
            <p>The first character is at index 0 in a string.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>1</p>
          </statement>

          <feedback>
            <p>
              The method indexOf returns the first position of the passed str in
              the current string starting from the left (from 0).
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>4</p>
          </statement>

          <feedback>
            <p>Does indexOf start from the left or right?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>-1</p>
          </statement>

          <feedback>
            <p>Does the string contain a b?</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qsb_3b">
      <statement>
        <p>
          What is the value of <c>len</c> after the following code executes?
        </p>

        <program>
          String s1 = "baby";
          int len = s1.length();
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>2</p>
          </statement>

          <feedback>
            <p>
              Length returns the number of characters in the string, not the
              number of characters in the name of the variable.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>3</p>
          </statement>

          <feedback>
            <p>The position of the last character is 3, but the length is 4.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>4</p>
          </statement>

          <feedback>
            <p>Length returns the number of characters in the string.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>-1</p>
          </statement>

          <feedback>
            <p>Length is never negative.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qsb_3c">
      <statement>
        <p>What is the value of <c>s2</c> after the following code executes?</p>

        <program>
          String s1 = "baby";
          String s2 = s1.substring(0,3);
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>baby</p>
          </statement>

          <feedback>
            <p>
              This would be true if substring returned all the characters from
              the first index to the last inclusive, but it does not include the
              character at the last index.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>b</p>
          </statement>

          <feedback>
            <p>This would be true if it was s1.substring(0,1)</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>ba</p>
          </statement>

          <feedback>
            <p>This would be true if it was s1.substring(0,2)</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>bab</p>
          </statement>

          <feedback>
            <p>
              Substring returns all the characters from the starting index to
              the last index -1.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qsb_4b">
      <statement>
        <p>What is the value of <c>s2</c> after the following code executes?</p>

        <program>
          String s1 = "baby";
          String s2 = s1.substring(2);
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>by</p>
          </statement>

          <feedback>
            <p>
              The method substring(index) will return all characters starting
              the index to the end of the string.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>aby</p>
          </statement>

          <feedback>
            <p>This would be true if it was substring(1);</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>a</p>
          </statement>

          <feedback>
            <p>This would be true if it was substring(1,2);</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>b</p>
          </statement>

          <feedback>
            <p>This would be true if it was substring(2,3);</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>ba</p>
          </statement>

          <feedback>
            <p>This would be ture if it was substring(0,2);</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>String comparison with <c>equals</c> and <c>compareTo</c></title>

    <p>
      In <xref ref="topic-2-2-booleans" /> we learned comparison operators that
      work on primitive types such as <c>==</c>, <c>&lt;</c>, and <c>&gt;</c>.
      We also mentioned that we can’t really use them with <c>String</c> values.
      Technically we can use <c>==</c> but it probably doesn’t do what we want
      for reasons we’ll discuss in <xref ref="equality" /> and we can’t use use
      <c>&lt;</c> or <c>&gt;</c> at all.
    </p>

    <p>
      However, with reference types like <c>String</c>, we must use methods
      instead of operators. In particular we need to use the method
      <c>equals</c> instead of <c>==</c> and <c>compareTo</c> instead of any of
      the relational operators <c>&lt;</c>, <c>&lt;</c>, <c>&gt;</c>, and
      <c>&gt;=</c>.
    </p>

    <p>
      The <c>equals</c> method compares the text of two <c>Strings</c> objects
      and returns <c>true</c> if the text is the same and <c>false</c>
      otherwise. The reason <c>==</c> might not work the way we want is because
      it just compares two references, i.e. where in memory the referenced
      <c>String</c> objects live. It’s possible to have two distinct
      <c>String</c> objects whose data is stored in two different places in
      memory but which contain the same sequence of characters. According to
      <c>==</c> those references are not the same (because they live in
      different places in memory) but according to <c>equals</c> they
      <em>are</em> same because the sequences of characters are the same.
    </p>

    <p>
      The <c>compareTo</c> method compares two <c>String</c> objects, one being
      the <c>String</c> we invoked the method on, and the other being the single
      argument passed to the method. It compares the text of both Strings
      character by character the way we would if we were putting them into an
      dictionary. So <c>"aardvark"</c> comes before <c>"acme"</c> which comes
      before <c>"zoologist"</c>. The return value of <c>compareTo</c> is an
      <c>int</c> that indicates the ordering between the <c>String</c> we
      invoked <c>compareTo</c> on (call that the first string) and the argument
      <c>String</c> (the second string) by the following scheme:
    </p>

    <p>
      <ul>
        <li>
          If the text of the two strings is the same, <c>compareTo</c> returns
          zero.
        </li>

        <li>
          If the first string should be ordered before the second string,
          <c>compareTo</c> returns a negative number.
        </li>

        <li>
          If the first string should be ordered after the second string,
          <c>compareTo</c> returns a positive number.
        </li>
      </ul>
    </p>

    <p>
      That may be a bit hard to wrap your head around but this table shows that
      we can translate an expression using any of the four relational operators
      to an expression that compares the value returned by <c>compareTo</c> to
      <c>0</c> using that same operator.
    </p>

    <tabular halign="center">
      <col right="minor" />
      <col />
      <row header="yes" bottom="minor">
        <cell>What we want to write</cell>
        <cell>What we write instead</cell>
      </row>

      <row bottom="minor">
        <cell><c>a &lt; b</c></cell>
        <cell><c>a.compareTo(b) &lt; 0</c></cell>
      </row>

      <row bottom="minor">
        <cell><c>a &lt;= b</c></cell>
        <cell><c>a.compareTo(b) &lt;= 0</c></cell>
      </row>

      <row bottom="minor">
        <cell><c>a &gt; b</c></cell>
        <cell><c>a.compareTo(b) &gt; 0</c></cell>
      </row>

      <row>
        <cell><c>a &gt;= b</c></cell>
        <cell><c>a.compareTo(b) &gt;= 0</c></cell>
      </row>
    </tabular>

    <activity label="lcsm2">
      <statement>
        <p>
          Run the code below to see the output from <c>compareTo</c> and
          <c>equals</c>. Since <c>"Hello!"</c> would be alphabetically ordered
          after <c>"And"</c>, <c>compareTo</c> returns a positive number. Since
          <c>"Hello!"</c> would be alphabetically ordered before <c>"Zoo"</c>,
          <c>compareTo</c> returns a negative number.
        </p>

        <p>
          Is <c>equals</c> case-sensitive? When does <c>compareTo</c> return a
          negative number?
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Test2 {
              public static void main(String[] args) {
                  String message = "Hello!";

                  System.out.println(message.compareTo("Hello!"));
                  System.out.println(message.compareTo("And"));
                  System.out.println(message.compareTo("Zoo"));

                  System.out.println(message.equals("Hello!"));
                  System.out.println(message.equals("hello!"));
              }
          }

        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "0\n7\n-18\ntrue\nfalse";
                  boolean passed = getResults(expect, output, "Expected output from main", true);
                  assertTrue(passed);
              }
          }

        </tests>
      </program>
    </activity>

    <p>
      There are lots of other methods in the String class. You can look through
      the Java documentation for the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/String.html">String
      class</url> online. You don’t have to know all of these for the exam, but
      you can use them if you want to on the exam.
    </p>

    <activity label="ch4_str1">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct concept
          on the right. Click the "Check Me" button to see if you are correct
        </p>
      </statement>

      <feedback>
        <p>Review the vocabulary.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">the position of a character in a string</premise>
          <response>index</response>
        </match>

        <match>
          <premise order="2">
            a new string that is a part of another string with zero or more
            characters copied from the original string
          </premise>

          <response>substring</response>
        </match>

        <match>
          <premise order="3">doesn't change</premise>
          <response>immutable</response>
        </match>

        <match>
          <premise order="4">the number of characters in a string</premise>
          <response>length</response>
        </match>
      </cardsort>
    </activity>

    <activity label="ch4_str2">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct method on
          the right. Click the "Check Me" button to see if you are correct.
        </p>
      </statement>

      <feedback>
        <p>Review the vocabulary.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">
            Returns true if the characters in two strings are the same
          </premise>

          <response>equals</response>
        </match>

        <match>
          <premise order="2">
            Returns the position of one string in another or -1
          </premise>

          <response>indexOf</response>
        </match>

        <match>
          <premise order="3">
            Returns a number to indicate if one string is less than, equal to,
            or greater than another
          </premise>

          <response>compareTo</response>
        </match>

        <match>
          <premise order="4">
            Returns a string representing the object that is passed to this
            method
          </premise>

          <response>toString</response>
        </match>
      </cardsort>
    </activity>

    <activity label="qsb_8-new">
      <statement>
        <p>What is the value of answer after the following code executes?</p>

        <program>
          String s1 = "Hi";
          String s2 = "Bye";
          int answer = s1.compareTo(s2);
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>positive (&gt; 0)</p>
          </statement>

          <feedback>
            <p>H is after B in the alphabet so s1 is greater than s2.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>0</p>
          </statement>

          <feedback>
            <p>
              The method compareTo will only return 0 if the strings have the
              same characters in the same order.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>negative (&lt; 0)</p>
          </statement>

          <feedback>
            <p>This would be true if it was s2.compareTo(s1)</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>Coding Challenge: Pig Latin</title>

    <sidebyside widths="15% 100%" margins="-20% 0%">
      <image source="Unit1-Using-Objects-and-Methods/Figures/pig.png" width="18%" alt="pig latin" />
      <stack>
      <p>
        Can you speak Pig Latin? In Pig Latin, you take the first letter and put
        it at the end of the word and add the letters “ay” to the end. For
        example, “pig” becomes “igpay”.
      </p>

      <p>
        Create a program that takes a word and transforms it to Pig Latin using
        String methods. You may need the word’s length, a substring that does
        not include the first letter, and a substring that is just the first
        letter (you can get the ith letter of a string using substring(i,i+1) so
        for example the letter at index 3 would be substring(3,4)).
      </p>
      </stack>
    </sidebyside>

    <project label="challenge-PigLatin">
      <statement>
        <p>
          Write code in the pigLatin method below to use the substring method to
          transform a word given as its argument into Pig Latin where the first
          letter is put at the end and “ay” is added. The word pig is igpay in
          Pig Latin. Change the input below to try it on other words.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          import java.util.Scanner;

          public class PigLatin {
              public static String pigLatin(String word) {
                  // Change this to use word.substring to construct
                  // the pig latin version of word
                  String pigLatin = word;

                  return pigLatin;
              }

              public static void main(String[] args) {
                  // Do not change main!
                  // Write your code in the pigLatin method above.
                  Scanner scan = new Scanner(System.in);
                  String word = scan.nextLine();
                  System.out.println(word + " in Pig Latin is " + pigLatin(word));
                  scan.close();
              }
          }

        </code>

        <stdin>
          pig
        </stdin>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMethod() throws IOException {
                  Object[] args = {"java"};
                  String output = getMethodOutput("pigLatin", args);
                  String expect = "avajay";
                  boolean passed = getResults(expect, output, "pigLatin(\"java\") should return \"avajay\"");
                  assertTrue(passed);
              }

              @Test
              public void testMethod2() throws IOException {
                  Object[] args = {"pig"};
                  String output = getMethodOutput("pigLatin", args);
                  String expect = "igpay";
                  boolean passed = getResults(expect, output, "pigLatin(\"pig\") should return \"igpay\"");
                  assertTrue(passed);
              }

              @Test
              public void testContainsSubstring() {
                  String target = "word.substring(";
                  int count = countOccurences(getCode(), target);
                  boolean passed = count >= 2;
                  passed =
                          getResults(
                                  "2 substring calls",
                                  count + " substring call(s)",
                                  "Code contains calls to substring method",
                                  passed);
                  assertTrue(passed);
              }
          }


          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="bonus-challenge-unicode">
    <title>Bonus Challenge: Unicode</title>

    <p>
      If you get done early with the previous challenge, here’s something else
      fun you can do in Java, although it’s not covered in the AP exam.
    </p>

    <p>
      Java was one of the first programming languages to use <url
      href="https://en.wikipedia.org/wiki/List_of_Unicode_characters">UNICODE</url>
      for its characters rather than ASCII. While ASCII could represent 128
      characters which was plenty for English, Unicode is an international
      standard that tries to assign a number (which they like to call a
      “codepoint”) to every character in every language. Unicode codepoints are
      traditionally represented in hex code (a base 16 code that uses the digits
      0-9 and the letters A-F for 10-15), so you might see things like
      <c>U+1F600</c>. But they’re just numbers. That last one is the same as
      <c>128512</c>.
    </p>

    <p>
      When Java was released in an 1996, Unicode had been around for five years
      and the Unicode people had declared they would only ever need
      <m>2^{16}</m> or 65,536 code points to represent all the characters used
      in the world. So Java included a <c>char</c> data type that can hold
      exactly <m>2^{16}</m> values. Then, seven months later, the Unicode folks,
      said, “Ooops, that’s not enough”, and extended their system to its current
      size of 1,112,064 possible codepoints. (As of September 2024, 154,998
      codepoints have actually been assigned characters. The next version of
      Unicode, which should be released in September 2025, is expected to have
      159,845 assigned codepoints.)
    </p>

    <p>
      That made <c>char</c> kind of obsolete. But while not every Unicode
      codepoint can be represented in a Java <c>char</c>, you can use an
      <c>int</c> to represent a codepoint and the method
      <c>Character.toString</c> to translate an <c>int</c> into a <c>String</c>
      containing the character for that codepoint. (You might see older Java
      code that casts numbers to <c>char</c>. For many codepoints that will work
      but not on more recently added codepoints including, critically, those for
      Emoji. 😞 So better to use <c>Character.toString</c> and ignore <c>char</c>
      altogether.)
    </p>

    <project label="challenge1-6-unicode">
      <title>Unicode challenge</title>

      <statement>
        <p>
          Try the following program which prints out an English “A”, a <url
          href="https://unicodelookup.com/#cjk/1">Chinese character</url>, and
          an <url
          href="http://unicode.org/emoji/charts/full-emoji-list.html">emoji</url>.
          Then look up other characters at this <url
          href="https://unicodelookup.com/">Unicode Lookup</url> site and change
          the code to print them out. (Use the Dec column in site to get the
          decimal number.) Can you print out letters from three different
          languages?
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class ChallengeUnicode {
              public static void main(String[] args) {
                  System.out.println("'A' in ASCII and Unicode: " + Character.toString(65));
                  System.out.println("Chinese for 'sun': " + Character.toString(11932));
                  System.out.println("A smiley emoji: " + Character.toString(128512));

                  // Old style. Doesn't work for all codepoints.
                  System.out.println("This also works: " + (char) 65);
                  System.out.println("But this doesn't: " + (char) 128512);
              }
          }

        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testCount() {
                  String code = getCodeWithoutComments();
                  int count = countOccurences(code, "Character.toString");
                  boolean passed = count >= 4;
                  passed = getResults("4+", "" + count, "Counting number of Character.toString", passed);
                  assertTrue(passed);
              }
          }


          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection>
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 1.15.A.1) A <c>String</c> object represents a sequence of
            characters and can be created by using a string literal.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.2) The <c>String</c> class is part of the
            <c>java.lang</c> package. Classes in the <c>java.lang</c> package
            are available by default.
          </p>
        </li>

        <li>
          <p>
            String objects can be created by using string literals (String s =
            “hi”;) or by calling the String class constructor (String t = new
            String(“bye”);).
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.3) A String object is <term>immutable</term>, meaning
            once a String object is created, its attributes cannot be changed.
            Methods called on a String object do not change the content of the
            String object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.4) Two String objects can be concatenated together or
            combined using the + or += operator, resulting in a new String
            object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.4) A primitive value can be concatenated with a String
            object. This causes the implicit conversion of the primitive value
            to a String object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.A.5) A String object can be concatenated with any object,
            which implicitly calls the object’s <c>toString</c> method (a
            behavior which is guaranteed to exist by the inheritance
            relationship every class has with the Object class). An object’s
            <c>toString</c> method returns a string value representing the
            object. Subclasses of Object often <term>override</term> the
            toString method with class-specific implementation. Method
            overriding occurs when a public method in a subclass has the same
            method signature as a public method in the superclass, but the
            behavior of the method is specific to the subclass. Overriding the
            <c>toString</c> method of a class is outside the scope of the AP CSA
            exam.
          </p>
        </li>

        <li>
          <p>
            <term>index</term> - A number that represents the position of a
            character in a string. The first character in a string is at index
            0.
          </p>
        </li>

        <li>
          <p><term>length</term> - The number of characters in a string.</p>
        </li>

        <li>
          <p>
            <term>substring</term> - A new string that contains a copy of part
            of the original string.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.B.1) A String object has index values from 0 to one less
            than the length of the string. Attempting to access indices outside
            this range will result in an <c>IndexOutOfBoundsException</c>.
          </p>
        </li>

        <li>
          <p>
            (AP 1.15.B.2) The following String methods and constructors,
            including what they do and when they are used, are part of the <url
            href="https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-java-quick-reference.pdf">AP
            CSA Java Quick Reference Sheet</url> that you can use during the
            exam:
          </p>

          <p>
            <ul>
              <li>
                <p>
                  <term>String(String str)</term> : Constructs a new String
                  object that represents the same sequence of characters as str.
                </p>
              </li>

              <li>
                <p>
                  <term>int length()</term> : returns the number of characters
                  in a String object.
                </p>
              </li>

              <li>
                <p>
                  <term>String substring(int from, int to)</term> : returns the
                  substring beginning at index from and ending at index (to -1).
                </p>
              </li>

              <li>
                <p>
                  <term>String substring(int from)</term> : returns
                  substring(from, length()).
                </p>
              </li>

              <li>
                <p>
                  <term>int indexOf(String str)</term> : searches for str in the
                  current string and returns the index of the first occurrence
                  of str; returns -1 if not found.
                </p>
              </li>

              <li>
                <p>
                  <term>boolean equals(Object other)</term> : returns true if
                  this (the calling object) is equal to other; returns false
                  otherwise. Using the equals method to compare one String
                  object with an object of a type other than String is outside
                  the scope of the AP CSA exam.
                </p>
              </li>

              <li>
                <p>
                  <term>int compareTo(String other)</term> : returns a value
                  &lt; 0 if this is less than other; returns zero if this is
                  equal to other; returns a value &gt; 0 if this is greater than
                  other. Strings are ordered based upon the alphabet.
                </p>
              </li>
            </ul>
          </p>
        </li>

        <li>
          <p>
            <c>str.substring(index, index + 1)</c> returns a single character at
            index in string <c>str</c>.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection>
    <title>AP Practice</title>

    <activity label="AP-substring">
      <statement>
        <p>What is the value of s2 after the following code executes?</p>

        <program>
          String s1 = new String("hi there");
          int pos = s1.indexOf("e");
          String s2 = s1.substring(0,pos);
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>hi th</p>
          </statement>

          <feedback>
            <p>
              The substring method returns the string starting at the first
              index and not including the last index. The method indexOf returns
              the index of the first place the string occurs.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi the</p>
          </statement>

          <feedback>
            <p>
              This would be correct if substring returned all characters between
              the first index and last index, but does it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi ther</p>
          </statement>

          <feedback>
            <p>
              This would be correct if indexOf returned the last position the
              string str was found in the current string, does it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi there</p>
          </statement>

          <feedback>
            <p>
              This would be correct if indexOf returned the last position the
              string str was found in the current string and if substring
              included all characters between the start and end index. Check
              both of these.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-immutable">
      <statement>
        <p>What is the value of s1 after the following code executes?</p>

        <program>
          String s1 = "Hi";
          String s2 = s1.substring(0,1);
          String s3 = s2.toLowerCase();
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Hi</p>
          </statement>

          <feedback>
            <p>
              Strings are immutable, meaning they don't change. Any method that
              changes a string returns a new string. So s1 never changes.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>hi</p>
          </statement>

          <feedback>
            <p>
              This would be true if the question was what is the value of s2 and
              it was substring(0,2) not (0,1)
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>H</p>
          </statement>

          <feedback>
            <p>
              This would be true if the question was what is the value of s2,
              not s1.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>h</p>
          </statement>

          <feedback>
            <p>
              This would be true if the question was what is the value of s3,
              not s1.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
