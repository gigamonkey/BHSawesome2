<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-1-12-objects">
  <title>Objects - Instances of Classes</title>

  <subsection xml:id="what-are-classes-and-objects">
    <title>What are Classes and Objects?</title>

    <p>
      You can also think of a class as defining a new data type. In this lesson,
      we will use the class <c>Turtle</c> to make animated turtle objects. Just
      like you use <c>int</c> to declare variables that hold numbers, you can
      use <c>Turtle</c> to declare many variables, animated turtle objects, who
      are <term>instances</term> of the <c>Turtle</c> class.
    </p>

    <program>
      // Creating 2 Turtle objects called yertle and myrtle
      Turtle yertle;
      Turtle myrtle;
    </program>

    <p>
      Watch the following <url
      href="https://www.youtube.com/watch?v=64DOwDu5SVo&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;ab_channel=colleenlewis">video</url>
      by Dr. Colleen Lewis about classes and objects:
    </p>

    <figure align="center">
      <caption>Classes and Objects</caption>

      <video youtube="64DOwDu5SVo" label="video-objects" />
    </figure>
  </subsection>

  <subsection xml:id="attributes-and-behaviors">
    <title>Attributes and Behaviors</title>

    <p>
      A class defines the <term>attributes</term> (data) and
      <term>behaviors</term> (methods) that all objects of that class will have.
      The objects are the specific <term>instances</term> of the class that have
      their own values for the attributes. <term>Attributes</term> are the data
      or properties that an object knows about itself, for example, a turtle
      objectâ€™s color and size. <term>Behaviors</term> are the things that an
      object can do. For example, a turtle object can go forward, turn left, or
      turn right. The attributes and behaviors of a class are defined in the
      class, but each object has its own values for the attributes.
    </p>

    <p>
      This <url
      href="https://www.youtube.com/watch?v=Y9vn6u3901Y&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;ab_channel=colleenlewis">video</url>
      shows another class called <c>Belt</c> and how it has 3 instance variables
      to define its attributes. Every belt object can have different values
      stored in the instance variables.
    </p>

    <figure align="center">
      <caption>Belt Object Attributes</caption>

      <video youtube="Y9vn6u3901Y" label="video-belt-object" />
    </figure>

    <p>
      The following picture has lots of cats (objects of the type cat). They are
      all different, but they share the same attributes and behaviors that make
      up a cat. They are all <term>instances</term> of cat with different values
      for their attributes. Name some of the attributes and behaviors of the
      cats below. For example, the color ( <em>attribute</em>) of the first cat
      is black ( <em>attribute value</em>) and it is playing (
      <em>behavior</em>).
    </p>

    <figure align="center">
      <caption>Pictures of cats (cat objects)</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/catsLabelled.png" width="89%" />
    </figure>

    <activity label="cats">
      <statement>
        <p>
          Discuss with your class: What are some attributes of cats? What are
          some behaviors of cats? (Note that attributes are often nouns or
          adjectives describing features of cats, and behaviors are often
          verbs).
        </p>
      </statement>

      <response />
    </activity>

    <p>
      The following picture of a turtle shows some of the Turtle
      <term>attributes</term> like <c>color</c>, <c>xPos</c>, <c>yPos</c>, and
      <c>heading</c> in the body of the turtle and its <term>methods</term> like
      <c>forward()</c>, <c>backward()</c>, <c>turnLeft()</c>, and
      <c>turnRight()</c> written around the turtle.
    </p>

    <figure align="center">
      <caption>Turtle Attributes and Behaviors</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleOOD.svg" width="63%">
        <shortdescription>Turtle attributes and behaviors</shortdescription>
      </image>
    </figure>

    <activity label="vocab2_1">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct concept
          on the right. Click the "Check Me" button to see if you are correct.
        </p>
      </statement>

      <feedback>
        <p>Review the summaries above.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">
            a specific instance of a class with defined attributes
          </premise>

          <response>object</response>
        </match>

        <match>
          <premise order="2">
            defines a new data type that is like a blueprint
          </premise>

          <response>class</response>
        </match>

        <match>
          <premise order="3">define what the object knows about itself</premise>
          <response>attributes or instance variables</response>
        </match>

        <match>
          <premise order="4">define what an object can do</premise>
          <response>behaviors or methods</response>
        </match>
      </cardsort>
    </activity>

    <activity label="howmanyobjects">
      <statement>
        <p>How many objects can you create from a class in Java?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>1</p>
          </statement>

          <feedback>
            <p>
              There is one definition of a class, but the class can create as
              many objects as are needed.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>10</p>
          </statement>

          <feedback>
            <p>
              There is no limit on the number of objects you can create from a
              class.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>1000</p>
          </statement>

          <feedback>
            <p>
              There is no limit on the number of objects you can create from a
              class.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>As many as you need</p>
          </statement>

          <feedback>
            <p>You can create as many objects as you need from one class.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq_behaviors">
      <statement>
        <p>What specifies the behavior for objects of a class in Java?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>attributes</p>
          </statement>

          <feedback>
            <p>attributes specify the data that an object keeps track of.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>methods</p>
          </statement>

          <feedback>
            <p>Methods specify the behavior of all objects of a class.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              While the class does specify the behavior of all objects created
              by that class, what part of a class specifies the behavior?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>
              The object behavior is specified by the methods in the class that
              created the object.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq_data">
      <statement>
        <p>What are the data or properties of an object called?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>attributes</p>
          </statement>

          <feedback>
            <p>attributes specify the data that an object keeps track of.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>methods</p>
          </statement>

          <feedback>
            <p>Methods specify the behavior of all objects of a class.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              While the class does specify the data that all objects of the
              class keep track of, what part of the class stores the data?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>
              The object data is stored in the attributes of the object. The
              attributes are defined in the class.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="class-hierarchy-and-inheritance">
    <title>Class Hierarchy and Inheritance</title>

    <idx>inheritance</idx>
    <idx>superclass</idx>
    <idx>subclass</idx>
    <idx>Object</idx>
    <p>
      Another important concept in object-oriented programming is
      <term>inheritance</term>. Although the AP CSA exam no longer covers
      inheritance, you should know what it means. <term>Inheritance</term> is a
      way to create a new class that is based on an existing class. The new
      class, called a <term>subclass</term>, inherits the attributes and
      behaviors of the existing class, called a <term>superclass</term>. In
      Java, all classes are subclasses of a superclass called
      <term>Object</term>.
    </p>

    <p>
      For example, you could have a superclass called <c>Pet</c> with attributes
      like <c>name</c> and <c>age</c> and behaviors like <c>eat</c> and
      <c>sleep</c>. You could then have subclasses like <c>Dog</c> and
      <c>Cat</c> and <c>Turtle</c> that inherit the attributes and behaviors of
      the <c>Pet</c> class. Each subclass could add attributes and behaviors
      specific to that type of pet. For example, a <c>Dog</c> subclass could
      have an attribute called <c>breed</c> and a behavior called <c>bark</c>.
    </p>

    <figure align="center">
      <caption>
        Inheritance hierarchy for Pet superclass with the subclasses Dog, Cat,
        and Turtle
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/inheritance-hierarchy-pet.png" width="89%" />
    </figure>
  </subsection>

  <subsection xml:id="turtle-methods">
    <title>Turtle Methods</title>

    <p>
      Letâ€™s practice more with the <c>Turtle</c> class and its methods. Here is
      a class diagram that shows some of the attributes and methods in the class
      <c>Turtle</c>.
    </p>

    <figure align="center">
      <caption>Turtle Class Diagram</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleUMLClassDiagram.png" width="71%">
        <shortdescription>Turtle class diagram</shortdescription>
      </image>
    </figure>

    <p>
      The Turtle world does not use the Cartesian coordinate system with (0,0)
      in the middle the screen. Instead, (0,0) is at the top left corner of the
      screen and x increases to the right and y increases towards the bottom of
      the screen. Most computer graphics systems use this coordinate system
      which is a carry over from before computers could display graphics and had
      to approximate the graphics with text print outs.
    </p>

    <figure align="center">
      <caption>
        The coordinate (0,0) is at the top left of the Turtle world.
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/coords.png" width="36%" />
    </figure>

    <p>
      After you put the mixed up code in order above, type in the same code
      below to make the turtle draw a 7.
    </p>

  </subsection>

  <subsection xml:id="coding-challenge-draw-letters">
    <title>Coding Challenge: Draw Letters</title>

    <p>
      Working in pairs, use the area below to have your turtle draw simple
      block-style letters for your first or last name initials using just
      straight lines (no curves or diagonals).
    </p>

    <p>
      It may help to act out the code pretending you are the turtle. Remember
      that which way you turn depends on which direction you are facing, and the
      turtle begins facing north (towards the top of the page).
    </p>

    <p>Here are some simple turtle methods that you can use:</p>

    <p>
      <ul>
        <li>
          <p><c>forward()</c></p>
        </li>

        <li>
          <p><c>turnLeft()</c></p>
        </li>

        <li>
          <p><c>turnRight()</c></p>
        </li>

        <li>
          <p><c>backward()</c></p>
        </li>

        <li>
          <p><c>penUp()</c></p>
        </li>

        <li>
          <p><c>penDown()</c></p>
        </li>
      </ul>
    </p>

    <p>
      You may notice that it is challenging to have your turtle draw with these
      simple methods. In the next lessons, we will use more complex
      <c>Turtle</c> methods where you can indicate how many steps to take or
      what angle to turn that will make drawing a lot easier!
    </p>

  </subsection>

</section>
