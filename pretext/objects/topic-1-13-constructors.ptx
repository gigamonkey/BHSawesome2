<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-1-13-constructors">
  <title>Creating and Initializing Objects: Constructors</title>

  <introduction>
    <idx><h>class</h><h>constructor</h></idx>
    <idx>constructors</idx>
    <idx>new</idx>
    <p>
      A Java class defines what objects of the class know (attributes) and what
      they can do (behaviors). Each class has <term>constructors</term> which
      are used to initialize the attributes in a newly created object.
      <term>Constructors</term> have the same name as the class.
    </p>

    <p>
      A new object is created with the <c>new</c> keyword followed by the class
      name which is a call to the constructor (<c>new ClassName()</c>). For
      example, <c>new World()</c> creates and initializes a new object of the
      <c>World</c> class, and <c>new Turtle(habitat)</c> creates and initializes
      a new <c>Turtle</c> object in the World habitat. The new object is saved
      in a variable of a <term>reference type</term> which holds an object
      reference or <c>null</c> if there is no object.
    </p>

    <program>
      // To create a new object and call a constructor write:
      // ClassName variableName = new ClassName(arguments);
      World habitat = new World();    // create a new World object
      Turtle t = new Turtle(habitat); // create a new Turtle object
    </program>
  </introduction>

  <subsection xml:id="the-world-class-constructors">
    <title>The World Class Constructors</title>

    <p>
      There can be more than one constructor defined in a class. This is called
      <term>overloading</term> the constructor. The <c>World</c> class has the 2
      constructors seen below. One doesn’t take any arguments and creates a
      default sized world and one takes the world’s width and height arguments
      to create a world of a specific size. An <term>argument</term> is a value
      that is passed into a constructor. Arguments are used to initialize the
      attributes of an object, in this case, the size of the world.
    </p>

    <figure align="center">
      <caption>Two World constructors</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/worldConstructors.png" width="63%">
        <shortdescription>Two World constructors</shortdescription>
      </image>
    </figure>

    <p>
      The <term>no-argument constructor</term> <c>World()</c>, with no arguments
      inside the parentheses following the name of the constructor, creates a
      graphical window with a default size of 640x480 pixels. No-argument
      constructors usually set the attributes of the object to default values.
      The second <c>World(int width, int height)</c> constructor takes two
      integer arguments, and initializes the <c>World</c> object’s width and
      height to them, for example <c>new World(300,400)</c> creates a 300x400
      pixel world.
    </p>

    <program>
      World world1 = new World(); // creates a default size 640x480 world
      World world2 = new World(300,400); // creates a 300x400 world
    </program>

    <activity label="mcq_world_constructor">
      <statement>
        <p>
          Which of these is valid syntax for creating and initializing a World
          object?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>World w = null;</p>
          </statement>

          <feedback>
            <p>
              This declares a variable w that refers to a World object, but it
              doesn't create a World object or initialize it.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = new World;</p>
          </statement>

          <feedback>
            <p>You must include parentheses () to call a constructor.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World();</p>
          </statement>

          <feedback>
            <p>
              Correct, use the new keyword followed by the classname and
              parentheses to create a new object and call the constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = World();</p>
          </statement>

          <feedback>
            <p>You must use the new keyword to create a new object.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World(300,500);</p>
          </statement>

          <feedback>
            <p>
              Correct, this constructor call creates a new World object with the
              size 300x500 pixels.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

  </subsection>

  <subsection xml:id="the-turtle-class-constructors">
    <title>The Turtle Class Constructors</title>

    <p>
      The <c>Turtle</c> class also has multiple constructors, although it always
      requires a world as an argument in order to have a place to draw the
      turtle. The default location for the turtle is right in the middle of the
      world.
    </p>

    <p>
      There is another <c>Turtle</c> constructor that places the turtle at a
      certain (x,y) location in the world, for example at the coordinate (50,
      100) below.
    </p>

    <program>
      Turtle t1 = new Turtle(world1);
      Turtle t2 = new Turtle(50, 100, world1);
    </program>

    <note>
      <p>
        Notice that the order of the arguments matter. The <c>Turtle</c>
        constructor takes <c>(x,y,world)</c> as arguments in that order. If you
        mix up the order of the arguments it will cause an error, because the
        arguments will not be the data types that it expects. This is one reason
        why programming languages have data types – to allow for error-checking.
      </p>
    </note>
  </subsection>

  <subsection xml:id="constructor-signatures">
    <title>Constructor Signatures</title>

    <idx>signature</idx>
    <idx>parameters</idx>
    <idx>arguments</idx>
    <idx>call by value</idx>
    <idx>overloading</idx>
    <p>
      When you use a class that someone has already written for you in a
      <term>library</term> that you can import like the <c>Turtle</c> class
      above, you can look up how to use the constructors and methods in the <url
      href="https://cseweb.ucsd.edu/~ricko/CSE11/turtleClassesDocs/index.html?turtleClasses/SimpleTurtle.html">documentation</url>
      for that class. The documentation will list the <term>signatures</term>
      (or headers) of the constructors or methods which will tell you their name
      and parameter list. The <term>parameter list</term>, in the
      <term>header</term> of a constructor, is an ordered list of variable
      declarations which includes data types. The parameter variables will store
      the argument values passed into the constructor.
    </p>

    <p>
      Constructors are said to be <term>overloaded</term> when there are
      multiple constructors, but the constructors have different signatures.
      They can differ in the number, type, and/or order of parameters. For
      example, here are the two constructors for the <c>Turtle</c> class that
      take different parameters:
    </p>

    <figure align="center">
      <caption>Turtle Class Constructor Signatures and Parameters</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/TurtleClassDefn.png" width="100%">
        <shortdescription>
          Turtle Class Constructor Signatures and Parameters
        </shortdescription>
      </image>
    </figure>

    <p>
      In Unit 3, you will learn to write your own classes. However, if you see a
      class definition on the AP exam, like the one below for a class called
      <c>Date</c>, you should be able to pick out the attributes (instance
      variables) and the constructors and know how to use them.
    </p>


  </subsection>

  <subsection xml:id="coding-challenge-custom-turtles">
    <title>Coding Challenge: Custom Turtles</title>

    <p>
      Working in pairs, you will now look at a new class called CustomTurtle and
      design some colorful turtles with its constructors. The CustomTurtle class
      in the ActiveCode below inherits many of its attributes and methods from
      the Turtle class. However, it has some new constructors with more
      parameters to customize a turtle with its body color, shell color, width,
      and height. CustomTurtle has 3 constructors:
    </p>

    <program>
      /** Constructs a CustomTurtle in the middle of the world */
      public CustomTurtle(World w)

      /** Constructs a CustomTurtle with a specific body color,
          shell color, and width and height in the middle of the world */
      public CustomTurtle(World w, Color body, Color shell, int w, int h)

      /** Constructs a CustomTurtle with a specific body color,
          shell color, and width and height at position (x,y) in the world */
      public CustomTurtle(int x, int y, World w, Color body, Color shell, int w, int h)
    </program>

    <p>
      You will use the constructor(s) to create the CustomTurtles below. You can
      specify colors like Color.red by using the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.desktop/java/awt/Color.html">Color</url>
      class in Java.
    </p>

    <p>
      <ol>
        <li>
          <p>
            Create a large 150x200 (width 150 and height 200) CustomTurtle with
            a green body (Color.green) and a blue shell (Color.blue) at position
            (150,300)
          </p>
        </li>

        <li>
          <p>
            Create a small 25x50 CustomTurtle with a red body and a yellow shell
            at position (350,200)
          </p>
        </li>

        <li>
          <p>Create a CustomTurtle of your own design.</p>
        </li>
      </ol>
    </p>

    <project label="challenge-CustomTurtles">
      <statement>
        <p>
          Use the CustomTurtle constructors with the signatures below to create
          the turtles with the colors and positions described in the comments of
          the program.
        </p>

        <program>
          /** Constructs a CustomTurtle in the middle of the world */
          public CustomTurtle(World w)

          /** Constructs a CustomTurtle with a specific body color,
              shell color, and width and height in the middle of the world */
          public CustomTurtle(World w, Color body, Color shell, int w, int h)

          /** Constructs a CustomTurtle with a specific body color, shell color,
              and width and height at position (x,y) in the world */
          public CustomTurtle(int x, int y, World w, Color body, Color shell, int w, int h)
        </program>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class CustomTurtleRunner {
              public static void main(String[] args) {
                  World world1 = new World(400, 400);

                  // 1. Change the constructor call below to create a large
                  // 150x200 CustomTurtle with a green body (Color.green)
                  // and a blue shell (Color.blue) at position (150,300).
                  // Move it forward to see it.
                  CustomTurtle turtle1 = new CustomTurtle(world1);
                  turtle1.forward();

                  // 2. Create a small 25x50 CustomTurtle with a red body
                  // and a yellow shell at position (350,200)
                  // Move it forward to see it.

                  // 3. Create a CustomTurtle of your own design

                  world1.show(true);
              }
          }

          class CustomTurtle extends Turtle {
              private int x;
              private int y;
              private World w;
              private Color bodycolor;
              private Color shellcolor;
              private int width;
              private int height;

              /**
               * Constructor that takes the model display
               *
               * @param modelDisplay the thing that displays the model or world
               */
              public CustomTurtle(ModelDisplay modelDisplay) {
                  // let the parent constructor handle it
                  super(modelDisplay);
              }

              /**
               * Constructor that takes the model display to draw it on and custom colors and size
               *
               * @param m the world
               * @param body : the body color
               * @param shell : the shell color
               * @param w: width
               * @param h: height
               */
              public CustomTurtle(ModelDisplay m, Color body, Color shell, int w, int h) {
                  // let the parent constructor handle it
                  super(m);
                  bodycolor = body;
                  setBodyColor(body);
                  shellcolor = shell;
                  setShellColor(shell);
                  height = h;
                  width = w;
                  setHeight(h);
                  setWidth(w);
              }

              /**
               * Constructor that takes the x and y and a model display to draw it on and custom colors and
               * size
               *
               * @param x the starting x position
               * @param y the starting y position
               * @param m the world
               * @param body : the body color
               * @param shell : the shell color
               * @param w: width
               * @param h: height
               */
              public CustomTurtle(int x, int y, ModelDisplay m, Color body, Color shell, int w, int h) {
                  // let the parent constructor handle it
                  super(x, y, m);
                  bodycolor = body;
                  setBodyColor(body);
                  shellcolor = shell;
                  setShellColor(shell);
                  height = h;
                  width = w;
                  setHeight(h);
                  setWidth(w);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("CustomTurtleRunner");
              }

              @Test
              public void test1() {
                  String target = "new CustomTurtle(150,300,world1, Color.green, Color.blue, 150, 200)";
                  boolean passed =
                          checkCodeContains(
                                  "constructor for a large 150x200 CustomTurtle with a green body and a blue"
                                          + " shell at position (150,300) in world1",
                                  target);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String target = "new CustomTurtle(350,200,world1, Color.red, Color.yellow, 25, 50)";
                  boolean passed =
                          checkCodeContains(
                                  "constructor for a small 25x50 CustomTurtle with a red body and a yellow"
                                          + " shell at position (350,200) in world1",
                                  target);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </project>
  </subsection>

</section>
