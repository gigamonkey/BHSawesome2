<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="ooMedMC">
  <title>Medium Multiple Choice Questions</title>
  <p>
    These problems are similar to those you will see on the AP CSA exam.
  </p>

  <activity label="qoom_1">
    <statement>
      <p>
        Given the following class declarations, what is the output from
        <c>Student s1 = new GradStudent();</c> followed by <c>s1.getInfo();</c>?
      </p>

      <program language="java">
        <code>
public class Student
{
    public String getFood()
    {
        return "Pizza";
    }

    public String getInfo()
    {
        return this.getFood();
    }
}

public class GradStudent extends Student
{
    public String getFood()
    {
        return "Taco";
    }
}
        </code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>
            Won't compile since <c>GradStudent</c> doesn't have a <c>getInfo</c>
            method
          </p>
        </statement>

        <feedback>
          <p>
            <c>GradStudent</c> will inherit the <c>getInfo</c> method from
            <c>Student</c>. This would be true if <c>getInfo</c> was a private
            method.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>Taco</p>
        </statement>

        <feedback>
          <p>
            Objects know what class they are created as and all methods are
            resolved starting with that class at run time. If the method isn't
            found in that class the parent class is checked (and so on until it
            is found). So it will first look for <c>getInfo</c> in
            <c>GradStudent</c> and when it doesn't find it it will look in
            <c>Student</c>. In <c>getInfo</c> it calls <c>this.getFood</c>.
            Again, it will first look for this method in <c>GradStudent</c>. It
            will find the <c>getFood</c> method there and return "Taco".
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Pizza</p>
        </statement>

        <feedback>
          <p>
            This would be true if it was <c>Student s1 = new Student();</c>
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Won't compile since you are creating a <c>GradStudent</c>, not a
            <c>Student</c>
          </p>
        </statement>

        <feedback>
          <p>
            An object of a subclass can be substituted for a parent class
            object. A <c>GradStudent</c> is a <c>Student</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Won't compile since you use <c>this.getFood()</c>
          </p>
        </statement>

        <feedback>
          <p>
            In object methods if you leave off the <c>this.</c> when invoking an
            object method it will be added for you by the compiler. The keyword
            <c>this</c> refers to the current object which is implicitly passed
            to all object methods.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qoom_2">
    <statement>
      <p>
        Given the following class declarations, and <c>EnhancedItem enItemObj =
        new EnhancedItem();</c> in a client class, which of the following
        statements would compile?
      </p>

      <program language="java">
        <code>
public class Item
{
   private int x;

   public void setX(int theX)
   {
      x = theX;
   }
   // ... other methods not shown
}

public class EnhancedItem extends Item
{
   private int y;

   public void setY(int theY)
   {
      y = theY;
   }

  // ... other methods not shown
}

I. enItemObj.y = 32;
II. enItemObj.setY(32);
III. enItemObj.setX(52);
        </code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>I only</p>
        </statement>

        <feedback>
          <p>
            I is wrong because <c>y</c> is a private field and thus can not be
            directly accessed from code in a client class.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>II only</p>
        </statement>

        <feedback>
          <p>
            I is wrong because <c>y</c> is a private field and thus can not be
            directly accessed from code in a client class. II is correct because
            <c>EnhancedItem</c> has <c>setY</c> as a public method. III is
            correct because <c>EnhancedItem</c> inherits the public method
            <c>setX</c> from <c>Item</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>I and II only</p>
        </statement>

        <feedback>
          <p>
            I is wrong because <c>y</c> is a private field and thus can not be
            directly accessed from code in a client class.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>II and III only</p>
        </statement>

        <feedback>
          <p>
            I is wrong because <c>y</c> is a private field and thus can not be
            directly accessed from code in a client class. II is correct because
            <c>EnhancedItem</c> has <c>setY</c> as a public method. III is
            correct because <c>EnhancedItem</c> inherits the public method
            <c>setX</c> from <c>Item</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>I, II, and III</p>
        </statement>

        <feedback>
          <p>
            I is wrong because <c>y</c> is a private field and thus can not be
            directly accessed from code in a client class.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qoom_3">
    <statement>
      <p>
        Given the following class declarations and initializations in a client
        program, which of the following is a correct call to <c>method1</c>?
      </p>

      <program language="java">
        <code>
public class Test1
{
   public void method1(Test2 v1, Test3 v2)
   {
      // rest of method not shown
   }
}

public class Test2 extends Test1
{
}

public class Test3 extends Test2
{
}

The following initializations appear in a different class.
Test1 t1 = new Test1();
Test2 t2 = new Test2();
Test3 t3 = new Test3();
        </code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>t1.method1(t1,t1);</p>
        </statement>

        <feedback>
          <p>
            You can't pass an object of class <c>Test1</c> since it is not
            either an object of type <c>Test2</c> or an object of type
            <c>Test3</c>. You can pass the specified type or an object that is a
            subclass of the specified type but <c>Test1</c> is not a subclass of
            <c>Test2</c> or <c>Test3</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>t2.method1(t2,t2);</p>
        </statement>

        <feedback>
          <p>
            You can't pass an object of class <c>Test2</c> as a parameter of
            type <c>Test3</c>. <c>Test2</c> is the parent class of <c>Test3</c>
            not a subclass. You can pass an object of the specified type or an
            object of any subclass.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>t3.method1(t1,t1);</p>
        </statement>

        <feedback>
          <p>
            You can't pass an object of class <c>Test1</c> since it is not
            either an object of type <c>Test2</c> or an object of type
            <c>Test3</c>. You can pass the specified type or an object that is a
            subclass of the specified type but <c>Test1</c> is not a subclass of
            <c>Test2</c> or <c>Test3</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>t2.method1(t3,t2);</p>
        </statement>

        <feedback>
          <p>
            You can't pass <c>t2</c> as an object of type <c>Test3</c> since it
            is an object of class <c>Test2</c> and class <c>Test2</c> is not
            either class <c>Test3</c> or a subclass of class <c>Test3</c>. Class
            <c>Test2</c> is the parent of class <c>Test3</c>.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>t3.method1(t3,t3);</p>
        </statement>

        <feedback>
          <p>
            Since <c>method1</c> is a public method of class <c>Test1</c>
            objects of any subclasses of <c>Test1</c> can invoke the method. So,
            it can be invoked on <c>t3</c> since it is an object of <c>Test3</c>
            and this is a subclass of <c>Test1</c>. And, since <c>method1</c>
            takes an object of class <c>Test2</c> and <c>Test3</c> as
            parameters. This actually means it can take an object of
            <c>Test2</c> or any subclass of <c>Test2</c> and an object of
            <c>Test3</c> or any subclass of <c>Test3</c>. So it can take
            <c>t3</c> which is an object of class <c>Test3</c> as an object of
            <c>Test2</c> since <c>Test3</c> is a subclass of <c>Test2</c>.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qoom_4">
    <statement>
      <p>
        If you have a parent class <c>Animal</c> that has a method
        <c>speak()</c> which returns: Awk. <c>Cat</c> has a <c>speak</c> method
        that returns: Meow. <c>Bird</c> does not have a <c>speak</c> method.
        <c>Dog</c> has a <c>speak</c> method that returns: Woof. <c>Pig</c> does
        not have a <c>speak</c> method. <c>Cow</c> has a <c>speak</c> method
        that returns: Moo. What is the output from looping through the array
        <c>a</c> created below and asking each element to <c>speak()</c>?
      </p>

      <program language="java">
        <code>
Animal[] a = { new Cat(), new Cow(), new Dog(), new Pig(), new Bird() }
        </code>
      </program>
    </statement>

    <choices>
      <choice correct="yes">
        <statement>
          <p>Meow Moo Woof Awk Awk</p>
        </statement>

        <feedback>
          <p>
            Objects keep a reference to the class that created them. So, even if
            you put them in an array of <c>Animal</c> objects, they know what
            they are and all methods are resolved starting with the class of the
            object. <c>Bird</c> and <c>Pig</c> do not override speak so the
            <c>speak</c> method in <c>Animal</c> will execute.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Awk Awk Awk Awk Awk</p>
        </statement>

        <feedback>
          <p>
            Methods are always resolved starting with the class of the object,
            so <c>Cat</c>, <c>Cow</c>, and <c>Dog</c> will all execute their
            overridden <c>speak</c> methods, so the output will be: Meow Moo
            Woof Awk Awk.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>This will not compile</p>
        </statement>

        <feedback>
          <p>
            Because <c>Bird</c>, <c>Cow</c>, <c>Cat</c>, <c>Dog</c>, and
            <c>Pig</c> are subclasses of <c>Animal</c>, they can be stored in an
            array declared as <c>Animal</c> without any compile time errors.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>This will have runtime errors</p>
        </statement>

        <feedback>
          <p>
            Because <c>Bird</c>, <c>Cow</c>, <c>Cat</c>, <c>Dog</c>, and
            <c>Pig</c> are subclasses of <c>Animal</c>, they can be stored in an
            array declared as <c>Animal</c> without any runtime errors.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Meow Moo Woof Oink Awk</p>
        </statement>

        <feedback>
          <p>
            The <c>Pig</c> class did not override the <c>speak</c> method, so it
            will use the method from <c>Animal</c>, thus the output should be:
            Meow Moo Woof Awk Awk
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qoom_5">
    <statement>
      <p>
        Given the following class declarations and code, what is the result when
        the code is run?
      </p>

      <program language="java">
        <code>
public class Car
{
   private int fuel;

   public Car() { fuel = 0; }
   public Car(int g) { fuel = g; }

   public void addFuel() { fuel++; }
   public void display() { System.out.print(fuel + " "); }
}

public class RaceCar extends Car
{
   public RaceCar(int g) { super(2*g); }
}

What is the result when the following code is compiled and run?

Car car = new Car(5);
Car fastCar = new RaceCar(5);
car.display();
car.addFuel();
car.display();
fastCar.display();
fastCar.addFuel();
fastCar.display();
        </code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>
            The code compiles and runs with no errors, the output is 5 6 5 6
          </p>
        </statement>

        <feedback>
          <p>
            <c>RaceCar</c>, while it inherits methods from <c>Car</c> via
            inheritance, has a separate and different constructor that sets the
            initial fuel amount to <c>2 * g</c>, thus in this case, <c>fuel</c>
            for <c>fastCar</c> is set to <c>10</c> initially.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>
            The code compiles and runs with no errors, the output is: 5 6 10 11
          </p>
        </statement>

        <feedback>
          <p>
            The code compiles correctly, and because <c>RaceCar</c> extends the
            <c>Car</c> class, all the public methods of <c>Car</c> can be used
            by <c>RaceCar</c> objects. Also, a variable <c>Car</c> can refer to
            a <c>Car</c> object or an object of any subclass of <c>Car</c>. An
            object always knows the class that created it, so even though
            <c>fastCar</c> is declared to be a <c>Car</c> the constructor that
            is executed is the one for <c>RaceCar</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            The code compiles and runs with no errors, the output is 10 11 10 11
          </p>
        </statement>

        <feedback>
          <p>
            The variable <c>car</c> is a <c>Car</c> object, so the constructor
            used is not the same as the <c>fastCar</c> object which is a
            <c>RaceCar</c>. The <c>car</c> constructor does not change the
            passed in parameter, so it is set to <c>5</c> initially.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The code won't compile.</p>
        </statement>

        <feedback>
          <p>
            <c>RaceCar</c> inherits from the <c>Car</c> class so all the public
            methods in <c>Car</c> can be accessed by any object of the
            <c>RaceCar</c> class.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            You get a runtime error <c>ClassCastException</c>, when
            <c>fastCar.addFuel()</c> is executed.
          </p>
        </statement>

        <feedback>
          <p>
            <c>RaceCar</c> inherits from the <c>Car</c> class so all the public
            methods in <c>Car</c> can be accessed by any object of the
            <c>RaceCar</c> class.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qoom_6">
    <statement>
      <p>
        Given the following class declarations and code, what is the result when
        the code is run?
      </p>

      <program language="java">
        <code>
public class Book
{
   public String getISBN()
   {
      // implementation not shown
   }

   // constructors, fields, and other methods not shown
}

public class Dictionary extends Book
{
   public String getDefinition(String word)
   {
      // implementation not shown
   }

   // constructors, fields, and methods not shown
}

Assume that the following declaration appears in a client class.

Book b = new Dictionary();

Which of the following statements would compile without error?
I.  b.getISBN();
II. b.getDefinition("wonderful");
III. ((Dictionary) b).getDefinition("wonderful");
        </code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>I only</p>
        </statement>

        <feedback>
          <p>
            Both I and III are correct. I is correct because variable <c>b</c>
            has been declared to be an object of the class <c>Book</c> so you
            can invoke any public methods that are defined in the <c>Book</c>
            class or in parents of <c>Book</c>. II is not correct because you
            can't invoke methods in the <c>Dictionary</c> class directly on
            <c>b</c> since <c>b</c> is declared to be of type <c>Book</c> not
            type <c>Dictionary</c> and <c>Dictionary</c> is a subclass of
            <c>Book</c> not a parent class of <c>Book</c>. III is correct
            because you can cast <c>b</c> to type <c>Dictionary</c> and then
            invoke public methods in <c>Dictionary</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>II only</p>
        </statement>

        <feedback>
          <p>
            You can't invoke methods in the <c>Dictionary</c> class directly on
            <c>b</c> since <c>b</c> is declared to be of type <c>Book</c> not
            type <c>Dictionary</c> and <c>Dictionary</c> is a subclass of
            <c>Book</c> not a parent class of <c>Book</c>. The compiler checks
            that the method exists on the declared class type, not the run-time
            type of the object.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>I and III only</p>
        </statement>

        <feedback>
          <p>
            I is correct because variable <c>b</c> has been declared to be an
            object of the class <c>Book</c> so you can invoke any public methods
            that are defined in the <c>Book</c> class or in parents of
            <c>Book</c>. II is not correct because you can't invoke methods in
            the <c>Dictionary</c> class directly on <c>b</c> since <c>b</c> is
            declared to be of type <c>Book</c> not type <c>Dictionary</c> and
            <c>Dictionary</c> is a subclass of <c>Book</c> not a parent class of
            <c>Book</c>. III is correct because you can cast <c>b</c> to type
            <c>Dictionary</c> and then invoke public methods in
            <c>Dictionary</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>III only</p>
        </statement>

        <feedback>
          <p>I is also correct.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>I, II, and III</p>
        </statement>

        <feedback>
          <p>
            You can't invoke methods in the <c>Dictionary</c> class directly on
            <c>b</c> since <c>b</c> is declared to be of type <c>Book</c> not
            type <c>Dictionary</c> and <c>Dictionary</c> is a subclass of
            <c>Book</c> not a parent class of <c>Book</c>. The compiler checks
            that the method exists on the declared class, not the run-time
            class.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qsh_3">
    <statement>
      <p>What is the output of the following code?</p>
      <program language="java">
        <code>
class Animal
{
    void someSound()
    {
        System.out.print("Screeech ");
    }
}

class Cat extends Animal
{
    public Cat()
    {
        System.out.print("Meow ");
        super.someSound();
    }
}

class Garfield extends Cat
{
    public Garfield()
    {
        System.out.print("Lasagna ");
    }
}

public class MainClass
{
    public static void main(String[] args)
    {
        Garfield garfield = new Garfield();
    }
}
        </code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>Lasagna Meow Screeech</p>
        </statement>

        <feedback>
          <p>
            The baseclass constructor runs first so Animal doesn't have one so
            then it goes to Cat's constructor and then Garfield's constructor
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>Meow Screeech Lasagna</p>
        </statement>

        <feedback>
          <p>
            The baseclass constructor runs first so Animal doesn't have one so
            then it goes to Cat's constructor and then Garfield's constructor
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Screeech Meow Lasagna</p>
        </statement>

        <feedback>
          <p>
            The baseclass constructor runs first so Animal doesn't have one so
            then it goes to Cat's constructor and then Garfield's constructor
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Lasagna Screeech Meow</p>
        </statement>

        <feedback>
          <p>
            The baseclass constructor runs first so Animal doesn't have one so
            then it goes to Cat's constructor and then Garfield's constructor
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>
</section>
