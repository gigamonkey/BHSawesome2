<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="ooHardMC">
  <title>Hard Multiple Choice Questions</title>
  <p>
    These problems are harder than those that you will typically see on the AP
    CSA exam.
  </p>

  <activity label="qooh_1">
    <statement>
      <p>
        Assume that <c>Base b = new Derived();</c> appears in a client program.
        What is the result of the call <c>b.methodOne();</c>?
      </p>

      <program language="java">
        <code>
public class Base
{
    public void methodOne()
    {
        System.out.print("A");
        methodTwo();
    }

    public void methodTwo()
    {
        System.out.print("B");
    }
}

public class Derived extends Base
{
    public void methodOne()
    {
        super.methodOne();
        System.out.print("C");
    }

    public void methodTwo()
    {
        super.methodTwo();
        System.out.print("D");
    }
}
        </code>
      </program>
    </statement>

    <choices>
      <choice correct="yes">
        <statement>
          <p>ABDC</p>
        </statement>

        <feedback>
          <p>
            Even though b is declared as type <c>Base</c> it is created as an
            object of the <c>Derived</c> class, so all methods to it will be
            resolved starting with the <c>Derived</c> class. So the
            <c>methodOne()</c> in <c>Derived</c> will be called. This method
            first calls <c>super.methodOne</c> so this will invoke the method in
            the superclass (which is <c>Base</c>). So next the <c>methodOne</c>
            in <c>Base</c> will execute. This prints the letter "A" and invokes
            <c>this.methodTwo()</c>. Since <c>b</c> is really a <c>Derived</c>
            object, we check there first to see if it has a <c>methodTwo</c>. It
            does, so execution continues in the <c>Derived</c> class
            <c>methodTwo</c>. This method invokes <c>super.methodTwo</c>. So
            this will invoke the method in the super class ( <c>Base</c>) named
            <c>methodTwo</c>. This method prints the letter "B" and then
            returns. Next the execution returns from the call to the
            <c>super.methodTwo</c> and prints the letter "D". We return to the
            <c>Base</c> class <c>methodOne</c> and return from that to the
            <c>Derived</c> class <c>methodOne</c> and print the letter "C".
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>AB</p>
        </statement>

        <feedback>
          <p>
            This would be true if the object was created of type <c>Base</c>.
            But the object is really a <c>Derived</c> object. So all methods are
            looked for starting with the <c>Derived</c> class.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>ABCD</p>
        </statement>

        <feedback>
          <p>
            After the call to <c>methodOne</c> in the super class printing "A",
            the code continues with the implicit <c>this.methodTwo</c> which
            resolves from the current object's class which is <c>Derived</c>.
            Next, <c>methodTwo</c> in the <c>Derived</c> class is executed which
            then calls <c>super.methodTwo</c> which invokes <c>println</c> "B"
            from <c>methodTwo</c> in the <c>Base</c> class. Then the "D" in the
            <c>Derived</c> <c>methodTwo</c> is printed. Finally the program
            returns to <c>methodOne</c> in the <c>Derived</c> class are prints
            "C".
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>ABC</p>
        </statement>

        <feedback>
          <p>
            The call to <c>methodTwo</c> in <c>super.methodOne</c> is to
            <c>this.methodTwo</c> which is the method from the <c>Derived</c>
            class. Consequently the "D" is also printed.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qooh_2">
    <statement>
      <p>
        If you have the following classes. Which of the following constructors
        would be valid for <c>Point3D</c>?
      </p>

      <program language="java">
        <code>
public class Point2D
{
   public int x;
   public int y;

   public Point2D() {}

   public Point2D(int x,int y)
   {
      this.x = x;
      this.y = y;
   }
  // other methods
}

public class Point3D extends Point2D
{
   public int z;

   // other code
}

I.  public Point3D()
    {

    }
II. public Point3D(int x, int y, int z)
    {
       super(x,y);
       this.z = z;
    }
III. public Point3D(int x, int y)
     {
        this.x = x;
        this.y = y;
        this.z = 0;
     }
        </code>
      </program>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>II only</p>
        </statement>

        <feedback>
          <p>
            <c>Point2D</c> does have a constructor that takes an <c>x</c> and
            <c>y</c> value so this is okay. Also the call to super is the first
            line of code in the child constructor as required. However, both I
            and III are okay as well.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>III only</p>
        </statement>

        <feedback>
          <p>
            The <c>x</c> and <c>y</c> values in <c>Point2D</c> are public and so
            can be directly accessed by all classes including subclasses. Also
            there is a no-arg constructor in <c>Point2D</c> so the super no-arg
            constructor will be called before the first line of code in this
            constructor.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>I, II, and III</p>
        </statement>

        <feedback>
          <p>
            I is true because <c>Point2D</c> does have a no-arg constructor. II
            is true because <c>Point2D</c> does have a constructor that takes
            <c>x</c> and <c>y</c>. III is true because <c>Point2D</c> does have
            a no-arg constructor which will be called before the first line of
            code is executed in this constructor. The fields <c>x</c> and
            <c>y</c> are public in <c>Point2D</c> and thus can be directly
            accessed by all classes.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>I and II only</p>
        </statement>

        <feedback>
          <p>
            This would be true if <c>x</c> and <c>y</c> were private in
            <c>Point2D</c>, but they are public.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>I only</p>
        </statement>

        <feedback>
          <p>
            <c>Point2D</c> does have a no-arg constructor and since the
            constructor in <c>Point3D</c> doesn't have an explicit call to super
            as the first line of code in the constructor one will be added for
            the no-arg constructor. However, both II and III are okay as well.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>
</section>
