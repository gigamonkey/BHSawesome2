<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="ooEasyMC">
  <title>Easier Multiple Choice Questions</title>
  <p>
    These problems are easier than most of those that you will usually see on
    the AP CSA exam.
  </p>

  <activity label="qooe_1">
    <statement>
      <p>What best describes the purpose of a classâ€™s constructor?</p>
    </statement>

    <choices>
      <choice correct="yes">
        <statement>
          <p>Initialize the fields in the object.</p>
        </statement>

        <feedback>
          <p>
            A constructor is often used to initialize the fields to their
            default values or in the case of a parameterized constructor, to the
            values passed in to the constructor.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Determines the amount of space needed for an object and creates the
            object.
          </p>
        </statement>

        <feedback>
          <p>The object is already created before the constructor is called.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Names the new object.</p>
        </statement>

        <feedback>
          <p>Constructors do not name the object.</p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qooe_2">
    <statement>
      <p>
        Under which of these conditions is it appropriate to overload a method
        (ie: the class will contain two methods with the same name)?
      </p>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>The methods do different things.</p>
        </statement>

        <feedback>
          <p>Methods that do different things should be named differently.</p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The methods have different parameter names.</p>
        </statement>

        <feedback>
          <p>
            There is no reason the parameter names ought to be different if the
            two methods are performing the same action.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The methods have different post-conditions.</p>
        </statement>

        <feedback>
          <p>
            If the methods have different post-conditions, they are performing
            different functions, and should be named differently.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Two methods with the same name can never be included in the same
            class.
          </p>
        </statement>

        <feedback>
          <p>
            If two methods perform the same function, they can be named the
            same. However, the number of parameters, type of parameters, or
            order of parameter types must be different.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>The methods have different numbers of parameters</p>
        </statement>

        <feedback>
          <p>
            Overloading occurs when two methods perform the same essential
            operation, but take a different number and/or type of parameters.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qooe_5">
    <statement>
      <p>
        A car dealership needs a program to store information about the cars for
        sale. For each car, they want to keep track of the following
        information: number of doors (2 or 4), whether the car has air
        conditioning, and its average number of miles per gallon. Which of the
        following is the best design?
      </p>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>
            Use four unrelated classes: <c>Car</c>, <c>Doors</c>,
            <c>AirConditioning</c>, and <c>MilesPerGallon</c>.
          </p>
        </statement>

        <feedback>
          <p>
            Only <c>Car</c> should be a class. The number of doors, flag if it
            has air conditioning, and the average number of miles per gallon are
            attributes of a car so they belong in a <c>Car</c> class.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Use a class <c>Car</c> with three subclasses: <c>Doors</c>,
            <c>AirConditioning</c>, and <c>MilesPerGallon</c>.
          </p>
        </statement>

        <feedback>
          <p>
            Doors, air conditioning, and miles per gallon are not a kind of car.
            Child classes need to be able to be substituted for the parent
            class.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>
            Use a class <c>Car</c>, with fields: <c>numDoors</c>, <c>hasAir</c>,
            and <c>milesPerGallon</c>.
          </p>
        </statement>

        <feedback>
          <p>
            The number of doors, flag if it has air conditioning, and the
            average number of miles per gallon are attributes of a car. Each of
            these is a simple value so they can just be fields of a <c>Car</c>
            class.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Use a class <c>Car</c>, with subclasses of <c>Doors</c>,
            <c>AirConditioning</c>, and <c>MilesPerGallon</c>.
          </p>
        </statement>

        <feedback>
          <p>
            A door is not a type of car. A flag for air conditioning is not a
            type of door, and a miles per gallon is not a type of air
            conditioning flag. Child classes need to be able to be substituted
            for the parent class.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Use classes: <c>Doors</c>, <c>AirConditioning</c>, and
            <c>MilesPerGallon</c>, each with a subclass <c>Car</c>.
          </p>
        </statement>

        <feedback>
          <p>
            A class <c>Car</c> can't be a subclass of three different classes.
            Each class can only have one parent class. Also a car is not a type
            of door, air conditioning flag, or miles per gallon. Child classes
            need to be able to be substituted for the parent class.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qooe_6">
    <statement>
      <p>
        A program is being written by a team of programmers. One programmer is
        implementing a class called <c>Employee</c>; another programmer is
        writing code that will use the <c>Employee</c> class. Which of the
        following aspects of the public methods and fields of the
        <c>Employee</c> class does not need to be known by both programmers?
      </p>
    </statement>

    <choices>
      <choice correct="yes">
        <statement>
          <p>How the methods are implemented.</p>
        </statement>

        <feedback>
          <p>
            Only the programmer of the <c>Employee</c> class must know how the
            public methods work. The programmer that is using the
            <c>Employee</c> class can just use the public methods and not worry
            about how they are implemented.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The method names.</p>
        </statement>

        <feedback>
          <p>
            The programmer who writes the methods will need to know what the
            names are. The programmer who will use the public methods will also
            need to know the names of the methods in order to invoke them.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The method return types.</p>
        </statement>

        <feedback>
          <p>
            In order to use the public methods of the <c>Employee</c> class, a
            programmer must know the method return types.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Constants</p>
        </statement>

        <feedback>
          <p>
            Constants are public fields and are meant to be used by people using
            a class.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>The number and types of the method parameters.</p>
        </statement>

        <feedback>
          <p>
            In order to use the public methods of the <c>Employee</c> class, a
            programmer must know the number of parameters and the type for each
            parameter.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>

  <activity label="qooe_7">
    <statement>
      <p>
        A bookstore is working on an on-line ordering system. For each type of
        published material (books, movies, audio tapes) they need to track the
        id, title, author(s), date published, and price. Which of the following
        would be the best design?
      </p>
    </statement>

    <choices>
      <choice>
        <statement>
          <p>
            Create one class <c>PublishedMaterial</c> with the requested fields
            plus type.
          </p>
        </statement>

        <feedback>
          <p>
            This will complicate the process of retrieving objects based on
            their type. Also if we need to add information that is specific to
            <c>Book</c> or <c>Movie</c> or <c>AudioTape</c> it would be best if
            these were subclasses of <c>PublishedMaterial</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Create classes <c>Book</c>, <c>Movie</c>, and <c>AudioTape</c> with
            the requested fields.
          </p>
        </statement>

        <feedback>
          <p>
            This involves writing more code than is necessary (usually people
            copy and paste the shared code) and makes it harder to fix errors.
            It would be better to put common fields and methods in the
            superclass <c>PublishedMaterial</c> and have <c>Book</c>,
            <c>Movie</c>, and <c>AudioTape</c> be subclasses.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>
            Create one class <c>BookStore</c> with the requested fields plus
            type.
          </p>
        </statement>

        <feedback>
          <p>
            The class name, <c>BookStore</c>, seems to imply the thing that
            keeps track of the store. This would be an appropriate class name
            for an object that handles the items in the <c>Bookstore</c>.
            However, for the published material, it would be better to use a
            superclass <c>PublishedMaterial</c> and subclasses for <c>Book</c>,
            <c>Movie</c> and <c>AudioTape</c>.
          </p>
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>Create classes for each.</p>
        </statement>

        <feedback>
          <p>
            This is more classes than is necessary. Items such as <c>Title</c>,
            <c>Price</c>, <c>ID</c>, <c>Author</c> and <c>DatePublished</c> are
            simple variables that do not need a class of their own but should be
            fields in a <c>PublishedMaterial</c> superclass, with <c>Movie</c>,
            <c>AudioTape</c> and <c>Book</c> as subclasses.
          </p>
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>
            Create the class <c>PublishedMaterial</c> with children classes of
            <c>Book</c>, <c>Movie</c>, and <c>AudioTape</c>.
          </p>
        </statement>

        <feedback>
          <p>
            We will need to get objects based on their type so we should create
            classes for <c>Book</c>, <c>Movie</c>, and <c>AudioTape</c>. They
            have common fields so we should put these in a common superclass
            <c>PublishedMaterial</c>.
          </p>
        </feedback>
      </choice>
    </choices>
  </activity>
</section>
