<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-2-6-comparing-booleans">
  <title>Comparing boolean Expressions</title>
  <introduction>
    <idx>De Morgan's Laws</idx>
    <idx>negation</idx>
    <idx>truth table</idx>
    <p>
      What if you heard a rumor about a senior at your high school? And then you
      heard that the rumor wasn’t true - it wasn’t a senior at your high school.
      Which part of “a senior at your high school” wasn’t true? Maybe they
      weren’t a senior? Or maybe they didn’t go to your high school? You could
      write this as a logic statement like below using negation (<c>!</c>) and
      the <term>and</term> (<c>&amp;&amp;</c>) operator since both parts have to
      be true for the whole statement to be true. (Thank you to Kevin Saxton
      from Kent School, CT for this example.)
    </p>

    <program language="java">
      <code>
!(a &amp;&amp; b)

a = "senior"
b = "at our high school"

// This means it is not true that (a) it is a senior
// and (b) someone at our high school.
      </code>
    </program>

    <p>
      In this lesson, you will learn about De Morgan’s Laws which simplify
      statements like this. We know that !(a senior at our high school) could
      mean !(a senior) or !(at our high school). Let’s learn more about De
      Morgan’s Laws.
    </p>
  </introduction>

  <subsection xml:id="de-morgan-s-laws">
    <title>De Morgan’s Laws</title>
    <p>
      De Morgan’s Laws were developed by Augustus De Morgan in the 1800s. They
      show how to simplify the negation of a complex boolean expression, which
      is when there are multiple expressions joined by an <term>and</term>
      (<c>&amp;&amp;</c>) or <term>or</term> (<c>||</c>), such as <c>(x &lt; 3)
      &amp;&amp; (y &gt; 2)</c>. When you negate one of these complex
      expressions, you can simplify it by flipping the operators and end up with
      an equivalent expression. De Morgan’s Laws state the following
      equivalencies. Here’s an easy way to remember De Morgan’s Laws: <term>move
      the NOT inside, AND becomes OR</term> and <term>move the NOT inside, OR
      becomes AND</term>.
    </p>

    <figure align="center">
      <caption>De Morgan’s Laws to simplify complex expressions</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/demorgan.png" width="71%" />
    </figure>

    <p>
      In Java, De Morgan’s Laws are written with the following operators:
    </p>

    <blockquote>
      <p>
        <ul>
          <li>
            <p>
              <c>!(a &amp;&amp; b)</c> is equivalent to <c>!a || !b</c>
            </p>
          </li>

          <li>
            <p>
              <c>!(a || b)</c> is equivalent to <c>!a &amp;&amp; !b</c>
            </p>
          </li>
        </ul>
      </p>
    </blockquote>

    <p>
      Going back to our example above, !(a senior &amp;&amp; at our high school)
      is equivalent to !(a senior) or !(at our high school) using De Morgan’s
      Laws:
    </p>

    <program language="java">
      <code>
!(a &amp;&amp; b) is equivalent to !a || !b

a = "senior"
b = "at our high school"
      </code>
    </program>

    <p>
      You can also simplify negated boolean expressions that have relational
      operators like <c>&lt;</c>, <c>&gt;</c>, <c>==</c>. You can move the
      negation inside the parentheses by flipping the relational operator to its
      opposite sign. For example, not (c equals d) is the same as saying c does
      not equal d. An easy way to remember this is <term>To move the NOT, flip
      the sign</term>. Notice that <c>==</c> becomes <c>!=</c>, but <c>&lt;</c>
      becomes <c>&gt;=</c>, <c>&gt;</c> becomes <c>&lt;=</c>, <c>&lt;=</c>
      becomes <c>&gt;</c>, and <c>&gt;=</c> becomes <c>&lt;</c> where the sign
      is flipped and an equal sign may also be added or removed.
    </p>

    <blockquote>
      <p>
        <ul>
          <li>
            <p>
              <c>!(c == d)</c> is equivalent to <c>c != d</c>
            </p>
          </li>

          <li>
            <p>
              <c>!(c != d)</c> is equivalent to <c>c == d</c>
            </p>
          </li>

          <li>
            <p>
              <c>!(c &lt; d)</c> is equivalent to <c>c &gt;= d</c>
            </p>
          </li>

          <li>
            <p>
              <c>!(c &gt; d)</c> is equivalent to <c>c &lt;= d</c>
            </p>
          </li>

          <li>
            <p>
              <c>!(c &lt;= d)</c> is equivalent to <c>c &gt; d</c>
            </p>
          </li>

          <li>
            <p>
              <c>!(c &gt;= d)</c> is equivalent to <c>c &lt; d</c>
            </p>
          </li>
        </ul>
      </p>
    </blockquote>
  </subsection>

  <subsection xml:id="truth-tables">
    <title>Truth Tables</title>
    <p>
      The following table (also called a <term>truth table</term>) shows the
      result for <c>P &amp;&amp; Q</c> when <c>P</c> and <c>Q</c> are both
      expressions that can be <c>true</c> or <c>false</c>. An expression
      involving logical operators like <c>P &amp;&amp; Q</c> evaluates to a
      <c>boolean</c> value, <c>true</c> or <c>false</c>. As you can see below
      the result of <c>P &amp;&amp; Q</c> is only <c>true</c> if both <c>P</c>
      and <c>Q</c> are <c>true</c>.
    </p>

    <table>
      <tabular row-headers="yes">
        <col top="minor" />
        <col top="minor" />
        <col top="minor" />
        <row header="yes" left="minor">
          <cell bottom="minor" right="minor">P</cell>
          <cell bottom="minor" right="minor">Q</cell>
          <cell bottom="minor" right="minor">P &amp;&amp; Q</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">false</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">?</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">false</cell>
        </row>
      </tabular>
    </table>

    <activity label="truthTableFill">
      <statement>
        <p>
          The truth table above is missing one result. What is the result of
          <c>P &amp;&amp; Q</c> when <c>P=true</c> and <c>Q=false</c>?
        </p>

        <p>
          <fillin mode="string" answer="false" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>Correct. Both values must be true for &amp;&amp; to return true.</p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>Both values must be true for &amp;&amp; to return true.</feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <p>
      The following table shows the result for <c>P || Q</c> when <c>P</c> and
      <c>Q</c> are both expressions that can be <c>true</c> or <c>false</c>. As
      you can see below the result of <c>P || Q</c> is <c>true</c> if either
      <c>P</c> or <c>Q</c> is <c>true</c>. It is also <c>true</c> when both of
      them are <c>true</c>.
    </p>

    <table>
      <tabular row-headers="yes">
        <col top="minor" />
        <col top="minor" />
        <col top="minor" />
        <row header="yes" left="minor">
          <cell bottom="minor" right="minor">P</cell>
          <cell bottom="minor" right="minor">Q</cell>
          <cell bottom="minor" right="minor">P || Q</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">?</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">false</cell>
        </row>
      </tabular>
    </table>

    <activity label="truthTableFill2">
      <statement>
        <p>
          The truth table above is missing one result. What is the result of
          <c>P || Q</c> when <c>P=false</c> and <c>Q=true</c>?
        </p>

        <p>
          <fillin mode="string" answer="true" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>
                Correct. Only one of the two has to be true with || so this will
                print true.
              </p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>If at least 1 value is true, || will return true.</feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <activity label="traceCompoundBools">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          3 and y has been set to 9?
        </p>

        <program language="java">
          <code>
if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              first case will print if both of the conditions are true and they
              are.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>second case will print either of the conditions are false.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="traceCompoundBools2">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          3 and y has been set to 6?
        </p>

        <program language="java">
          <code>
if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              first case will print if both of the conditions are true, but the
              second is not.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              second case will print if either of the conditions are false and
              the second one is (6 / 3 == 2).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbc_or">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          3 and y has been set to 6? Notice that it is now an <term>or</term>
          (||) instead of <term>and</term> (&amp;&amp;).
        </p>

        <program language="java">
          <code>
if (x &gt; 0 || (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              first case will print if either of the two conditions are true.
              The first condition is true, even though the second one isn't.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              second case will print if both of the conditions are false, but
              the first condition is true.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="truth-tables-1">
    <title>Truth Tables</title>
    <p>
      Although you do not have to memorize De Morgan’s Laws for the CSA Exam,
      you should be able to show that two boolean expressions are equivalent.
      One way to do this is by using truth tables. For example, we can show that
      <c>!(a &amp;&amp; b)</c> is equivalent to <c>!a || !b</c> by constructing
      the truth table below and seeing that they give identical results for the
      2 expressions (the last 2 columns in the table below are identical!).
    </p>

    <table>
      <tabular>
        <row header="yes" left="minor">
          <cell bottom="minor" right="minor">a</cell>
          <cell bottom="minor" right="minor">b</cell>
          <cell bottom="minor" right="minor">!(a &amp;&amp; b)</cell>
          <cell bottom="minor" right="minor">!a || !b</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">false</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">false</cell>
          <cell bottom="minor" right="minor">true</cell>
          <cell bottom="minor" right="minor">true</cell>
        </row>
      </tabular>
    </table>
  </subsection>

  <subsection xml:id="simplifying-boolean-expressions">
    <title>Simplifying Boolean Expressions</title>
    <p>
      Often, you can simplify boolean expressions to create equivalent
      expressions. For example, applying De Morgan’s Laws to <c>!(x &lt; 3
      &amp;&amp; y &gt; 2)</c> yields <c>!(x &lt; 3) || !(y &gt; 2)</c> as seen
      in the figure below. This can then be simplified further by flipping the
      relational operators to remove the not. So, <c>!(x &lt; 3) || !(y &gt;
      2)</c> is simplified to <c>(x &gt;= 3 || y &lt;= 2)</c> where the
      relational operators are flipped and the negation is removed. These two
      simplification steps are seen below.
    </p>

    <figure align="center">
      <caption>An example boolean expression simplified</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/demorganex.png" width="71%" />
    </figure>

    <activity label="lcdmtest">
      <statement>
        <p>
          For what values of x and y will the code below print true? Try out
          different values of x and y to check your answer.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        int x = 2;
        int y = 3;
        System.out.println(!(x &lt; 3 &amp;&amp; y &gt; 2));
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 {public static void main(String[] args) { int x = 2; int y = 3;"
                    + " System.out.println(!(x &lt; 3 &amp;&amp; y &gt; 2)); } }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="compareBool1">
      <statement>
        <p>
          What is printed when the following code executes and x equals 4 and y
          equals 3?
        </p>

        <program language="java">
          <code>
int x = 4, y = 3;
if (!(x &lt; 3 || y &gt; 2))
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is greater or equal to 3 and y is less
              than or equal to 2. The first part is true but the second is
              false. Since the statements are joined by an and the complex
              expression is false.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is less than 3 or y is greater than 2.
              In this case the first will be false, but the second true so since
              the statements are joined with an or the complex expression is
              true.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="compareBool2">
      <statement>
        <p>
          What is printed when the following code executes and x equals 4 and y
          equals 3?
        </p>

        <program language="java">
          <code>
int x = 4, y = 3;
if (!(x &lt; 3 &amp;&amp; y &gt; 2))
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is greater than or equal to 3 or y is
              less than or equal to 2. In this case x is greater than 3 so the
              first condition is true.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is less than 3 and y is greater than 2.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-truth-tables-pogil">
    <title>Coding Challenge : Truth Tables POGIL</title>
    <p>
      We encourage you to do this activity as a <url
      href="https://pogil.org/about-pogil/what-is-pogil"
      visual="https://pogil.org/about-pogil/what-is-pogil">POGIL</url> (Process
      Oriented Guided Inquiry Learning) group activity. POGIL groups are
      self-managed teams of up to 4 students where everyone has a <url
      href="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing">POGIL
      role</url> and works together to solve the problems, making sure that
      everyone in the team participates and learns.
    </p>

    <p>Explore the following problems with your group:</p>
    <p>
      <ol marker="1">
        <li>
          <p>
            Draw or print a <url
            href="https://docs.google.com/document/d/1lpjk0LS_KdAddRurMayJZmaFzeyEg4FyhviZcSTXvtU/edit?usp=sharing"
            visual="https://docs.google.com/document/d/1lpjk0LS_KdAddRurMayJZmaFzeyEg4FyhviZcSTXvtU/edit?usp=sharing">Venn
            diagram</url> of 4 intersecting circles. Put the names of the 4
            people in your group one in each circle. Write down the age of each
            person in your group in the circles. If two or more people are the
            same age, put the age in the intersecting parts of their circles.
            Write a Boolean expression that compares the age of each person in
            the group using <c>==</c>, <c>&lt;</c>, <c>&gt;</c>, and
            <c>&amp;&amp;</c>, for example Ada’s age <c>&gt;</c> Alan’s age
            <c>&amp;&amp;</c> Alan’s age <c>==</c> Grace’s age. Then, ask each
            person in your group their favorite movie. If two or more people
            have the same favorite movie, put the movie in the intersecting
            parts of their circles. Write a Boolean expression that compares the
            favorite movies in the group using <c>==</c>, <c>!=</c>, and
            <c>&amp;&amp;</c>, for example Ada’s movie <c>==</c> Alan’s movie
            <c>&amp;&amp;</c> Alan’s movie <c>!=</c> Grace’s movie. Think of 1
            more comparison and write it in the circles and as a Boolean
            expression. Share the Boolean expressions with the class. (Thank you
            to Jill Westerlund of Hoover High School and Art Lopez of Sweetwater
            High School for this activity suggestion).
          </p>
        </li>

        <li>
          <p>
            Write the sentence “If it’s sunny, OR if the temperature is greater
            than 80 and it’s not raining, I will go to the beach.” as a Java if
            statement using an int variable <c>temperature</c> and boolean
            variables <c>sunny</c> and <c>raining</c>. If the conditional is
            true, print out “Go to the beach!”. So, you will go to the beach on
            days that it is sunny in any temperature, or you will go to the
            beach on days when the temperature is over 80 degrees and it’s not
            raining.
          </p>
        </li>

        <li>
          <p>
            Complete a truth table for the if statement that you wrote in #2
            with columns for sunny, temperature &gt; 80, raining, and go to the
            beach.
          </p>
        </li>

        <li>
          <p>
            Write Java code below to test your if statement and try all the
            values in your truth table to see if you filled it out correctly.
            You will need test case for each of the 8 rows in your truth table,
            for example when sunny is true and false, when raining is true or
            false, and for a value of temperature greater than 80, for example
            90, and less than 80, for example 60.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-truthtables">
      <statement>
        <p>
          Challenge-truthtables: Test your boolean expression in an if statement
          below.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class TruthTable
{
    public static void main(String[] args)
    {
        // Test multiple values for these variables
        boolean sunny = false;
        int temperature = 90;
        boolean raining = false;

        // Write an if statement for: If it's sunny,
        //  OR if the temperature is greater than 80
        //     and it's not raining, "Go to the beach!"

    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String expect = "Go to the beach!";
        String output = getMethodOutput("main");
        String code = getCode();
        boolean passed;
        if (getCode().contains("boolean sunny = false"))
            passed =
                    getResults(
                            expect,
                            output,
                            "Prints Go to the beach! with initial input (sunny = false; temperature"
                                + " = 90; raining = false;)");
        else passed = getResults("sunny = false", "sunny = true", "Set sunny to false to test");

        assertTrue(passed);
    }

    @Test
    public void testCodeContains1()
    {
        boolean ifStatement = checkCodeContains("conditional: if", "if");
        assertTrue(ifStatement);
    }

    @Test
    public void testCodeContains2()
    {
        boolean ifStatement1 =
                checkCodeContains("conditional: temperature greater than 80", "temperature &gt; 80");

        assertTrue(ifStatement1);
    }

    @Test
    public void testCodeContains4()
    {
        boolean ifStatement3 = checkCodeContains("and", "&amp;&amp;");
        assertTrue(ifStatement3);
    }

    @Test
    public void testCodeContains5()
    {
        boolean ifStatement3 = checkCodeContains("or", "||");
        assertTrue(ifStatement3);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="coding-challenge-truth-and-tracing-tables-pogil">
    <title>Coding Challenge : Truth and Tracing Tables POGIL</title>
    <p>
      We encourage you to do this activity as a <url
      href="https://pogil.org/about-pogil/what-is-pogil"
      visual="https://pogil.org/about-pogil/what-is-pogil">POGIL</url> (Process
      Oriented Guided Inquiry Learning) group activity. POGIL groups are
      self-managed teams of up to 4 students where everyone has a <url
      href="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing">POGIL
      role</url> and works together to solve the problems, making sure that
      everyone in the team participates and learns.
    </p>

    <p>
      Explore the following problems with your group. You may use <url
      href="https://docs.google.com/document/d/1Oa_hlzjunYMoRRiMX0A0nFjk7JiTh7EGfIVM9bQ_BIo/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1Oa_hlzjunYMoRRiMX0A0nFjk7JiTh7EGfIVM9bQ_BIo/edit?usp=sharing">this
      worksheet</url> to complete your truth tables. Assume that <c>x</c> is an
      integer value, for example -1, 0, or 1.
    </p>

    <p>
      <ol marker="1">
        <li>
          <p>
            Complete a truth table for the boolean expression: <c>!(x == 0 || x
            &gt;= 1)</c>. Is this the set of positive or negative numbers? Is
            the expression true when <c>x</c> is positive? Or is it true when
            <c>x</c> is negative? You can try out the values when <c>x</c> is 1
            or -1 or 0. Note that 0 is not positive or negative. You can try
            running the code below to check your answer.
          </p>
        </li>

        <li>
          <p>
            Complete a truth table for the boolean expression: <c>!(x == 0)
            &amp;&amp; !(x &gt;= 1)</c>. Is this the set of positive or negative
            numbers?
          </p>
        </li>

        <li>
          <p>
            Complete a truth table for the boolean expression: <c>(x != 0)
            &amp;&amp; (x &lt; 1)</c>. Is this the set of positive or negative
            numbers?
          </p>
        </li>

        <li>
          <p>Are the 3 boolean expressions equivalent? Why or why not?</p>
        </li>

        <li>
          <p>Test your answers using the active code window below.</p>
        </li>

        <li>
          <p>
            Complete the following multiple choice exercises in your POGIL
            groups. Show the application of DeMorgan’s laws or the truth tables
            in each question on paper.
          </p>
        </li>
      </ol>
    </p>

    <project label="challengeBooleanExpr">
      <statement>
        <p>
          Are these 3 boolean expressions equivalent? 1. <c>!(x == 0 || x &gt;=
          1)</c> , 2. <c>!(x == 0) &amp;&amp; !(x &gt;= 1)</c> , 3. <c>(x != 0)
          &amp;&amp; (x &lt; 1)</c>
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class EquivalentExpressions
{
    public static void main(String[] args)
    {
        int x = -1; // try with x = -1, x = 0, and x = 1
        System.out.println(!(x == 0 || x &gt;= 1));
        // add print statements for expressions in #2 and #3
        // to see if they are equivalent when x = -1, 0, and 1.

    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class EquivalentExpressions { public static void main(String[] args) { int"
                    + " x = -1;  System.out.println(!(x == 0 || x &gt;= 1));   } }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testAddedCode()
    {
        boolean output2 = checkCodeContains("(x != 0) &amp;&amp; (x &lt; 1)");
        assertTrue(output2);
    }

    @Test
    public void testAddedCode2()
    {
        boolean output3 = checkCodeContains("!(x == 0) &amp;&amp; !(x &gt;= 1)");
        assertTrue(output3);
    }
}
        </tests>
      </program>
    </project>

    <activity label="qcbdm1">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
!(x &gt; 2 &amp;&amp; y &lt; 4)
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>(x &lt; 2) || (y &gt; 4)</p>
          </statement>

          <feedback>
            <p>The negation of x &gt; 2 is x &lt;= 2</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &lt; 2) &amp;&amp; (y &gt; 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the "and" is changed to an "or"</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>(x &lt;= 2) || (y &gt;= 4)</p>
          </statement>

          <feedback>
            <p>
              The x &gt; 2 becomes x &lt;= 2, the y &lt; 4 becomes y &gt;= 4 and
              the and changes to or
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &lt;= 2) &amp;&amp; (y &gt;= 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the "and" is changed to an "or"</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbdm2">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
!(x == 2 &amp;&amp; y &gt; 4)
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>(x != 2) || (y &lt; 4)</p>
          </statement>

          <feedback>
            <p>The negation of y &gt; 4 is y &lt;= 4</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x != 2) &amp;&amp; (y &lt; 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the and is changed to an or</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x != 2) &amp;&amp; (y &lt;= 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the and is changed to an or</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>(x != 2) || (y &lt;= 4)</p>
          </statement>

          <feedback>
            <p>
              The and is changed to an or, the (x == 2) becomes (x != 2) and (y
              &gt; 4) becomes (y &lt;= 4)
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbdm3">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
!(x!=5 &amp;&amp; y!=7)
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>(x == 5) || (y == 7)</p>
          </statement>

          <feedback>
            <p>The negation of &amp;&amp; is || and the negation of != is ==</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x == 5) &amp;&amp; (y == 7)</p>
          </statement>

          <feedback>
            <p>The negation of &amp;&amp; is ||</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x != 5) || (y != 7)</p>
          </statement>

          <feedback>
            <p>
              The negation of x != 5 is x == 5. The negation of y != 7 is y ==
              7.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &lt; 5) || (x &gt; 5) || (y &gt; 7) || (y &lt; 7)</p>
          </statement>

          <feedback>
            <p>
              The negation of == is != which is the same as &lt; or &gt;. The
              negation of != is ==.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbdm4">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
!(x&lt;= 5 &amp;&amp; y &gt; 7)
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>(x &gt; 5) &amp;&amp; (y &lt; 7)</p>
          </statement>

          <feedback>
            <p>The negation of &amp;&amp; is || and the negation of y &gt; 7 is y &lt;= 7.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &gt; 5) || (y &lt; 7)</p>
          </statement>

          <feedback>
            <p>The negation of y &gt; 7 is y &lt;= 7.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &gt; 5) &amp;&amp; (y &lt;= 7)</p>
          </statement>

          <feedback>
            <p>The negation of &amp;&amp; is ||.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>(x &gt; 5) || (y &lt;= 7)</p>
          </statement>

          <feedback>
            <p>
              The negation of (x &lt;= 5) is (x &gt; 5). The negation of
              &amp;&amp; is ||. The negation of (y &gt; 7) is (y &lt;= 7).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      <term>String Equality</term>: What will the following code print out?
      Trace through the code by drawing diagrams of what is going on in memory
      like the figures above, and then show the values of s1, s2, s3, s4 and the
      output after each line of code. Remember that you can use trace tables to
      track the values of variables as they change throughout a program. To
      trace through code, write down a variable in each column in a table and
      keep track of its value throughout the program as you go through it line
      by line.
    </p>

    <program language="java">
      <code>
String s1 = null;
String s2 = new String("hi");
String s3 = new String("hi");
String s4 = new String("bye");
if (s1 == null)
{
    s1 = s2;
}
if (s1 == s2)
{
    System.out.println("s1 and s2 refer to the same object");
}
if (s2 == s3)
{
    System.out.println("s2 and s3 refer to the same object");
}
if (s3 == s4)
{
    System.out.println("s3 and s4 refer to the same object");
}
if (s1.equals(s2) &amp;&amp; s2.equals(s3))
{
    System.out.println("s1, s2, s3 are equal");
}
      </code>
    </program>

    <project label="challengetracingStrings">
      <statement>
        <p>
          Write your tracing table here that keeps track of s1, s2, s3, s4 and
          the output.
        </p>
      </statement>

      <response />
    </project>
  </subsection>

  <subsection xml:id="summary-23">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 2.6.A.1) Two Boolean expressions are equivalent if they evaluate
            to the same value in all cases. Truth tables can be used to prove
            Boolean expressions are equivalent.
          </p>
        </li>

        <li>
          <p>
            (AP 2.6.A.2) De Morgan’s Laws can be applied to Boolean expressions
            to create equivalent ones:
          </p>

          <p>
            <ul>
              <li>
                <p>
                  <c>!(a &amp;&amp; b)</c> is equivalent to <c>!a || !b</c>
                </p>
              </li>

              <li>
                <p>
                  <c>!(a || b)</c> is equivalent to <c>!a &amp;&amp; !b</c>
                </p>
              </li>
            </ul>
          </p>
        </li>

        <li>
          <p>
            A negated expression with a relational operator can be simplified by
            flipping the relational operator to its opposite sign.
          </p>

          <p>
            <ul>
              <li>
                <p>
                  <c>!(c == d)</c> is equivalent to <c>c != d</c>
                </p>
              </li>

              <li>
                <p>
                  <c>!(c != d)</c> is equivalent to <c>c == d</c>
                </p>
              </li>

              <li>
                <p>
                  <c>!(c &lt; d)</c> is equivalent to <c>c &gt;= d</c>
                </p>
              </li>

              <li>
                <p>
                  <c>!(c &gt; d)</c> is equivalent to <c>c &lt;= d</c>
                </p>
              </li>

              <li>
                <p>
                  <c>!(c &lt;= d)</c> is equivalent to <c>c &gt; d</c>
                </p>
              </li>

              <li>
                <p>
                  <c>!(c &gt;= d)</c> is equivalent to <c>c &lt; d</c>
                </p>
              </li>
            </ul>
          </p>
        </li>

        <li>
          <p>
            (AP 2.6.B.1) Two different variables can hold references to the same
            object. Object references can be compared using <c>==</c> and
            <c>!=</c>. (Two object references are considered
            <term>aliases</term> when they both reference the same object.)
          </p>
        </li>

        <li>
          <p>
            (AP 2.6.B.2) An object reference can be compared with <c>null</c>,
            using <c>==</c> or <c>!=</c>, to determine if the reference actually
            references an object.
          </p>
        </li>

        <li>
          <p>
            (AP 2.6.B.3) Classes often define their own equals method, which can
            be used to specify the criteria for equivalency for two objects of
            the class. The equivalency of two objects is most often determined
            using attributes from the two objects.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-16">
    <title>AP Practice</title>
    <activity label="apcsa-sample5">
      <statement>
        <p>
          Which of the following best describes the value of the Boolean
          expression: a &amp;&amp; !(b || a)
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>The value is always true.</p>
          </statement>

          <feedback>
            <p>
              Try simplifying !(b ||a) or consider what happens if a and b are
              true.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>The value is always false.</p>
          </statement>

          <feedback>
            <p>
              Yes, a &amp;&amp; !(b || a) = a &amp;&amp; !b &amp;&amp; !a. Since
              (a &amp;&amp; !a) can never be true, the result will always be
              false.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              The value is true when a has the value false, and is false
              otherwise.
            </p>
          </statement>

          <feedback>
            <p>Try the expression with a = false. Is the result true?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              The value is true when b has the value false, and is false
              otherwise.
            </p>
          </statement>

          <feedback>
            <p>
              Try the expression with b = false with a = true and then try it
              with a = false. Is the result ever true?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              The value is true when either a or b has the value true, and is
              false otherwise.
            </p>
          </statement>

          <feedback>
            <p>Try the expression with a = true. Is the result true?</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-string-equality">
      <statement>
        <p>Consider the following code segment.</p>
        <program language="java">
          <code>
String message = new String("AP Practice");
String note = new String("AP Practice");
String memo = new String("memo");
int i = 5;

if (message.equals(note) &amp;&amp; !message.equals("memo"))
{
    message = note;

    if (message == note &amp;&amp; message.length() &gt; i)
    {
       i = 3;
       memo = message.substring(i);
    }
}
          </code>
        </program>

        <p>
          Which of the following expressions evaluate to <c>true</c> after the
          code segment above executes?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="AP-string-equality_opt_a">
            <p>message == note &amp;&amp; message == memo</p>
          </statement>

          <feedback id="AP-string-equality_opt_a">
            <p>Message does not refer to the same object as memo.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-string-equality_opt_b">
            <p>message.equals(note) &amp;&amp; message.equals(memo)</p>
          </statement>

          <feedback id="AP-string-equality_opt_b">
            <p>Message is not the same string as in memo.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-string-equality_opt_c">
            <p>message == note &amp;&amp; memo.equals(“Practice”)</p>
          </statement>

          <feedback id="AP-string-equality_opt_c">
            <p>
              Yes, both if statements in the code above execute changing message
              to equal note and memo to equal “Practice”.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-string-equality_opt_d">
            <p>message != note || message == memo</p>
          </statement>

          <feedback id="AP-string-equality_opt_d">
            <p>Both of these are false.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-string-equality_opt_e">
            <p>message.equals(memo) || memo.equals(note)</p>
          </statement>

          <feedback id="AP-string-equality_opt_e">
            <p>Both of these are false.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
