<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-2-2-booleans">
  <title>Where do booleans come from?</title>
  <idx>boolean</idx>
  <idx>boolean expression</idx>
  <idx>relational operator</idx>
  <idx>remainder operator</idx>
  <idx>boolean</idx>
  <idx>&lt;</idx>
  <idx>&gt;</idx>
  <idx>==</idx>
  <idx>!=</idx>
  <introduction>
    <p>
      In the previous section we discussed the different ways we could combine
      <c>if</c> statements to to make one-way, two-way, and multiway selection
      constructs. But in most of the examples we just assumed we had some
      <c>boolean</c> variable already set up to use in the conditions of our
      <c>if</c> statements.
    </p>

    <p>
      But most of the logic that goes into making interesting algorithms comes
      from how we actually compute those <c>boolean</c> values that we use in
      <c>if</c> statements.
    </p>

    <p>
      In this section we’ll look at the operators we can use to produce
      <c>boolean</c> values that don’t come from the literal <c>boolean</c>
      values we mentioned in the previous lesson. There are operators that
      produce <c>boolean</c> values from non-boolean values like <c>int</c> and
      <c>double</c> values and operators that we can use to combine
      <c>boolean</c> values to produce new <c>boolean</c> values.
    </p>
  </introduction>

  <subsection xml:id="relational-operators">
    <title>Relational Operators (&lt;, &gt;)</title>
    <p>
      In <xref ref="arithmetic-expressions" /> we learned about arithmetic
      operators like <c>+</c> and <c>*</c> that operate on numeric values to
      produce other numeric values. Now we need to learn about <term>relational
      operators</term> that operate on numbers but produce <c>boolean</c>
      values. They are called “relational” because they test various
      relationships between numbers: is one number bigger than the other. Or
      smaller.
    </p>

    <p>
      below are used to compare numeric values or arithmetic expressions.
      Although some programming languages allow using relational operators like
      <c>&lt;</c> to compare strings, Java only uses these operators for
      numbers, and uses the methods <c>compareTo</c> and <c>equals</c> for
      comparing <c>String</c> values.
    </p>

    <p>
      <ul>
        <li>
          <p><c>&lt;</c> Less Than</p>
        </li>

        <li>
          <p><c>&gt;</c> Greater Than</p>
        </li>

        <li>
          <p><c>&lt;=</c> Less than or equal to</p>
        </li>

        <li>
          <p><c>&gt;=</c> Greater than or equal to</p>
        </li>

        <li>
          <p><c>==</c> Equals</p>
        </li>

        <li>
          <p><c>!=</c> Does not equal</p>
        </li>
      </ul>
    </p>

    <p>
      If you have trouble telling <c>&lt;</c> and <c>&gt;</c> apart, think of
      <c>&lt;</c> and <c>&gt;</c> as arrows where the pointy end should point to
      the smaller value. If <c>&lt;</c> (less than) points towards a smaller
      number on the left, then it evaluates to <c>true</c>. On the other hand a
      <c>&gt;</c> (greater than) expression will be <c>true</c> only if the
      smaller number is on the right hand side. Or maybe you prefer the “hungry
      alligator” mnemonic beloved by elementary school teachers—think of
      <c>&lt;</c> and <c>&gt;</c> as the mouths of hungry alligators which
      always want to eat the bigger number; a <c>&lt;</c> or <c>&gt;</c>
      expression is only <c>true</c> if the alligator is in fact about to eat
      the bigger number.
    </p>

    <p>
      To remember the correct order of the two characters in <c>&lt;=</c> and
      <c>&gt;=</c>, just write them in the same order you would say them in
      English: “less than or equal to” not “equal to or less than”.
    </p>

    <activity label="bool2">
      <statement>
        <p>
          Try to guess what the code below will print out before you run it.
          Then, set year to 15 and print the boolean expression for whether age
          is less than or equal to year.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class BoolTest2
{
    public static void main(String[] args)
    {
        int age = 15;
        int year = 14;
        // Will these print true or false?
        System.out.println(age &lt; year);
        System.out.println(age &gt; year);
        // 1. Set year to 15
        // 2. Print whether age is less than or equal to year

    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "false\ntrue\ntrue\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
     @Test
     public void test1()
     {
         String code ="&lt;=";
         boolean passed = checkCodeContains(code);
         assertTrue(passed);
     }
}
        </tests>
      </program>
    </activity>

    <p>
      <term>Boolean</term> variables or expressions have <term>true</term> or
      <term>false</term> values. Relational operators can be used to compare two
      variables or compare a variable against a constant value or expression.
      For example, the following Boolean expressions can be used to see whether
      a number is positive or negative by seeing if it is greater than 0 or less
      than 0:
    </p>

    <program language="java">
      <code>
// Test if a number is positive
(number &gt; 0)
//Test if a number is negative
(number &lt; 0)
      </code>
    </program>

    <activity label="BooleanExps">
      <statement>
        <p>
          Drag the boolean expression from the left and drop it on what it is
          testing on the right. Click the "Check Me" button to see if you are
          correct.
        </p>
      </statement>

      <feedback>
        <p>Review the relational operators above.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">x &gt; 0</premise>
          <response>x is positive</response>
        </match>

        <match>
          <premise order="2">x == y</premise>
          <response>x equals y</response>
        </match>

        <match>
          <premise order="3">x &lt; 0</premise>
          <response>x is negative</response>
        </match>

        <match>
          <premise order="4">x != y</premise>
          <response>x does not equal y</response>
        </match>

        <match>
          <premise order="5">x &lt; y</premise>
          <response>x is less than y</response>
        </match>

        <match>
          <premise order="6">x &gt; y</premise>
          <response>x is greater than y</response>
        </match>

        <match>
          <premise order="7">x &gt;= y</premise>
          <response>x is greater than or equal to y</response>
        </match>
      </cardsort>
    </activity>
  </subsection>

  <subsection xml:id="testing-equality-index-0">
    <title>Testing Equality (==)</title>
    <p>
      The relational operators <c>==</c> and <c>!=</c> (not equal) can be used
      to compare values. They return true or false boolean values.
    </p>

    <note>
      <p>
        One <c>=</c> sign changes the value of a variable. Two <c>==</c> equal
        signs are used to test if a variable holds a certain value, without
        changing its value!
      </p>
    </note>

    <p>
      The following code shows how <c>==</c> is used with primitive types like
      <c>int</c>.
    </p>

    <activity label="bool1">
      <statement>
        <p>
          What will the code below print out? Try to guess before you run it!
          Note that 1 equal sign (<c>=</c>) is used for assigning a value and 2
          equal signs (<c>==</c>) for testing values. Then, add 3 more lines of
          code that sets year to 15 and prints out whether age is equal to year
          and whether age is not equal to year.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class BoolTest1
{
    public static void main(String[] args)
    {
        int age = 15;
        int year = 14;
        // Will this print true or false?
        System.out.println(age == year);
        // Will this print true or false?
        System.out.println(age != year);

        // 1. Add code that sets year to 15
        // 2. Print out whether age equals year
        // 3. Print out whether age does not equal year

    }
}
        </code>
        <tests>
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "false\ntrue\ntrue\nfalse\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="testing-with-remainder">
    <title>Testing with remainder (%)</title>
    <p>
      The remainder operator (%) is very useful in coding. The following Boolean
      expressions can be used to test whether a number is even or odd by seeing
      if there is a remainder when it is divided by 2 or if it is divisible by
      another number:
    </p>

    <program language="java">
      <code>
//Test if a number is even by seeing if the remainder is 0 when divided by 2
(number % 2 == 0)
//Test if a number is odd by seeing if there is a remainder when divided by 2
(number % 2 != 0)
//Test if a number is a multiple of x (or divisible by x with no remainder)
(number % x == 0)
      </code>
    </program>

    <activity label="boolRem">
      <statement>
        <p>
          Try the expressions containing the % operator below to see how they
          can be used to check for even or odd numbers. All even numbers are
          divisible (with no remainder) by 2. Then, add another expression that
          tests to see if age1 is divisible by 3.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class BoolRem
{
    public static void main(String[] args)
    {
        int age1 = 15;
        int age2 = 16;

        System.out.println("Remainder of " + age1 + "/2 is " + (age1 % 2));
        System.out.println("Remainder of " + age2 + "/2 is " + (age2 % 2));
        System.out.println("Is " + age1 + " even? " + (age1 % 2 == 0));
        System.out.println("Is " + age2 + " even? " + (age2 % 2 == 0));

        // Add a line that prints out whether age1 is divisible by 3

    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect =
                "Remainder of 15/2 is 1\n"
                    + "Remainder of 16/2 is 0\n"
                    + "Is 15 even? false \n"
                    + "Is 16 even? true\ntrue\n";
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
    @Test
    public void testBool() throws IOException
    {
        String target = "age1 % 3 == 0";
        boolean passed = checkCodeContains("boolean check for divisibility by 3", target);
        assertTrue(passed);
    }

}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        A warning: because Java’s <c>%</c> is a remainder operator and not a
        true mathematical modulo operator, you can’t check if a number is odd
        with the expression <c>num % 2 == 1</c>.
      </p>

      <p>
        That expression will be <c>true</c> if <c>num</c> is positive and odd
        and <c>false</c> when <c>num</c> is even, both of which are correct. But
        if <c>num</c> is negative and odd, its remainder when divided by 2 is
        -1, not 1 and this expression will evaluate to <c>false</c>. Thus you
        should always use <c>num % 2 != 0</c> to check if <c>num</c> is odd.
      </p>
    </note>
  </subsection>

  <subsection xml:id="and-or-and-not-index-0">
    <title>And (&amp;&amp;), Or (||), and Not (!)</title>
    <p>
      What if you want two things to be true before the body of the conditional
      is executed? Use <c>&amp;&amp;</c> as a logical <term>and</term> to join
      two Boolean expressions and the body of the condition will only be
      executed only if both are true.
    </p>

    <activity label="compoundAnd">
      <statement>
        <p>
          What if you want to go out and your parents say you can go out if you
          clean your room and do your homework? Run the code below and try
          different values for <c>cleanedRoom</c> and <c>didHomework</c> and see
          what they have to be for it to print <c>You can go out</c>.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        boolean cleanedRoom = true;
        boolean didHomework = false;
        if (cleanedRoom &amp;&amp; didHomework)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("No, you can't go out");
        }
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test1 { public static void main(String[] args){ boolean cleanedRoom ="
                    + " true; boolean didHomework = false; if (cleanedRoom &amp;&amp; didHomework){"
                    + " System.out.println(\"You can go out\");} else { System.out.println(\"No,"
                    + " you can't go out\");}}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "You can go out";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      What if it is okay if only one of two things is true? Use <c>||</c> as a
      logical <term>or</term> to join two Boolean expressions and the body of
      the condition will be executed if one or both are true.
    </p>

    <activity label="compoundOr">
      <statement>
        <p>
          For example, your parents might say you can go out if you can walk or
          they don’t need the car. Try different values for <c>walking</c> and
          <c>carIsAvailable</c> and see what the values have to be to print
          <c>You can go out</c>.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test2
{
    public static void main(String[] args)
    {
        boolean walking = false;
        boolean carIsAvailable = false;
        if (walking || carIsAvailable)
        {
            System.out.println("You can go out");
        }
        else
        {
            System.out.println("No, you can't go out");
        }
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class Test2 { public static void main(String[] args){ boolean walking ="
                    + " false; boolean carIsAvailable = false; if (walking || carIsAvailable) {"
                    + " System.out.println(\"You can go out\"); } else{System.out.println(\"No, you"
                    + " can't go out\"); }}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testMain()
    {
        String output = getMethodOutput("main");
        String expect = "You can go out";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        In English, we often use an exclusive-or like in the sentence “do you
        want to be player 1 <em>or</em> player 2?” where you can’t be both
        player 1 and player 2. In programming, the or-operator is an
        inclusive-or which means that the whole expression is true if either one
        or the other or <em>both</em> conditions are true.
      </p>
    </note>

    <p>
      With numerical values, the <term>or</term> (||) operator is often used to
      check for error conditions on different ends of the number line, while the
      <term>and</term> (&amp;&amp;) operator is often used to see if a number is
      in an range.
    </p>

    <activity label="compound-number-range">
      <statement>
        <p>
          Explore how &amp;&amp; and || are used with numbers below. Try
          different values for score like -10 and 110 in the code below.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class TestNum
{
    public static void main(String[] args)
    {
        int score = 10; // Try -10 and 110
        if (score &lt; 0 || score &gt; 100)
        {
            System.out.println("Score has an illegal value.");
        }
        if (score &gt;= 0 &amp;&amp; score &lt;= 100)
        {
            System.out.println("Score is in the range 0-100");
        }
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class TestNum{public static void main(String[] args){int score = 10;  if"
                    + " (score &lt; 0 || score &gt; 100){ System.out.println(\"Score has an illegal"
                    + " value.\");}if (score &gt;= 0 &amp;&amp; score &lt;= 100){ System.out.println(\"Score is"
                    + " in the range 0-100\");}}}";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      The <term>not</term> (<c>!</c>) operator can be used to negate a boolean
      value. We’ve seen <c>!</c> before in <c>!=</c> (not equal). If you use
      <c>!</c> in expressions with <c>&amp;&amp;</c> and <c>||</c>, be careful
      because the results are often the opposite of what you think it will be at
      first. We’ll see examples of this in the next lesson.
    </p>

    <activity label="not-operator">
      <statement>
        <p>
          The code below says if homework is not done, you can’t go out. Try
          different values for <c>homeworkDone</c>.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class TestNot
{
    public static void main(String[] args)
    {
        boolean homeworkDone = false;
        if (!homeworkDone)
        {
            System.out.println("Sorry, you can't go out!");
        }
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class TestNot{public static void main(String[] args){ boolean homeworkDone"
                    + " = false; if (!homeworkDone) { System.out.println(\"Sorry, you can't go"
                    + " out!\"); } } }";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }
}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        In Java, ! will be executed before &amp;&amp;, and &amp;&amp; will be
        executed before ||, unless there are parentheses. Anything inside
        parentheses is executed first.
      </p>
    </note>
  </subsection>

  <subsection xml:id="short-circuit-evaluation">
    <title>Short Circuit Evaluation</title>
    <idx>short circuit evaluation</idx>
    <idx>
      <h>conditional</h><h>short circuit evaluation</h>
    </idx>

    <p>
      Both <c>&amp;&amp;</c> and <c>||</c> use <term>short circuit
      evaluation</term>. That means that the second expression (on the right of
      the operator) isn’t necessarily checked, if the result from the first
      expression is enough to tell if the compound boolean expression is true or
      false:
    </p>

    <p>
      <ul>
        <li>
          <p>
            If two boolean values/expressions are combined with a logical
            <term>or</term> (<c>||</c>) and the first expression is <c>true</c>,
            then the second expression won’t be executed, since only one needs
            to be <c>true</c> for the result to be <c>true</c>.
          </p>
        </li>

        <li>
          <p>
            If two boolean values/expressions are combined with a logical
            <term>and</term> (<c>&amp;&amp;</c>) and the first expression is
            <c>false</c>, then the second expression won’t be executed. If the
            first expression is <c>false</c>, the result will be <c>false</c>,
            since both sides of the <c>&amp;&amp;</c> need to be <c>true</c> for
            the result to be <c>true</c>.
          </p>
        </li>
      </ul>
    </p>

    <activity label="shortCircuit1">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          0 and y to 3?
        </p>

        <program language="java">
          <code>
if (x &gt; 0 &amp;&amp; (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              first case will only print if x is greater than 0 and it is not.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              second case will print if x is less than or equal to zero or if y
              divided by x is not equal to 3.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>You will get a error because you can't divide by zero.</p>
          </statement>

          <feedback>
            <p>
              Since the first condition is false when x is equal to zero the
              second condition won't execute. Execution moves to the else.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="shortCircuit2">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          zero and y is set to 3?
        </p>

        <program language="java">
          <code>
if (x == 0 || (y / x) == 3)
{
   System.out.println("first case");
}
else
{
   System.out.println("second case");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              Since x is equal to zero the first expression in the complex
              conditional will be true and the (y / x) == 3 won't be evaluated,
              so it won't cause a divide by zero error. It will print "first
              case".
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              Since x is equal to zero the first part of the complex conditional
              is true so it will print first case.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>You will get a error because you can't divide by zero.</p>
          </statement>

          <feedback>
            <p>
              You won't get an error because of short circuit evaluation. The (y
              / x) == 3 won't be evaluated since the first expression is true
              and an or is used.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>Boolean practice</title>
    <activity label="if-relational">
      <statement>
        <p>
          Run the following active code a couple times until you see all the
          possible outputs. It prints out whether a random number is positive or
          equal to 0. Add another if statement that tests if it is a negative
          number.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class TestNumbers
{
    public static void main(String[] args)
    {
        // Get a random number from -10 up to 10.
        int number = (int) (Math.random() * 21) - 10;
        System.out.println("The number is " + number);

        // is it positive?
        if (number &gt; 0)
        {
            System.out.println(number + " is positive!");
        }
        // is it 0?
        if (number == 0)
        {
            System.out.println(number + " is zero!");
        }
        // is it negative?
        // Add another if statement

    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.Test;

import java.io.*;
import java.util.regex.MatchResult;
import java.util.regex.Pattern;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testPositive()
    {
        String output = "";
        int num = -999, count = 0;

        while (num &lt;= 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is positive!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is positive!";

        boolean passed = output.contains("positive");
        getResults(expect, output, "Testing positive numbers", passed);
        assertTrue(passed);
    }

    @Test
    public void testZero()
    {
        String output = "";
        int num = -999, count = 0;

        while (num != 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is zero!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is zero!";

        boolean passed = output.contains("zero");
        getResults(expect, output, "Testing zero", passed);
        assertTrue(passed);
    }

    @Test
    public void testNegative()
    {
        String output = "";
        int num = 999, count = 0;

        while (num &gt;= 0 &amp;&amp; count &lt; 50)
        {
            output = getMethodOutput("main");
            num = getNumber(output);
            count++;

            if (num == 9999999)
            {
                getResults(
                        "The number is ##\n## is negative!",
                        output,
                        "Did you forget to print the number?",
                        false);
                assertTrue(false);
                return;
            }
        }

        String expect = "The number is " + num + "\n" + num + " is negative!";

        boolean passed = output.contains("negative");
        getResults(expect, output, "Testing negative numbers", passed);
        assertTrue(passed);
    }

    private int getNumber(String output)
    {
        String regex = "[0-9]+";

        String[] matches =
                Pattern.compile(regex)
                        .matcher(output)
                        .results()
                        .map(MatchResult::group)
                        .toArray(String[]::new);

        int num = 9999999;

        if (matches.length &gt; 0)
        {
            num = Integer.parseInt(matches[0]);
        }

        if (output.contains("-"))
        {
            num *= -1;
        }

        return num;
    }
}
        </tests>
      </program>
    </activity>

    <activity label="mcq-if-trace">
      <statement>
        <p>
          Consider the following code segment. What is printed as a result of
          executing the code segment?
        </p>

        <program language="java">
          <code>
int x = 3;
if (x &gt; 2)
{
   x = x * 2;
}
if (x &gt; 4)
{
   x = 0;
}
System.out.print(x);
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>3</p>
          </statement>

          <feedback>
            <p>x is changed by the if statements.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>6</p>
          </statement>

          <feedback>
            <p>
              What happens when x is greater than 2 and then greater than 4? Do
              both if statements.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>0</p>
          </statement>

          <feedback>
            <p>
              If x is greater than 2, it's always doubled, and then that result
              is always greater than 4, so it's set to 0 in the second if
              statement.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>4</p>
          </statement>

          <feedback>
            <p>x is changed by the if statements.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>The code will not compile</p>
          </statement>

          <feedback>
            <p>This code will compile.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
<!-- just dropped this here for now. Used to be in topic-2-3 -->
    <activity label="licenseifelse">
      <statement>
        <p>
          Run the following code to see what it prints out when the variable age
          is set to the value 16. Change the variable age’s value to 15 and then
          run it again to see the result of the print statement in the else
          part. Can you change the if-statement to indicate that you can get a
          license at age 15 instead of 16? Use 2 test cases for the value of age
          to test your code to see the results of both print statements.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class DriversLicenseTest
{
    public static void main(String[] args)
    {
        int age = 16;
        if (age &gt;= 16)
        {
            System.out.println("You can get a driver's license in most states!");
        }
        else
        {
            System.out.println(
                    "Sorry, you need to be older to get a driver's license.");
        }
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testCodeContains() throws IOException
    {
        String target = "age &gt;= 15";
        boolean passed = checkCodeContains("check age &gt;= 15", target);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="ifelseevenOdd" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following program should print out “x is even” if the remainder of
          x divided by 2 is 0 and “x is odd” otherwise, but the code is mixed
          up. Drag the blocks from the left and place them in the correct order
          on the right. Click on Check Me to see if you are right.
        </p>
      </statement>

      <blocks>
        <block order="5">
          <cline>public class EvenOrOdd {</cline>
        </block>

        <block order="4">
          <cline>    public static void main(String[] args) {</cline>
        </block>

        <block order="6">
          <cline>        int x = 92;</cline>
        </block>

        <block order="1">
          <cline>        if (x % 2 == 0) {</cline>
        </block>

        <block order="2">
          <cline>            System.out.println("x is even");</cline>
        </block>

        <block order="8">
          <cline>        } else {</cline>
        </block>

        <block order="7">
          <cline>            System.out.println("x is odd");</cline>
        </block>

        <block order="3">
          <cline>        }</cline>
          <cline>    }</cline>
          <cline>}</cline>
        </block>
      </blocks>
    </activity>

    <activity label="scoreifelse">
      <title>Add an else</title>
      <statement>
        <p>
          Try the following code. Add an else statement to the if statement that
          prints out “Good job!” if the score is greater than 9. Change the
          value of score to test it. Can you change the boolean test to only
          print out “Good job” if the score is greater than 20?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class ScoreTest
{
    public static void main(String[] args)
    {
        int score = 8;
        if (score &lt;= 9)
        {
            System.out.println("Try for a higher score!");
        }
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testChangedCode()
    {
        String origCode =
                "public class ScoreTest   {      public static void main(String[] args)      {     "
                    + "   int score = 8;        if (score &lt;= 9)         {           "
                    + " System.out.println(\"Try for a higher score!\");        }      }} ";

        boolean changed = codeChanged(origCode);
        assertTrue(changed);
    }

    @Test
    public void testCodeContainsElse()
    {
        boolean ifCheck2 = checkCodeContains("else", "else");
        assertTrue(ifCheck2);
    }

    @Test
    public void testCodeContains20()
    {
        String target1 = removeSpaces("score &lt;= 20");
        String target2 = removeSpaces("score &gt; 20");

        String code = removeSpaces(getCode());

        boolean passed = code.contains(target1) || code.contains(target2);
        getResults("true", "" + passed, "Checking for score &lt;= 20 or score &gt; 20", passed);
        assertTrue(passed);
    }

    @Test
    public void testCodeChange1() throws Exception
    {
        String className = "Test1";

        String program = getCode();
        program = program.replace("ScoreTest", className).replace("public class", "class");
        program = program.replaceAll("= *[0-9]+;", "= 25;");

        String output = getMethodOutputChangedCode(program, className, "main");

        String expected = "Good job!";
        boolean passed = output.contains(expected);
        getResults(expected, output, "Checking output if score is 25", passed);
        assertTrue(passed);
    }

    @Test
    public void testCodeChange2() throws Exception
    {
        String className2 = "Test2";

        String program2 = getCode();
        program2 = program2.replace("ScoreTest", className2).replace("public class", "class");
        program2 = program2.replaceAll("= *[0-9]+;", "= 5;");

        String output2 = getMethodOutputChangedCode(program2, className2, "main");

        String expected2 = "Try for a higher score!";
        boolean passed2 = output2.contains(expected2);
        getResults(expected2, output2, "Checking output if score is 5", passed2);
        assertTrue(passed2);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-prime-numbers-pogil">
    <title>Coding Challenge : Prime Numbers POGIL</title>
    <p>
      We encourage you to do this activity as a <url
      href="https://pogil.org/about-pogil/what-is-pogil"
      visual="https://pogil.org/about-pogil/what-is-pogil">POGIL</url> (Process
      Oriented Guided Inquiry Learning) group activity or using Think-Pair-Share
      collaboration. POGIL groups are self-managed teams of 4 students where
      everyone has a <url
      href="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing">POGIL
      role</url> and works together to solve the problems, making sure that
      everyone in the team participates and learns.
    </p>

    <p>
      In this activity, you will write a Java program that uses boolean
      expressions to determine if a number is prime. A prime number is an
      integer number that is only divisible by 1 and itself. For example, 3 is a
      prime number because it’s only divisible by 1 and 3 and no other numbers,
      but 4 is not a prime number because it’s divisible by 2 as well as 1 and
      4. You will write methods that test whether a number is positive,
      negative, odd, even, and divisible by another number. You will then
      experiment with these methods to determine if the numbers 5, 6, and 7 are
      prime. And to ask questions about prime numbers like whether all odd
      numbers are prime.
    </p>

    <project label="challenge-primeNumbers">
      <statement>
        <p>
          Complete the methods below to determine if a number is positive,
          negative, odd, even, or divisible by another number by returning
          boolean expressions testing the argument number. Then, experiment with
          these methods to determine if the numbers 5, 6, and 7 are prime.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class PrimeNumbers
{
    // isPositive checks whether number is greater than 0
    public static boolean isPositive(int number)
    {
        return (number &gt; 0);
    }

    public static boolean isNegative(int number)
    {
        // 1. Replace true with an expression that checks
        //    whether number is negative
        return true;
    }

    // isOdd checks whether number divided by 2
    // has a remainder.
    public static boolean isOdd(int number)
    {
        return (number % 2 != 0);
    }

    public static boolean isEven(int number)
    {
        // 2. Replace true with an expression that checks
        //    whether number is divisible by 2
        return true;
    }

    public static boolean isDivisible(int number, int divisor)
    {
        // 3. Replace true with an expression that checks
        //    whether number is divisible by divisor
        return true;
    }

    public static void main(String[] args)
    {
        // 4. Change number to experiment
        int number = 5;
        System.out.println("A prime number is only divisible by 1 and itself.");
        System.out.println(number + " is negative? " + isNegative(number));
        System.out.println(number + " is even? " + isEven(number));

        System.out.println("Divisible by 1? " + isDivisible(number,1) );
        System.out.println("Divisible by 2? " + isDivisible(number,2) );
        System.out.println("Divisible by 3? " + isDivisible(number,3) );
        System.out.println("Divisible by 4? " + isDivisible(number,4) );
        System.out.println("Divisible by 5? " + isDivisible(number,5) );

        // 5. Add 2 print statements with calls to isDivisible to check
        //    whether number is divisible by 6 and 7.

    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
     @Test
     public void testBool1() throws IOException
     {
          String target = "number &lt; 0";
          boolean passed = checkCodeContains("boolean expression for isNegative", target);
          assertTrue(passed);
     }
   @Test
   public void testBool2() throws IOException
   {
       String target = "number % 2 == 0";
       boolean passed = checkCodeContains("boolean expression for isEven", target);
       assertTrue(passed);
   }

   @Test
   public void testBool3() throws IOException
   {
       String target = "number % divisor == 0";
       boolean passed = checkCodeContains("boolean expression for isDivisible", target);
       assertTrue(passed);
   }
   @Test
   public void testCall() throws IOException
   {
       String target = "isDivisible(number,7)";
       boolean passed = checkCodeContains("method call in main to isDivisible to see whether number is divisible by 7", target);
       assertTrue(passed);
   }
}
        </tests>
      </program>
    </project>

    <p>
      With your POGIL group, use the code you completed above to experiment to
      see if 5, 6, and 7 are prime. Answer the following questions:
    </p>

    <activity label="prime1">
      <statement>
        <p>Is 5 prime?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Yes, 5 is prime.</p>
          </statement>

          <feedback>
            <p>5 is only divisible by 1 and 5, so it is prime.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>No, 5 is not prime.</p>
          </statement>

          <feedback>
            <p>5 is only divisible by 1 and 5.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="prime2">
      <statement>
        <p>Is 6 prime?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Yes, 6 is prime.</p>
          </statement>

          <feedback>
            <p>
              A prime number is only divisible by 1 and itself. 6 is divisible
              by 1, 2, 3, and 6.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>No, 6 is not prime.</p>
          </statement>

          <feedback>
            <p>6 is divisible by 1, 2, 3, and 6, so it is not prime.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="prime3">
      <statement>
        <p>Is 7 prime?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Yes, 7 is prime.</p>
          </statement>

          <feedback>
            <p>7 is only divisible by 1 and 7, so it is prime.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>No, 7 is not prime.</p>
          </statement>

          <feedback>
            <p>7 is only divisible by 1 and 7.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="prime4">
      <statement>
        <p>
          Are all odd numbers prime? Can you find an odd number that is not
          prime by using your code above? What is the smallest odd number that
          is not prime and has divisors other than 1 and itself?
        </p>

        <p>
          <fillin answer="9" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>Yes, 9 is not prime because it is divisible by 3.</p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Try numbers 3-10 in your code.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <activity label="prime5">
      <statement>
        <p>
          Are all even numbers not prime? Can you find an even prime number
          using your code above? What is the smallest even number that is prime?
        </p>

        <p>
          <fillin answer="2" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>Yes, 2 is prime because it is only divisible by 1 and 2.</p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Try numbers 2-10 in your code.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <p>
      Prime numbers are very useful in encryption algorithms because they can be
      used as keys for encoding and decoding. If you have the key, you can use
      it to divide a large number that represents something encrypted to decode
      it, but if you don’t have the key, it’s very hard to guess the factors of
      a large number to decode it. If you’re curious about this, watch this <url
      href="https://www.youtube.com/watch?v=M7kEpw1tn50"
      visual="https://www.youtube.com/watch?v=M7kEpw1tn50">Numberphile
      video</url>.
    </p>
  </subsection>

  <subsection xml:id="summary-19">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 2.2.A.1) Values or expressions can be compared using the
            relational operators <c>==</c> and <c>!=</c> to determine whether
            the values are the same. With primitive types, this compares the
            actual primitive values. With reference types, this compares the
            object references.
          </p>
        </li>

        <li>
          <p>
            (AP 2.2.A.2) Numeric values or expressions can be compared using the
            relational operators (<c>&lt;</c>, <c>&gt;</c>, <c>&lt;=</c>,
            <c>&gt;=</c>) to determine the relationship between the values.
          </p>
        </li>

        <li>
          <p>
            (AP 2.2.A.3) An expression involving relational operators evaluates
            to a <c>Boolean</c> value of <c>true</c> or <c>false</c>.
          </p>
        </li>

        <li>
          <p>
            The remainder operator <c>%</c> can be used to test for divisibility
            by a number. For example, <c>num % 2 == 0</c> can be used to test if
            a number is even.
          </p>
        </li>

        <li>
          <p>
            (AP 2.5.A.1) Logical operators <c>!</c> (not), <c>&amp;&amp;</c>
            (and), and <c>||</c> (or) are used with Boolean values.
          </p>

          <blockquote>
            <p>
              <ul>
                <li>
                  <p>
                    <c>A &amp;&amp; B</c> is <c>true</c> if both <c>A</c> and
                    <c>B</c> are <c>true</c>.
                  </p>
                </li>

                <li>
                  <p>
                    <c>A || B</c> is <c>true</c> if either <c>A</c> or <c>B</c>
                    (or both) are <c>true</c>.
                  </p>
                </li>

                <li>
                  <p>
                    <c>!A</c> is <c>true</c> if <c>A</c> is <c>false</c>.
                  </p>
                </li>
              </ul>
            </p>
          </blockquote>
        </li>

        <li>
          <p>
            (AP 2.5.A.1) <c>!</c> has precedence (is executed before)
            <c>&amp;&amp;</c> which has precedence over <c>||</c>. (Parentheses
            can be used to force the order of execution in a different way.)
          </p>
        </li>

        <li>
          <p>
            (AP 2.5.A.1) An expression involving logical operators evaluates to
            a Boolean value.
          </p>
        </li>

        <li>
          <p>
            (AP 2.5.A.2) <term>Short-circuit evaluation</term> occurs when the
            result of a logical operation using <c>&amp;&amp;</c> or <c>||</c>
            can be determined by evaluating only the first Boolean expression.
            In this case, the second Boolean expression is not evaluated. (If
            the first expression is <c>true</c> in an <c>||</c> operation, the
            second expression is not evaluated since the result is true. If the
            first expression is <c>false</c> in an <c>&amp;&amp;</c> operation,
            the second expression is not evaluated since the result is false.)
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-12">
    <title>AP Practice</title>
    <activity label="AP2-2-1">
      <statement>
        <p>Consider the following statement.</p>
        <program language="java">
          <code>
boolean x = (5 % 3 == 0) == (3 &gt; 5);
          </code>
        </program>

        <p>What is the value of x after the statement has been executed?</p>
      </statement>

      <choices>
        <choice>
          <statement id="AP2-2-1_opt_a">
            <p>false</p>
          </statement>

          <feedback id="AP2-2-1_opt_a">
            <p>
              Although both sides of the middle == are false, false == false is
              true! Tricky!
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP2-2-1_opt_b">
            <p>true</p>
          </statement>

          <feedback id="AP2-2-1_opt_b">
            <p>
              (5 % 3 == 0) is false and (3 &gt; 5) is false, and false == false
              is true! Tricky!
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-2-1_opt_c">
            <p>(5 % 3 == 0)</p>
          </statement>

          <feedback id="AP2-2-1_opt_c">
            <p>The boolean x should hold true or false.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-2-1_opt_d">
            <p>(3 &gt; 5)</p>
          </statement>

          <feedback id="AP2-2-1_opt_d">
            <p>The boolean x should hold true or false.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-2-1_opt_e">
            <p>2</p>
          </statement>

          <feedback id="AP2-2-1_opt_e">
            <p>The boolean x should hold true or false.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP2-2-2">
      <statement>
        <p>
          Consider the following Boolean expression in which the int variables x
          and y have been properly declared and initialized.
        </p>

        <program language="java">
          <code>
(x &gt;= 10) == (y &lt; 12)
          </code>
        </program>

        <p>
          Which of the following values for x and y will result in the
          expression evaluating to true ?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="AP2-2-2_opt_a">
            <p>x = 10 and y = 12</p>
          </statement>

          <feedback id="AP2-2-2_opt_a">
            <p>
              The left side is true, but y must be less than 12 to make the
              right side true.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-2-2_opt_b">
            <p>x = 9 and y = 9</p>
          </statement>

          <feedback id="AP2-2-2_opt_b">
            <p>
              The left side is false (x must be greater than or equal to 10),
              but the right side is true.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP2-2-2_opt_c">
            <p>x = 10 and y = 11</p>
          </statement>

          <feedback id="AP2-2-2_opt_c">
            <p>Correct! Both sides are true!</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-2-2_opt_d">
            <p>x = 10 and y = 13</p>
          </statement>

          <feedback id="AP2-2-2_opt_d">
            <p>
              The left side is true, but y must be less than 12 to make the
              right side true.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP2-2-2_opt_e">
            <p>x = 9 and y = 12</p>
          </statement>

          <feedback id="AP2-2-2_opt_e">
            <p>Correct! Both sides are false! This is tricky!</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-compound-bools">
      <statement>
        <p>
          Consider the following code segment. What is printed as a result of
          executing the code segment?
        </p>

        <program language="java">
          <code>
int x = 10;
int y = 5;

if (x % 2 == 0 &amp;&amp; y % 2 == 0 || x &gt; y)
{
    System.out.print("First ");

    if (y * 2 == x || y &gt; 5 &amp;&amp; x &lt;= 10)
    {
       System.out.print("Second ");
    }
    else
    {
       System.out.print("Third ");
    }
}
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement id="AP-compound-bools_opt_a">
            <p>Nothing is printed out.</p>
          </statement>

          <feedback id="AP-compound-bools_opt_a">
            <p>Some of these conditions are true.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-compound-bools_opt_b">
            <p>First</p>
          </statement>

          <feedback id="AP-compound-bools_opt_b">
            <p>This is partially correct.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-compound-bools_opt_c">
            <p>Third</p>
          </statement>

          <feedback id="AP-compound-bools_opt_c">
            <p>Third cannot be printed out unless First is printed out first.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-compound-bools_opt_d">
            <p>First Second</p>
          </statement>

          <feedback id="AP-compound-bools_opt_d">
            <p>Good tracing!</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-compound-bools_opt_e">
            <p>First Third</p>
          </statement>

          <feedback id="AP-compound-bools_opt_e">
            <p>Take another look at the second condition.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
