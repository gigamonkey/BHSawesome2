<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="if-traps">
  <title><c>if</c> statement traps and pitfalls</title>

  <introduction>
    <p>Watch out!</p>
  </introduction>

  <subsection>
    <title>Some <c>if</c> statement traps</title>

    <p>
      Stringly speaking, the curly braces around the body of the <c>if</c> are
      there to group multiple statements together into a <term>block</term> that
      then acts as the body of the <c>if</c> statement.
    </p>

    <p>
      The actual rule is that the body of an <c>if</c> must be either a block
      enclosed in curly braces <em>or</em> a single statement. So it is legal to
      leave out the curly braces if the body of the <c>if</c> is just one
      statement. However it’s a very bad idea. Here’s why.
    </p>

    <p>If you write this:</p>
    <program language="java">
        if (someBoolean)
          doSomething();
    </program>

    <p>it’s equivalent to this:</p>
    <program language="java">
        if (someBoolean) {
          doSomething();
        }
    </program>

    <p>
      So far so good. However if you later decide to add something, say maybe a
      <c>println</c>, and you aren’t careful you might write this:
    </p>

    <program language="java">
        if (someBoolean)
          System.out.println("About to do something.");
          doSomething();
    </program>

    <p>which, despite the indentation, is actually equivalent to this:</p>
    <program language="java">
        if (someBoolean) {
          System.out.println("About to do something.");
        }
        doSomething();
    </program>

    <p>
      which means now <c>doSomething</c>, which used to be controlled by the
      <c>if</c>, is now always run and the <c>if</c> only controls the
      <c>println</c>.
    </p>

    <p>
      To avoid this kind of mistsake many programmers alway use curly braces,
      even when they are not technically required. All the code you seen on the
      AP Exam will be written in that style.
    </p>

    <p>Also be careful not to write:</p>
    <program language="java">
        if (someBoolean); {
          doSomething();
        }
    </program>

    <p>
      Note the semicolon (;) after the condition. This unfortunately is legal
      Java but it is equivalent to:
    </p>

    <program language="java">
        if (someBoolean) {
        }
        doSomething();
    </program>

    <p>
      The semicolon is an <term>empty statement</term> that does nothing and
      that’s the body of the <c>if</c>. And then the block enclosed in curly
      braces is the next thing that runs after the <c>if</c> statement.
    </p>
  </subsection>

  <subsection>
    <title>
      <c>= != ==</c>
    </title>

    <p>
      A common mistake in if statements is using = instead of == in the
      condition by mistake. You should always <term>use ==</term>, not =, in the
      condition of an if statement to test a variable. One equal sign (=)
      assigns a value to a variable, and two equal signs (==) test if a variable
      has a certain value.
    </p>
  </subsection>

  <subsection xml:id="dangling-else-statements">
    <title>Dangling Else Statements</title>
    <p>
      Sometimes with nested ifs we find a <term>dangling else</term> that could
      potentially belong to either if statement. The rule is that the else
      clause will always be a part of the closest unmatched if statement in the
      same block of code, regardless of indentation.
    </p>

    <program language="java">
      <code>
// Nested if with dangling else
if (boolean expression)
   if (boolean expression)
      Do statement;
   else  // belongs to closest if
      Do other statement;
      </code>
    </program>

    <activity label="danglingelse">
      <statement>
        <p>
          Try the following code with a dangling else. Notice that the
          indentation does not matter to the compiler (but you should make it
          your habit to use good indentation just as a best practice). How could
          you get the else to belong to the first if statement?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
import java.util.Scanner;

public class DanglingElseTest
{
    public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);

        boolean sunny = in.nextBoolean();
        boolean hot = in.nextBoolean();
        System.out.println("sunny = " + sunny);
        System.out.println("hot = " + hot);

        if (sunny)
            if (hot)
               System.out.println("Head for the beach!");
          else // Which if is else attached to??
            System.out.println("Bring your umbrella!");
    }
}
        </code>
        <stdin>true false</stdin>
        <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        //super("DanglingElseTest", input1); // for Repl.it
        super("DanglingElseTest"); // for Book
    }

    private static String input1 = "true false";
    private static String output1 = "Head for the beach!";
    private static String output2 = "Bring your umbrella!";

    @Test
    public void test02()
    {
        String x = "true false";
        String result = "sunny = true\nhot = false\n";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = !output.contains(output1) &amp;&amp; !output.contains(output2);

        passed =
        getResults(
            result,
            output,
            "Result for input = " + x,
            passed);
        assertTrue(passed);
    }

    @Test
        public void test01()
        {
            String x = "true true";
            String result = "sunny = true\nhot = true\nHead for the beach!";
            String output = getMethodOutputWithInput("main", x);

            boolean passed = output.contains(output1) &amp;&amp; !output.contains(output2);

            passed =
            getResults(
                result,
                output,
                "Result for input = " + x,
                passed);
            assertTrue(passed);
        }

    @Test
        public void test04()
        {
            String x = "false false";
            String result = "sunny = false\nhot = false\nBring your umbrella!";
            String output = getMethodOutputWithInput("main", x);

            boolean passed = output.contains(output2) &amp;&amp; !output.contains(output1);

            passed =
            getResults(
                result,
                output,
                "Result for input = " + x,
                passed);
            assertTrue(passed);
        }

    @Test
        public void test03()
        {
            String x = "false true";
            String result = "sunny = false\nhot = true\nBring your umbrella!";
            String output = getMethodOutputWithInput("main", x);

            boolean passed = output.contains(output2) &amp;&amp; !output.contains(output1);

            passed =
            getResults(
                result,
                output,
                "Result for input = " + x,
                passed);
            assertTrue(passed);
        }
}
        </tests>
      </program>
    </activity>

    <p>
      You can use curly braces (<c>{}</c>) to enclose a nested if and have the
      else clause belong to the top level if clause like below:
    </p>

    <program language="java">
      <code>
// Nested if with dangling else
if (boolean expression)
{
   if (boolean expression)
      Do this statement;
}
else  // belongs to first if
  Do that statement;
      </code>
    </program>

    <p>
      In fact many experienced Java programmers
      <title_reference>always</title_reference> use curly braces, even when they
      are not technically required to avoid this kind of confusion.
    </p>
  </subsection>

  <subsection>
    <title>Common Errors with If Statements</title>
    <p>
      Here are some rules to follow with if statements to avoid some common
      errors:
    </p>

    <blockquote>
      <p>
        <ul>
          <li>
            <p>
              Always use curly braces (<c>{</c> and <c>}</c>) to enclose the
              block of statements under the if condition. Java doesn’t care if
              you indent the code—it goes by the <c>{ }</c>.
            </p>
          </li>

          <li>
            <p>
              Don’t put in a semicolon <c>;</c> after the first line of the if
              statement, <c>if (test);</c>. The <c>if</c> statement is a
              multiline block of code that starts with the <c>if</c> condition
              and then <c>{</c> the body of the if statement <c>}</c>.
            </p>
          </li>

          <li>
            <p>
              Always use <c>==</c>, not <c>=</c>, in the condition of an if
              statement to test a variable. One <c>=</c> assigns, two <c>==</c>
              tests!
            </p>
          </li>

          <li>
            <p>
              The <c>else</c> statement matches with the closest <c>if</c>
              statement. If you want to match an <c>else</c> with a different
              <c>if</c> statement, you need to use curly braces to group the
              <c>if</c> and <c>else</c> together.
            </p>
          </li>
        </ul>
      </p>
    </blockquote>

    <activity label="if-missing-curlies">
      <statement>
        <p>
          The code below doesn’t work as expected. Fix it to only print <c>Wear
          a coat</c> and <c>Wear gloves</c> when isCold is true.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test1
{
    public static void main(String[] args)
    {
        boolean isCold = false;
        if (isCold = true);
            System.out.println("Wear a coat");
            System.out.println("Wear gloves");
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "";
        boolean passed = getResults(expect, output, "Expected output from main if isCold is false");
        assertTrue(passed);
    }

    @Test
    public void testCountCurlies()
    {
        String code = getCode();
        int num = countOccurences(code, "{");
        boolean passed = num &gt;= 3;

        getResults("3", "" + num, "Number of {", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection>
    <title>Summary</title>
    <p>
      <ul />
    </p>
  </subsection>
</section>
