<?xml version="1.0" encoding="utf-8"?>

<section xml:id="if-traps">
  <title><c>if</c> statement traps and pitfalls</title>

  <introduction>
    <p>
      While <c>if</c> statements are pretty simple, they do present some traps
      for the unwary. Luckily there are also some practices we can adopt that
      will make it much less likely that we will fall into those traps. In this
      section we discuss some of those.
    </p>
  </introduction>

  <subsection>
    <title>Always use braces</title>

    <p>
      Strictly speaking, the curly braces around the body of the <c>if</c> are
      not actually a part of the <c>if</c> syntax. They are a more general
      feature of Java: in any context where Java expects a single statement, it
      will also accept a <term>block</term> of statements enclosed in braces.
    </p>

    <p>
      The body of an <c>if</c> is such a place that accepts either a single
      statement or a block enclosed in braces. So it is legal to leave out the
      braces if the body of the <c>if</c> is just one statement. Thus this:
    </p>

    <program>
      if (someBoolean)
        doSomething();
    </program>

    <p>is equivalent to this:</p>

    <program>
      if (someBoolean) {
        doSomething();
      }
    </program>

    <p>
      However you should always write it the second way. Here’s why—if you later
      decide to add something, say maybe a <c>println</c> before the
      <c>doSomething()</c> and you aren’t careful you might end up with this:
    </p>

    <program>
      if (someBoolean)
        System.out.println("About to do something.");
        doSomething();
    </program>

    <p>
      Despite the structure suggested by the indentation, that is actually
      equivalent to this:
    </p>

    <program>
      if (someBoolean) {
        System.out.println("About to do something.");
      }
      doSomething();
    </program>

    <p>
      Now the <c>doSomething</c>, which used to be controlled by the <c>if</c>,
      is always run and the <c>if</c> only controls the <c>println</c>.
    </p>

    <p>
      The easiest way to avoid this kind of mistake is to always put the bodies
      of constructs that accept a statement or block in braces, even when they
      are not technically required. This includes the body of the <c>if</c> and
      the <c>else</c>, if any. It also applies to the loop constructs we’ll
      discuss in the next unit. All the code you seen on the AP exam will be
      written in that style.
    </p>
  </subsection>

  <subsection>
    <title>Dangling elses</title>

    <p>
      Always using braces also avoids another problem known as a <term>dangling
      else</term> that occurs when an <c>if</c> is nested inside another
      <c>if</c> without braces.
    </p>

    <p>Consider these two bits of code:</p>

    <sidebyside>
      <listing xml:id="dedented-dangling-else">
        <program>
          if (someBoolean)
              if (anotherBoolean)
                  doSomething();
          else
              doSomethingElse();
        </program>
      </listing>

      <listing xml:id="indented-dangling-else">
        <program>
          if (someBoolean)
              if (anotherBoolean)
                  doSomething();
              else
                  doSomethingElse();
        </program>
      </listing>
    </sidebyside>

    <p>
      Based on the indentation, you might expect those to be equivalent to these
      two:
    </p>

    <sidebyside>
      <listing xml:id="dedented-dangling-else-blocks">
        <program>
          if (someBoolean) {
              if (anotherBoolean) {
                  doSomething();
              }
          } else {
              doSomethingElse();
          }
        </program>
      </listing>

      <listing xml:id="indented-dangling-else-blocks">
        <program>
          if (someBoolean) {
              if (anotherBoolean) {
                  doSomething();
              } else {
                  doSomethingElse();
              }
          }
        </program>
      </listing>
    </sidebyside>

    <p>
      However, since indentation is not significant in Java, both of the top
      listings (<xref ref="dedented-dangling-else" text="type-global" /> and
      <xref ref="indented-dangling-else" text="type-global" />) are equivalent.
      It’s actually ambiguous how to interpret the top versions similar to how
      in English there are two ways to interpret a sentence like, “I saw the man
      with a telescope”. Does that mean I used a telescope to see the man, or I
      saw a man who had a telescope?
    </p>

    <p>
      Since Java can’t ask us what we meant, it uses a rule that in cases like
      that, the <c>else</c> clause always attaches to the closest <c>if</c>. So
      both versions without braces are equivalent to <xref
      ref="indented-dangling-else-blocks" text="type-global" /> regardless of
      indentation.
    </p>

    <p>
      But always using braces means you will be forced to write one or the other
      and you, and anyone else reading your code, will not have to worry about
      being mislead by bad indentation and won’t have to remember how Java
      resolves the ambiguity.
    </p>
  </subsection>

  <subsection>
    <title>Watch out for extra semicolons</title>

    <p>Also be careful not to write:</p>

    <program>
      if (someBoolean);
          doSomething();
    </program>

    <p>
      Note the semicolon (<c>;</c>) at the end of the first line. Unfortunately
      that is legal Java code but almost certainly not what you meant. It is
      equivalent to:
    </p>

    <program>
      if (someBoolean)
          ;
      doSomething();
    </program>

    <p>
      A semicolon by itself is actually a statement. It’s called the <term>empty
      statement</term> and it does nothing. So that code checks if
      <c>someBoolean</c> is true and if it is does nothing. Then it calls
      <c>doSomething()</c> regardless.
    </p>

    <p>
      You can still this mistake even if you use braces but it’s probably less
      likely since you’d have to put the semicolon between the closing
      parentheses and the opening brace rather than at the end of the line:
    </p>

    <program>
      if (someBoolean); {
          doSomething();
      }
    </program>

    <p>
      However, some Java programmers format their code with braces on lines by
      themselves which would make this mistake easier to make since we’re used
      to putting semicolons on the ends of lines:
    </p>

    <program>
      if (someBoolean);
      {
          doSomething();
      }
    </program>
  </subsection>

  <subsection>
    <title><c>= != ==</c></title>

    <p>
      Another classic bug arises when we use a single equals sign <c>=</c> when
      we should have used two equals signs <c>==</c>. In Java (and in many other
      languages) both are operators meaning they operate on some operands and
      produce a value.
    </p>

    <p>
      The single <c>=</c> is the assignment operator, which assigns a value to a
      variable but it also produces a value, namely the value that was just
      assigned. So an expression like <c>hungry = true</c> has the side effect
      of setting <c>hungry</c> to <c>true</c> but also evaluates to <c>true</c>.
    </p>

    <p>
      The double <c>==</c>, on the other hand, is the equality comparison
      operator, which evaluates to <c>true</c> if both its operands are the same
      value and <c>false</c> otherwise. The expression <c>hungry == true</c>
      doesn’t change the value of hungry but evaluates to either <c>true</c> or
      <c>false</c> depending on <c>hungry</c>’s current value.
    </p>

    <p>
      So this bug is called the <c>= != ==</c> bug since the two operators are
      not the same and using one when we should have used the other is a bug.
      Here’s how the bug looks in Java.
    </p>

    <program>
      if (hungry = true) {
        eat();
      }

      if (hungry = false) {
        study();
      }
    </program>

    <p>
      The first <c>if</c> statement will always call <c>eat()</c>, regardless of
      what <c>hungry</c> was before the <c>if</c>. And the second will never
      call <c>study()</c>, regardless of <c>hungry</c>’s prior value. And both
      of them will clobber the old value of <c>hungry</c> which will probably
      cause some confusion down the road.
    </p>

    <p>
      What the programmer who created those bugs probably meant to write was
      this:
    </p>

    <program>
      if (hungry == true) {
        eat();
      }

      if (hungry == false) {
        study();
      }
    </program>

    <p>
      By changing the <c>=</c> operators to <c>==</c>, the code calls
      <c>eat()</c> and <c>study()</c> at the correct timess. However, there’s an
      even better way to write these that is both simpler and avoids the
      possibility of falling into the <c>= != ==</c> trap:
    </p>

    <program>
      if (hungry) {
        eat();
      }

      if (!hungry) {
        study();
      }
    </program>

    <p>
      The point is, <c>hungry</c> is already a <c>boolean</c>. Comparing it to a
      literal like <c>true</c> doesn’t make it any more of a <c>boolean</c>.
      (Think of it this way: if you feel the need to write <c>hungry == true</c>
      why not write <c>hungry == true == true</c>?) And if you know that
      <c>!hungry</c> is pronunced “not hungry” then both of these bits of code
      read almost like English, maybe as spoken by a caveman: “If hungry, eat,”
      and “If not hungry, study.” Nobody says, “If it’s true that I’m hungry,
      eat()” or “If it’s false that I’m hungry, study().”
    </p>
  </subsection>

  <subsection>
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            Always use braces (<c>{</c> and <c>}</c>) to enclose the body of an
            <c>if</c> or <c>else</c>, even if it’s just one statement to avoid
            misleading indentation and errors when you add lines to an existing
            body.
          </p>
        </li>

        <li>
          <p>
            Consistently using braces also prevents dangling elses that don’t
            pair up with the right <c>if</c>.
          </p>
        </li>

        <li>
          <p>
            Be careful not to put in a semicolon <c>;</c> immediately after the
            condition in the <c>if</c> even if it is on a line by itself.
          </p>
        </li>

        <li>
          <p>
            Avoid using <c>==</c> in the condition of an <c>if</c> statement
            since it’s easy to mistakenly use an <c>=</c> instead.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection>
    <title>Practice</title>

    <activity label="if-missing-curlies">
      <title>Fix the <c>if</c> bugs</title>

      <p>
        The code below doesn’t work as the author intended. It was supposed to
        print both <c>Wear a coat</c> and <c>Wear gloves</c> but only when
        <c>isCold</c> is <c>true</c>. But somehow the author has fallen into all
        the traps mentioned in this chapter! Fix it so it does what they wanted
        it to.
      </p>

      <program interactive="activecode">

        <code>
          public class Test1 {
              public static void main(String[] args) {
                  boolean isCold = false;
                  if (isCold = true);
                      System.out.println("Wear a coat");
                      System.out.println("Wear gloves");
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;
          import org.junit.*;
          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "";
                  boolean passed = getResults(expect, output, "Expected output from main if isCold is false");
                  assertTrue(passed);
              }

              @Test
              public void testCountCurlies()
              {
                  String code = getCode();
                  int num = countOccurences(code, "{");
                  boolean passed = num >= 3;

                  getResults("3", "" + num, "Number of {", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>
</section>
