<?xml version="1.0" encoding="UTF-8"?>

<section label="booleans-practice">
  <title>Booleans and <c>if</c> practice</title>
  <introduction />
  <subsection>
    <title>Boolean practice</title>
    <activity label="if-relational">
      <statement>
        <p>
          Run the following active code a couple times until you see all the
          possible outputs. It prints out whether a random number is positive or
          equal to 0. Add another if statement that tests if it is a negative
          number.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class TestNumbers
          {
              public static void main(String[] args)
              {
                  // Get a random number from -10 up to 10.
                  int number = (int) (Math.random() * 21) - 10;
                  System.out.println("The number is " + number);

                  // is it positive?
                  if (number > 0)
                  {
                      System.out.println(number + " is positive!");
                  }
                  // is it 0?
                  if (number == 0)
                  {
                      System.out.println(number + " is zero!");
                  }
                  // is it negative?
                  // Add another if statement

              }
          }

          ]]>
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;
          import java.util.regex.MatchResult;
          import java.util.regex.Pattern;

          public class RunestoneTests extends CodeTestHelper
          {

              @Test
              public void testPositive()
              {
                  String output = "";
                  int num = -999, count = 0;

                  while (num <= 0 && count < 50)
                  {
                      output = getMethodOutput("main");
                      num = getNumber(output);
                      count++;

                      if (num == 9999999)
                      {
                          getResults(
                                  "The number is ##\n## is positive!",
                                  output,
                                  "Did you forget to print the number?",
                                  false);
                          assertTrue(false);
                          return;
                      }
                  }

                  String expect = "The number is " + num + "\n" + num + " is positive!";

                  boolean passed = output.contains("positive");
                  getResults(expect, output, "Testing positive numbers", passed);
                  assertTrue(passed);
              }

              @Test
              public void testZero()
              {
                  String output = "";
                  int num = -999, count = 0;

                  while (num != 0 && count < 50)
                  {
                      output = getMethodOutput("main");
                      num = getNumber(output);
                      count++;

                      if (num == 9999999)
                      {
                          getResults(
                                  "The number is ##\n## is zero!",
                                  output,
                                  "Did you forget to print the number?",
                                  false);
                          assertTrue(false);
                          return;
                      }
                  }

                  String expect = "The number is " + num + "\n" + num + " is zero!";

                  boolean passed = output.contains("zero");
                  getResults(expect, output, "Testing zero", passed);
                  assertTrue(passed);
              }

              @Test
              public void testNegative()
              {
                  String output = "";
                  int num = 999, count = 0;

                  while (num >= 0 && count < 50)
                  {
                      output = getMethodOutput("main");
                      num = getNumber(output);
                      count++;

                      if (num == 9999999)
                      {
                          getResults(
                                  "The number is ##\n## is negative!",
                                  output,
                                  "Did you forget to print the number?",
                                  false);
                          assertTrue(false);
                          return;
                      }
                  }

                  String expect = "The number is " + num + "\n" + num + " is negative!";

                  boolean passed = output.contains("negative");
                  getResults(expect, output, "Testing negative numbers", passed);
                  assertTrue(passed);
              }

              private int getNumber(String output)
              {
                  String regex = "[0-9]+";

                  String[] matches =
                          Pattern.compile(regex)
                                  .matcher(output)
                                  .results()
                                  .map(MatchResult::group)
                                  .toArray(String[]::new);

                  int num = 9999999;

                  if (matches.length > 0)
                  {
                      num = Integer.parseInt(matches[0]);
                  }

                  if (output.contains("-"))
                  {
                      num *= -1;
                  }

                  return num;
              }
          }

          ]]>
        </tests>
      </program>
    </activity>

    <activity label="mcq-if-trace">
      <statement>
        <p>
          Consider the following code segment. What is printed as a result of
          executing the code segment?
        </p>

        <program language="java">
          <code>
            <![CDATA[

            int x = 3;
            if (x > 2)
            {
               x = x * 2;
            }
            if (x > 4)
            {
               x = 0;
            }
            System.out.print(x);

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>3</p>
          </statement>

          <feedback>
            <p>x is changed by the if statements.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>6</p>
          </statement>

          <feedback>
            <p>
              What happens when x is greater than 2 and then greater than 4? Do
              both if statements.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>0</p>
          </statement>

          <feedback>
            <p>
              If x is greater than 2, it's always doubled, and then that result
              is always greater than 4, so it's set to 0 in the second if
              statement.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>4</p>
          </statement>

          <feedback>
            <p>x is changed by the if statements.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>The code will not compile</p>
          </statement>

          <feedback>
            <p>This code will compile.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
<!-- just dropped this here for now. Used to be in topic-2-3 -->
    <activity label="licenseifelse">
      <statement>
        <p>
          Run the following code to see what it prints out when the variable age
          is set to the value 16. Change the variable age’s value to 15 and then
          run it again to see the result of the print statement in the else
          part. Can you change the if-statement to indicate that you can get a
          license at age 15 instead of 16? Use 2 test cases for the value of age
          to test your code to see the results of both print statements.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class DriversLicenseTest
          {
              public static void main(String[] args)
              {
                  int age = 16;
                  if (age >= 16)
                  {
                      System.out.println("You can get a driver's license in most states!");
                  }
                  else
                  {
                      System.out.println(
                              "Sorry, you need to be older to get a driver's license.");
                  }
              }
          }

          ]]>
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testCodeContains() throws IOException
              {
                  String target = "age >= 15";
                  boolean passed = checkCodeContains("check age >= 15", target);
                  assertTrue(passed);
              }
          }

          ]]>
        </tests>
      </program>
    </activity>

    <activity label="ifelseevenOdd" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following program should print out “x is even” if the remainder of
          x divided by 2 is 0 and “x is odd” otherwise, but the code is mixed
          up. Drag the blocks from the left and place them in the correct order
          on the right. Click on Check Me to see if you are right.
        </p>
      </statement>

      <blocks>
        <block order="5">
          <cline>public class EvenOrOdd {</cline>
        </block>

        <block order="4">
          <cline>    public static void main(String[] args) {</cline>
        </block>

        <block order="6">
          <cline>        int x = 92;</cline>
        </block>

        <block order="1">
          <cline>        if (x % 2 == 0) {</cline>
        </block>

        <block order="2">
          <cline>            System.out.println("x is even");</cline>
        </block>

        <block order="8">
          <cline>        } else {</cline>
        </block>

        <block order="7">
          <cline>            System.out.println("x is odd");</cline>
        </block>

        <block order="3">
          <cline>        }</cline>
          <cline>    }</cline>
          <cline>}</cline>
        </block>
      </blocks>
    </activity>

    <activity label="scoreifelse">
      <title>Add an else</title>
      <statement>
        <p>
          Try the following code. Add an else statement to the if statement that
          prints out “Good job!” if the score is greater than 9. Change the
          value of score to test it. Can you change the boolean test to only
          print out “Good job” if the score is greater than 20?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class ScoreTest
          {
              public static void main(String[] args)
              {
                  int score = 8;
                  if (score <= 9)
                  {
                      System.out.println("Try for a higher score!");
                  }
              }
          }

          ]]>
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testChangedCode()
              {
                  String origCode =
                          "public class ScoreTest   {      public static void main(String[] args)      {     "
                              + "   int score = 8;        if (score <= 9)         {           "
                              + " System.out.println(\"Try for a higher score!\");        }      }} ";

                  boolean changed = codeChanged(origCode);
                  assertTrue(changed);
              }

              @Test
              public void testCodeContainsElse()
              {
                  boolean ifCheck2 = checkCodeContains("else", "else");
                  assertTrue(ifCheck2);
              }

              @Test
              public void testCodeContains20()
              {
                  String target1 = removeSpaces("score <= 20");
                  String target2 = removeSpaces("score > 20");

                  String code = removeSpaces(getCode());

                  boolean passed = code.contains(target1) || code.contains(target2);
                  getResults("true", "" + passed, "Checking for score <= 20 or score > 20", passed);
                  assertTrue(passed);
              }

              @Test
              public void testCodeChange1() throws Exception
              {
                  String className = "Test1";

                  String program = getCode();
                  program = program.replace("ScoreTest", className).replace("public class", "class");
                  program = program.replaceAll("= *[0-9]+;", "= 25;");

                  String output = getMethodOutputChangedCode(program, className, "main");

                  String expected = "Good job!";
                  boolean passed = output.contains(expected);
                  getResults(expected, output, "Checking output if score is 25", passed);
                  assertTrue(passed);
              }

              @Test
              public void testCodeChange2() throws Exception
              {
                  String className2 = "Test2";

                  String program2 = getCode();
                  program2 = program2.replace("ScoreTest", className2).replace("public class", "class");
                  program2 = program2.replaceAll("= *[0-9]+;", "= 5;");

                  String output2 = getMethodOutputChangedCode(program2, className2, "main");

                  String expected2 = "Try for a higher score!";
                  boolean passed2 = output2.contains(expected2);
                  getResults(expected2, output2, "Checking output if score is 5", passed2);
                  assertTrue(passed2);
              }
          }

          ]]>
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-prime-numbers-pogil">
    <title>Coding Challenge : Prime Numbers POGIL</title>
    <p>
      We encourage you to do this activity as a <url
      href="https://pogil.org/about-pogil/what-is-pogil"
      visual="https://pogil.org/about-pogil/what-is-pogil">POGIL</url> (Process
      Oriented Guided Inquiry Learning) group activity or using Think-Pair-Share
      collaboration. POGIL groups are self-managed teams of 4 students where
      everyone has a <url
      href="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing">POGIL
      role</url> and works together to solve the problems, making sure that
      everyone in the team participates and learns.
    </p>

    <p>
      In this activity, you will write a Java program that uses boolean
      expressions to determine if a number is prime. A prime number is an
      integer number that is only divisible by 1 and itself. For example, 3 is a
      prime number because it’s only divisible by 1 and 3 and no other numbers,
      but 4 is not a prime number because it’s divisible by 2 as well as 1 and
      4. You will write methods that test whether a number is positive,
      negative, odd, even, and divisible by another number. You will then
      experiment with these methods to determine if the numbers 5, 6, and 7 are
      prime. And to ask questions about prime numbers like whether all odd
      numbers are prime.
    </p>

    <project label="challenge-primeNumbers">
      <statement>
        <p>
          Complete the methods below to determine if a number is positive,
          negative, odd, even, or divisible by another number by returning
          boolean expressions testing the argument number. Then, experiment with
          these methods to determine if the numbers 5, 6, and 7 are prime.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class PrimeNumbers
          {
              // isPositive checks whether number is greater than 0
              public static boolean isPositive(int number)
              {
                  return (number > 0);
              }

              public static boolean isNegative(int number)
              {
                  // 1. Replace true with an expression that checks
                  //    whether number is negative
                  return true;
              }

              // isOdd checks whether number divided by 2
              // has a remainder.
              public static boolean isOdd(int number)
              {
                  return (number % 2 != 0);
              }

              public static boolean isEven(int number)
              {
                  // 2. Replace true with an expression that checks
                  //    whether number is divisible by 2
                  return true;
              }

              public static boolean isDivisible(int number, int divisor)
              {
                  // 3. Replace true with an expression that checks
                  //    whether number is divisible by divisor
                  return true;
              }

              public static void main(String[] args)
              {
                  // 4. Change number to experiment
                  int number = 5;
                  System.out.println("A prime number is only divisible by 1 and itself.");
                  System.out.println(number + " is negative? " + isNegative(number));
                  System.out.println(number + " is even? " + isEven(number));

                  System.out.println("Divisible by 1? " + isDivisible(number,1) );
                  System.out.println("Divisible by 2? " + isDivisible(number,2) );
                  System.out.println("Divisible by 3? " + isDivisible(number,3) );
                  System.out.println("Divisible by 4? " + isDivisible(number,4) );
                  System.out.println("Divisible by 5? " + isDivisible(number,5) );

                  // 5. Add 2 print statements with calls to isDivisible to check
                  //    whether number is divisible by 6 and 7.

              }
          }

          ]]>
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
               @Test
               public void testBool1() throws IOException
               {
                    String target = "number < 0";
                    boolean passed = checkCodeContains("boolean expression for isNegative", target);
                    assertTrue(passed);
               }
             @Test
             public void testBool2() throws IOException
             {
                 String target = "number % 2 == 0";
                 boolean passed = checkCodeContains("boolean expression for isEven", target);
                 assertTrue(passed);
             }

             @Test
             public void testBool3() throws IOException
             {
                 String target = "number % divisor == 0";
                 boolean passed = checkCodeContains("boolean expression for isDivisible", target);
                 assertTrue(passed);
             }
             @Test
             public void testCall() throws IOException
             {
                 String target = "isDivisible(number,7)";
                 boolean passed = checkCodeContains("method call in main to isDivisible to see whether number is divisible by 7", target);
                 assertTrue(passed);
             }
          }

          ]]>
        </tests>
      </program>
    </project>

    <p>
      With your POGIL group, use the code you completed above to experiment to
      see if 5, 6, and 7 are prime. Answer the following questions:
    </p>

    <activity label="prime1">
      <statement>
        <p>Is 5 prime?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Yes, 5 is prime.</p>
          </statement>

          <feedback>
            <p>5 is only divisible by 1 and 5, so it is prime.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>No, 5 is not prime.</p>
          </statement>

          <feedback>
            <p>5 is only divisible by 1 and 5.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="prime2">
      <statement>
        <p>Is 6 prime?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Yes, 6 is prime.</p>
          </statement>

          <feedback>
            <p>
              A prime number is only divisible by 1 and itself. 6 is divisible
              by 1, 2, 3, and 6.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>No, 6 is not prime.</p>
          </statement>

          <feedback>
            <p>6 is divisible by 1, 2, 3, and 6, so it is not prime.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="prime3">
      <statement>
        <p>Is 7 prime?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Yes, 7 is prime.</p>
          </statement>

          <feedback>
            <p>7 is only divisible by 1 and 7, so it is prime.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>No, 7 is not prime.</p>
          </statement>

          <feedback>
            <p>7 is only divisible by 1 and 7.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="prime4">
      <statement>
        <p>
          Are all odd numbers prime? Can you find an odd number that is not
          prime by using your code above? What is the smallest odd number that
          is not prime and has divisors other than 1 and itself?
        </p>

        <p>
          <fillin answer="9" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>Yes, 9 is not prime because it is divisible by 3.</p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Try numbers 3-10 in your code.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <activity label="prime5">
      <statement>
        <p>
          Are all even numbers not prime? Can you find an even prime number
          using your code above? What is the smallest even number that is prime?
        </p>

        <p>
          <fillin answer="2" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>Yes, 2 is prime because it is only divisible by 1 and 2.</p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Try numbers 2-10 in your code.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <p>
      Prime numbers are very useful in encryption algorithms because they can be
      used as keys for encoding and decoding. If you have the key, you can use
      it to divide a large number that represents something encrypted to decode
      it, but if you don’t have the key, it’s very hard to guess the factors of
      a large number to decode it. If you’re curious about this, watch this <url
      href="https://www.youtube.com/watch?v=M7kEpw1tn50"
      visual="https://www.youtube.com/watch?v=M7kEpw1tn50">Numberphile
      video</url>.
    </p>
  </subsection>

  <subsection xml:id="coding-challenge-truth-tables-pogil">
    <title>Coding Challenge : Truth Tables POGIL</title>
    <p>
      We encourage you to do this activity as a <url
      href="https://pogil.org/about-pogil/what-is-pogil"
      visual="https://pogil.org/about-pogil/what-is-pogil">POGIL</url> (Process
      Oriented Guided Inquiry Learning) group activity. POGIL groups are
      self-managed teams of up to 4 students where everyone has a <url
      href="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing">POGIL
      role</url> and works together to solve the problems, making sure that
      everyone in the team participates and learns.
    </p>

    <p>Explore the following problems with your group:</p>
    <p>
      <ol marker="1">
        <li>
          <p>
            Draw or print a <url
            href="https://docs.google.com/document/d/1lpjk0LS_KdAddRurMayJZmaFzeyEg4FyhviZcSTXvtU/edit?usp=sharing"
            visual="https://docs.google.com/document/d/1lpjk0LS_KdAddRurMayJZmaFzeyEg4FyhviZcSTXvtU/edit?usp=sharing">Venn
            diagram</url> of 4 intersecting circles. Put the names of the 4
            people in your group one in each circle. Write down the age of each
            person in your group in the circles. If two or more people are the
            same age, put the age in the intersecting parts of their circles.
            Write a Boolean expression that compares the age of each person in
            the group using <c>==</c>, <c>&lt;</c>, <c>&gt;</c>, and
            <c>&amp;&amp;</c>, for example Ada’s age <c>&gt;</c> Alan’s age
            <c>&amp;&amp;</c> Alan’s age <c>==</c> Grace’s age. Then, ask each
            person in your group their favorite movie. If two or more people
            have the same favorite movie, put the movie in the intersecting
            parts of their circles. Write a Boolean expression that compares the
            favorite movies in the group using <c>==</c>, <c>!=</c>, and
            <c>&amp;&amp;</c>, for example Ada’s movie <c>==</c> Alan’s movie
            <c>&amp;&amp;</c> Alan’s movie <c>!=</c> Grace’s movie. Think of 1
            more comparison and write it in the circles and as a Boolean
            expression. Share the Boolean expressions with the class. (Thank you
            to Jill Westerlund of Hoover High School and Art Lopez of Sweetwater
            High School for this activity suggestion).
          </p>
        </li>

        <li>
          <p>
            Write the sentence “If it’s sunny, OR if the temperature is greater
            than 80 and it’s not raining, I will go to the beach.” as a Java if
            statement using an int variable <c>temperature</c> and boolean
            variables <c>sunny</c> and <c>raining</c>. If the conditional is
            true, print out “Go to the beach!”. So, you will go to the beach on
            days that it is sunny in any temperature, or you will go to the
            beach on days when the temperature is over 80 degrees and it’s not
            raining.
          </p>
        </li>

        <li>
          <p>
            Complete a truth table for the if statement that you wrote in #2
            with columns for sunny, temperature &gt; 80, raining, and go to the
            beach.
          </p>
        </li>

        <li>
          <p>
            Write Java code below to test your if statement and try all the
            values in your truth table to see if you filled it out correctly.
            You will need test case for each of the 8 rows in your truth table,
            for example when sunny is true and false, when raining is true or
            false, and for a value of temperature greater than 80, for example
            90, and less than 80, for example 60.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-truthtables">
      <statement>
        <p>
          Challenge-truthtables: Test your boolean expression in an if statement
          below.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class TruthTable
          {
              public static void main(String[] args)
              {
                  // Test multiple values for these variables
                  boolean sunny = false;
                  int temperature = 90;
                  boolean raining = false;

                  // Write an if statement for: If it's sunny,
                  //  OR if the temperature is greater than 80
                  //     and it's not raining, "Go to the beach!"

              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String expect = "Go to the beach!";
                  String output = getMethodOutput("main");
                  String code = getCode();
                  boolean passed;
                  if (getCode().contains("boolean sunny = false"))
                      passed =
                              getResults(
                                      expect,
                                      output,
                                      "Prints Go to the beach! with initial input (sunny = false; temperature"
                                          + " = 90; raining = false;)");
                  else passed = getResults("sunny = false", "sunny = true", "Set sunny to false to test");

                  assertTrue(passed);
              }

              @Test
              public void testCodeContains1()
              {
                  boolean ifStatement = checkCodeContains("conditional: if", "if");
                  assertTrue(ifStatement);
              }

              @Test
              public void testCodeContains2()
              {
                  boolean ifStatement1 =
                          checkCodeContains("conditional: temperature greater than 80", "temperature > 80");

                  assertTrue(ifStatement1);
              }

              @Test
              public void testCodeContains4()
              {
                  boolean ifStatement3 = checkCodeContains("and", "&&");
                  assertTrue(ifStatement3);
              }

              @Test
              public void testCodeContains5()
              {
                  boolean ifStatement3 = checkCodeContains("or", "||");
                  assertTrue(ifStatement3);
              }
          }

          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="coding-challenge-truth-and-tracing-tables-pogil">
    <title>Coding Challenge : Truth and Tracing Tables POGIL</title>
    <p>
      We encourage you to do this activity as a <url
      href="https://pogil.org/about-pogil/what-is-pogil"
      visual="https://pogil.org/about-pogil/what-is-pogil">POGIL</url> (Process
      Oriented Guided Inquiry Learning) group activity. POGIL groups are
      self-managed teams of up to 4 students where everyone has a <url
      href="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1_NfNLWJxaG4qZ2Jd2x8UctDS05twn1h6p-o3XaAcRv0/edit?usp=sharing">POGIL
      role</url> and works together to solve the problems, making sure that
      everyone in the team participates and learns.
    </p>

    <p>
      Explore the following problems with your group. You may use <url
      href="https://docs.google.com/document/d/1Oa_hlzjunYMoRRiMX0A0nFjk7JiTh7EGfIVM9bQ_BIo/edit?usp=sharing"
      visual="https://docs.google.com/document/d/1Oa_hlzjunYMoRRiMX0A0nFjk7JiTh7EGfIVM9bQ_BIo/edit?usp=sharing">this
      worksheet</url> to complete your truth tables. Assume that <c>x</c> is an
      integer value, for example -1, 0, or 1.
    </p>

    <p>
      <ol marker="1">
        <li>
          <p>
            Complete a truth table for the boolean expression: <c>!(x == 0 || x
            &gt;= 1)</c>. Is this the set of positive or negative numbers? Is
            the expression true when <c>x</c> is positive? Or is it true when
            <c>x</c> is negative? You can try out the values when <c>x</c> is 1
            or -1 or 0. Note that 0 is not positive or negative. You can try
            running the code below to check your answer.
          </p>
        </li>

        <li>
          <p>
            Complete a truth table for the boolean expression: <c>!(x == 0)
            &amp;&amp; !(x &gt;= 1)</c>. Is this the set of positive or negative
            numbers?
          </p>
        </li>

        <li>
          <p>
            Complete a truth table for the boolean expression: <c>(x != 0)
            &amp;&amp; (x &lt; 1)</c>. Is this the set of positive or negative
            numbers?
          </p>
        </li>

        <li>
          <p>Are the 3 boolean expressions equivalent? Why or why not?</p>
        </li>

        <li>
          <p>Test your answers using the active code window below.</p>
        </li>

        <li>
          <p>
            Complete the following multiple choice exercises in your POGIL
            groups. Show the application of DeMorgan’s laws or the truth tables
            in each question on paper.
          </p>
        </li>
      </ol>
    </p>

    <project label="challengeBooleanExpr">
      <statement>
        <p>
          Are these 3 boolean expressions equivalent? 1. <c>!(x == 0 || x &gt;=
          1)</c> , 2. <c>!(x == 0) &amp;&amp; !(x &gt;= 1)</c> , 3. <c>(x != 0)
          &amp;&amp; (x &lt; 1)</c>
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class EquivalentExpressions
          {
              public static void main(String[] args)
              {
                  int x = -1; // try with x = -1, x = 0, and x = 1
                  System.out.println(!(x == 0 || x >= 1));
                  // add print statements for expressions in #2 and #3
                  // to see if they are equivalent when x = -1, 0, and 1.

              }
          }

          ]]>
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testChangedCode()
              {
                  String origCode =
                          "public class EquivalentExpressions { public static void main(String[] args) { int"
                              + " x = -1;  System.out.println(!(x == 0 || x >= 1));   } }";

                  boolean changed = codeChanged(origCode);
                  assertTrue(changed);
              }

              @Test
              public void testAddedCode()
              {
                  boolean output2 = checkCodeContains("(x != 0) && (x < 1)");
                  assertTrue(output2);
              }

              @Test
              public void testAddedCode2()
              {
                  boolean output3 = checkCodeContains("!(x == 0) && !(x >= 1)");
                  assertTrue(output3);
              }
          }

          ]]>
        </tests>
      </program>
    </project>

    <activity label="qcbdm1">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
            <![CDATA[
            !(x > 2 && y < 4)
            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>(x &lt; 2) || (y &gt; 4)</p>
          </statement>

          <feedback>
            <p>The negation of x &gt; 2 is x &lt;= 2</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &lt; 2) &amp;&amp; (y &gt; 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the "and" is changed to an "or"</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>(x &lt;= 2) || (y &gt;= 4)</p>
          </statement>

          <feedback>
            <p>
              The x &gt; 2 becomes x &lt;= 2, the y &lt; 4 becomes y &gt;= 4 and
              the and changes to or
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &lt;= 2) &amp;&amp; (y &gt;= 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the "and" is changed to an "or"</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbdm2">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
            <![CDATA[
            !(x == 2 && y > 4)
            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>(x != 2) || (y &lt; 4)</p>
          </statement>

          <feedback>
            <p>The negation of y &gt; 4 is y &lt;= 4</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x != 2) &amp;&amp; (y &lt; 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the and is changed to an or</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x != 2) &amp;&amp; (y &lt;= 4)</p>
          </statement>

          <feedback>
            <p>Don't forget that the and is changed to an or</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>(x != 2) || (y &lt;= 4)</p>
          </statement>

          <feedback>
            <p>
              The and is changed to an or, the (x == 2) becomes (x != 2) and (y
              &gt; 4) becomes (y &lt;= 4)
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbdm3">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
            <![CDATA[
            !(x!=5 && y!=7)
            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>(x == 5) || (y == 7)</p>
          </statement>

          <feedback>
            <p>The negation of &amp;&amp; is || and the negation of != is ==</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x == 5) &amp;&amp; (y == 7)</p>
          </statement>

          <feedback>
            <p>The negation of &amp;&amp; is ||</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x != 5) || (y != 7)</p>
          </statement>

          <feedback>
            <p>
              The negation of x != 5 is x == 5. The negation of y != 7 is y ==
              7.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &lt; 5) || (x &gt; 5) || (y &gt; 7) || (y &lt; 7)</p>
          </statement>

          <feedback>
            <p>
              The negation of == is != which is the same as &lt; or &gt;. The
              negation of != is ==.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbdm4">
      <statement>
        <p>Which of the following is the same as the code below?</p>
        <program language="java">
          <code>
            <![CDATA[
            !(x<= 5 && y > 7)
            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>(x &gt; 5) &amp;&amp; (y &lt; 7)</p>
          </statement>

          <feedback>
            <p>
              The negation of &amp;&amp; is || and the negation of y &gt; 7 is y
              &lt;= 7.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &gt; 5) || (y &lt; 7)</p>
          </statement>

          <feedback>
            <p>The negation of y &gt; 7 is y &lt;= 7.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>(x &gt; 5) &amp;&amp; (y &lt;= 7)</p>
          </statement>

          <feedback>
            <p>The negation of &amp;&amp; is ||.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>(x &gt; 5) || (y &lt;= 7)</p>
          </statement>

          <feedback>
            <p>
              The negation of (x &lt;= 5) is (x &gt; 5). The negation of
              &amp;&amp; is ||. The negation of (y &gt; 7) is (y &lt;= 7).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      <term>String Equality</term>: What will the following code print out?
      Trace through the code by drawing diagrams of what is going on in memory
      like the figures above, and then show the values of s1, s2, s3, s4 and the
      output after each line of code. Remember that you can use trace tables to
      track the values of variables as they change throughout a program. To
      trace through code, write down a variable in each column in a table and
      keep track of its value throughout the program as you go through it line
      by line.
    </p>

    <program language="java">
      <code>
        <![CDATA[

        String s1 = null;
        String s2 = new String("hi");
        String s3 = new String("hi");
        String s4 = new String("bye");
        if (s1 == null)
        {
            s1 = s2;
        }
        if (s1 == s2)
        {
            System.out.println("s1 and s2 refer to the same object");
        }
        if (s2 == s3)
        {
            System.out.println("s2 and s3 refer to the same object");
        }
        if (s3 == s4)
        {
            System.out.println("s3 and s4 refer to the same object");
        }
        if (s1.equals(s2) && s2.equals(s3))
        {
            System.out.println("s1, s2, s3 are equal");
        }

        ]]>
      </code>
    </program>

    <project label="challengetracingStrings">
      <statement>
        <p>
          Write your tracing table here that keeps track of s1, s2, s3, s4 and
          the output.
        </p>
      </statement>

      <response />
    </project>

    <activity label="lcdmtest">
      <statement>
        <p>
          For what values of x and y will the code below print true? Try out
          different values of x and y to check your answer.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class Test1
          {
              public static void main(String[] args)
              {
                  int x = 2;
                  int y = 3;
                  System.out.println(!(x < 3 && y > 2));
              }
          }

          ]]>
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testChangedCode()
              {
                  String origCode =
                          "public class Test1 {public static void main(String[] args) { int x = 2; int y = 3;"
                              + " System.out.println(!(x < 3 && y > 2)); } }";

                  boolean changed = codeChanged(origCode);
                  assertTrue(changed);
              }
          }

          ]]>
        </tests>
      </program>
    </activity>

    <activity label="compareBool1">
      <statement>
        <p>
          What is printed when the following code executes and x equals 4 and y
          equals 3?
        </p>

        <program language="java">
          <code>
            <![CDATA[

            int x = 4, y = 3;
            if (!(x < 3 || y > 2))
            {
               System.out.println("first case");
            }
            else
            {
               System.out.println("second case");
            }

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is greater or equal to 3 and y is less
              than or equal to 2. The first part is true but the second is
              false. Since the statements are joined by an and the complex
              expression is false.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is less than 3 or y is greater than 2.
              In this case the first will be false, but the second true so since
              the statements are joined with an or the complex expression is
              true.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="compareBool2">
      <statement>
        <p>
          What is printed when the following code executes and x equals 4 and y
          equals 3?
        </p>

        <program language="java">
          <code>
            <![CDATA[

            int x = 4, y = 3;
            if (!(x < 3 && y > 2))
            {
               System.out.println("first case");
            }
            else
            {
               System.out.println("second case");
            }

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is greater than or equal to 3 or y is
              less than or equal to 2. In this case x is greater than 3 so the
              first condition is true.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              This will be printed if x is less than 3 and y is greater than 2.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="traceCompoundBools">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          3 and y has been set to 9?
        </p>

        <program language="java">
          <code>
            <![CDATA[

            if (x > 0 && (y / x) == 3)
            {
               System.out.println("first case");
            }
            else
            {
               System.out.println("second case");
            }

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              first case will print if both of the conditions are true and they
              are.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>second case will print either of the conditions are false.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="traceCompoundBools2">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          3 and y has been set to 6?
        </p>

        <program language="java">
          <code>
            <![CDATA[

            if (x > 0 && (y / x) == 3)
            {
               System.out.println("first case");
            }
            else
            {
               System.out.println("second case");
            }

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              first case will print if both of the conditions are true, but the
              second is not.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              second case will print if either of the conditions are false and
              the second one is (6 / 3 == 2).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qcbc_or">
      <statement>
        <p>
          What is printed when the following code executes and x has been set to
          3 and y has been set to 6? Notice that it is now an <term>or</term>
          (||) instead of <term>and</term> (&amp;&amp;).
        </p>

        <program language="java">
          <code>
            <![CDATA[

            if (x > 0 || (y / x) == 3)
            {
               System.out.println("first case");
            }
            else
            {
               System.out.println("second case");
            }

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>first case</p>
          </statement>

          <feedback>
            <p>
              first case will print if either of the two conditions are true.
              The first condition is true, even though the second one isn't.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second case</p>
          </statement>

          <feedback>
            <p>
              second case will print if both of the conditions are false, but
              the first condition is true.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
