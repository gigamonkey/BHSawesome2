<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-2-3-ifs">
  <title>Booleans and <c>if</c> statements</title>

  <introduction>
    <idx>selection</idx>
    <idx>if</idx>
    <idx>else</idx>
    <p>
      Since the definition of a selection is a point in the code where the flow
      of control makes a decision to go down one branch or another based on some
      value, we need a data type to represent those values. Some older languages
      just reuse an existing data type, such as their equivalent of <c>int</c>
      treating <c>0</c> as false and all other numbers as true. And some modern
      languages, in an attempt to be more lenient will treat any value at all as
      a true or false value, following some oftentimes complicated rules about
      what values are “truthy” and what values are “falsey”.
    </p>

    <p>
      In Java, however, things are quite tidy with true and false represented by
      a special data type, the third primitive data type you need to know for
      the AP exam, <c>boolean</c>.
    </p>

    <p>
      A <c>boolean</c> variable or expression can only have one of two values,
      true or false. There are two literals values we can use in Java to get
      these values: <c>true</c> and <c>false</c>. So we can declare
      <c>boolean</c> variables like this:
    </p>

    <program language="java">
      boolean hungry = true;
      boolean sleepy = false;
    </program>

    <p>
      And that’s kind of it for <c>boolean</c> as a data type. Unlike <c>int</c>
      and <c>double</c> there aren’t any gotchas about how they differ from
      idealized numbers in mathematics. And there aren’t complexities about
      different ways to write the same value.
    </p>

    <p>
      However there are a lot we can produce <c>boolean</c> values. There are
      operators the operate <em>on</em> booleans to produce new <c>boolean</c>s,
      which allow us to express complex conditions. There are operators that
      operate on other kinds of values to produce <c>boolean</c> values, like
      the <c>&gt;</c> operator that compares two numbers, producing <c>true</c>
      if the first number is greater than the second and <c>false</c> otherwise.
    </p>

    <p>
      But before we look at all the different ways of producing <c>boolean</c>
      values, let look at how they are used in Java’s most basic selection
      control constructs, <c>if</c> statements.
    </p>
  </introduction>

  <subsection>
    <title>One-way selection</title>
    <p>
      Almost all programming languages have something like an <term>if
      statement</term> to choose between different paths in an algorithm. An
      <c>if</c> statement is one of the simplest forms of the selection
      construct that we need as one of our three algorithmic building blocks.
      The simplest form of an <c>if</c> statement in Java looks like:
    </p>

    <program language="java">
      if (someBoolean) {
        someCode();
        maybeSomeMoreCode();
      }
    </program>

    <p>
      The expression in the parentheses must be a <c>boolean</c> expression: a
      <c>boolean</c> literal (though that would be silly for reasons we’ll
      discuss in a bit), a <c>boolean</c> variable, or some other expression
      that evaluates to a <c>boolean</c>.
    </p>

    <p>
      And the code in <c>{}</c>s is called the <term>body</term> of the
      <c>if</c> statement and contains the code to run if the <c>boolean</c>
      expression is true. It can contain any number of statements including, as
      we’ll see other <c>if</c> statements and loops.
    </p>

    <p>
      This form of <c>if</c> statement is called a <term>one-way
      selection</term> because it makes one choice and then either executes the
      body or does nothing. In either case, the normal flow of control picks up
      after the <c>if</c> statement, continuing with whatever code comes next.
    </p>

    <figure align="center">
      <caption>Flowchart of a one-way selection</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/Condition.png" width="36%" />
    </figure>

    <p>
      Imagine that your cell phone wanted to remind you to take an umbrella if
      it was currently raining in your area when it detected that you were
      leaving the house. This type of thing is going to become more common in
      the future and it is an area of research called Human Computer Interaction
      (HCI) or Ubiquitous Computing (computers are everywhere).
    </p>

    <activity label="if-raining">
      <title>Take an umbrella?</title>
      <statement>
        <p>
          In the code below, the <c>boolean</c> variable <c>isRaining</c> is
          used to control whether the message <c>Take an umbrella!</c> will be
          printed. Regardless of whether <c>isRaining</c> is true or false, then
          execution will continue with the next statement which will print
          <c>Drive carefully</c>. Run the code below to see this.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class Test1 {
              public static void main(String[] args) {
                  boolean isRaining = true;
                  if (isRaining) {
                      System.out.println("Take an umbrella!");
                  }
                  System.out.println("Drive carefully");
              }
          }
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Take an umbrella! \nDrive carefully";
        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="iffalseOutput">
      <title>Change <c>isRaining</c></title>

      <statement>
        <p>
          Try changing the code above to <c>boolean isRaining = false;</c>. What
          will it print?
        </p>

        <p>
          <fillin answer="Drive carefully" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>
                Correct. If the boolean is false, it will skip executing the
                <c>println</c> controlled by the <c>if</c> but will still
                execute the <c>println</c> after the <c>if</c> statement.
              </p>
            </feedback>
          </test>

          <test>
            <feedback>
              <p>
                Try changing it to false and run it. Type in the output exactly
                with the D capitalized and 1 space in between the words.
              </p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>
  </subsection>

  <subsection xml:id="two-way-selection">
    <title>Two-way selection</title>
    <p>
      What if you want to pick between two possibilities? If you are trying to
      decide between a couple of things to do, you might flip a coin and do one
      thing if it lands as heads and another if it is tails. In programming, you
      can use the <term>if</term> keyword followed by a statement or block of
      statements and then the <term>else</term> keyword also followed by a
      statement or block of statements.
    </p>

    <program language="java">
      // A block if/else statement
      if (boolean expression) {
         statement1;
         statement2;
      } else {
         do other statement;
         and another one;
      }
    </program>

    <program language="java">
      // A single if/else statement
      if (boolean expression)
        Do statement;
      else
        Do other statement;
    </program>

    <p>
      A two-way selection (if-else statement) is used when there are two
      segments of code—one to be executed when the Boolean expression is true
      and another segment for when the Boolean expression is false. In this
      case, the body of the if is executed when the Boolean expression is true,
      and the body of the else is executed when the Boolean expression is false.
    </p>

    <p>
      The following flowchart demonstrates that if the condition (the boolean
      expression) is true, one block of statements is executed, but if the
      condition is false, a different block of statements inside the else clause
      is executed.
    </p>

    <figure align="center">
      <caption>Flowchart of a two-way selection</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/Condition-two.png" width="63%" />
    </figure>

    <activity label="ifHeads">
      <statement>
        <p>
          Try the following code. If <c>isHeads</c> is true it will print
          <c>Let's go to the game</c> and then <c>after conditional</c>.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class Test2 {
              public static void main(String[] args) {
                  boolean isHeads = true;
                  if (isHeads) {
                      System.out.println("Let's go to the game");
                  } else {
                      System.out.println("Let's watch a movie");
                  }
                  System.out.println("after conditional");
              }
          }
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Let's go to the game\nafter conditional";

        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="falseElse">
      <statement>
        <p>
          Try changing the code above to <c>boolean isHeads = false;</c>. What
          line will be printed before <c>after conditional</c>?
        </p>

        <p>
          <fillin answer="Let's watch a movie" mode="string" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>
                Correct. If the boolean value is false, the else statement will
                execute.
              </p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Try it and see.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>
  </subsection>

  <subsection xml:id="multiway-selection-else-if">
    <title>Multiway selection</title>
    <idx>Nested if statements</idx>
    <idx>Multiway selection</idx>
    <idx>else if</idx>
    <p>
      Since the body of an <c>if</c> statement or an <c>else</c> can contain any
      code, we can nested <c>if</c> statements inside other <c>if</c>
      statements. There’s nothing magical about this: just the natural
      consequence of building programs out of simple pieces. Consider this code:
    </p>

    <program language="java">
      if (hungry) {
        if (sleepy) {
          eatQuickSnack();
        } else {
          makeSomethingFancy();
        }
      }
    </program>

    <p>
      The outer <c>if</c> is a one-way selection that will run some code if
      <c>hungry</c> is true. The body of that <c>if</c> statement is another
      <c>if</c> statement that implements a two-selection based on the value of
      <c>sleepy</c>. So really this code is choosing between three outcomes, one
      when <c>hungry</c> and <c>sleepy</c> are both true, one when <c>hungry</c>
      is true but <c>sleepy</c> is false, and one when <c>hungry</c> is false.
      In the latter case the code doesn’t do anything.
    </p>

    <p>
      Now look at another <c>if</c>, this time with another <c>if</c> nested in
      the body of the <c>else</c>.
    </p>

    <program language="java">
      if (hungry) {
        eatSnack();
      } else {
        if (sleepy) {
          takeNap();
        } else {
          doHomework();
        }
      }
    </program>

    <p>
      This code also chooses between three outcomes but in each of the outcomes
      some code runs: <c>eatSnack()</c> if <c>hungry</c> is true,
      <c>takeNap()</c> if <c>sleepy</c> is true, and <c>doHomework()</c>
      otherwise.
    </p>

    <p>
      To emphasize that the three branches are all kind of at the same level
      we’d normally format this code slightly differently:
    </p>

    <program language="java">
      if (hungry) {
        eatSnack();
      } else if (sleepy) {
        takeNap();
      } else {
        doHomework();
      }
    </program>

    <p>
      When we chain together <c>if</c> statements like this, it is called a
      <term>multiway selection</term> because the code chooses not between
      running code or not as in a one-way selection, or between two pieces of
      code as in a two-way selection, but between as many different pieces of
      code as we want to chain together.
    </p>

    <activity label="TryElseIf">
      <statement>
        <p>
          Run the code below and try changing the value of x to get each of the
          three possible lines in the conditional to print.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class TryElseIf {
              public static void main(String[] args) {
                  int x = 2;
                  if (x &lt; 0) {
                      System.out.println("x is negative");
                  } else if (x == 0) {
                      System.out.println("x is zero");
                  } else {
                      System.out.println("x is positive");
                  }
                  System.out.println("after conditional");
              }
          }
        </code>
        <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class RunestoneTests extends CodeTestHelper {
    public RunestoneTests() {
        super("TryElseIf"); // for Book
    }

    @Test
    public void test01() {
        String code = getCode();
        String actual = "";
        int num = 2;

        Pattern pattern = Pattern.compile("x\\s*=\\s*(-?\\d+)");
        Matcher matcher = pattern.matcher(code);
        if (matcher.find()) {
            actual = matcher.group();
        }

        boolean passed = !stringMatch(code, "x = 2;");

        getResults("x = ?;", actual, "Checking that x has been changed.", passed);
        assertTrue(passed);
    }

    @Test
    public void test02() {
        String code = getCode();
        String actual = "";
        int num = 2;

        Pattern pattern = Pattern.compile("x\\s*=\\s*(-?\\d+)");
        Matcher matcher = pattern.matcher(code);
        if (matcher.find()) {
            actual = matcher.group();
            //num = Integer.parseInt(matcher.group(1));
        }

        boolean passed = actual.contains("-") || actual.contains("0");

        getResults("x &lt;= 0", actual, "Checking that x is zero or negative", passed);
        assertTrue(passed);
    }

    @Test
    public void test03() {
        String output = getMethodOutput("main").split("\n")[0];
        String expect = "x is negative";

        String code = getCode();
        String actual = "";
        int num = 2;

        Pattern pattern = Pattern.compile("x\\s*=\\s*(-?\\d+)");
        Matcher matcher = pattern.matcher(code);
        if (matcher.find()) {
            actual = matcher.group();
            num = Integer.parseInt(matcher.group(1));
        }

        if (num == 0) expect = "x is zero";

        boolean passed = getResults(expect, output, "Checking for correct output");
        assertTrue(passed);
    }

    private boolean stringMatch(String str1, String str2) {
        str1 = str1.replaceAll("\\s", "");
        str2 = str2.replaceAll("\\s", "");

        return str1.contains(str2);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      Here is a flowchart for a conditional with 3 options like in the code
      above.
    </p>

    <figure align="center">
      <caption>Flowchart of a three-way selection</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/Condition-three.png" width="80%" />
    </figure>

    <note>
      <p>
        Another way to handle 3 or more conditional cases is to use a
        <c>switch</c> statement but that is outside the AP curriculum. For a
        tutorial on using switch see <url
        href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html">The
        switch Statement</url> tutorial on Oracle’s website.
      </p>
    </note>

    <activity label="trace-nested-if">
      <statement>
        <p>What does the following code print when x has been set to -5?</p>
        <program language="java">
          <code>
if (x &lt; 0)
{
   System.out.println("x is negative");
}
else if (x == 0)
{
   System.out.println("x is zero");
}
else
{
   System.out.println("x is positive");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>x is negative</p>
          </statement>

          <feedback>
            <p>When x is equal to -5 the condition of x &lt; 0 is true.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>x is zero</p>
          </statement>

          <feedback>
            <p>This will only print if x has been set to 0. Has it?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>x is positive</p>
          </statement>

          <feedback>
            <p>This will only print if x is greater than zero. Is it?</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="trace-nested-ifs2">
      <statement>
        <p>What does the following code print when x has been set to 2000?</p>
        <program language="java">
          <code>
if (x &lt; 0)
{
   System.out.println("x is negative");
}
else if (x == 0)
{
   System.out.println("x is zero");
}
else
{
   System.out.println("x is positive");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>x is negative</p>
          </statement>

          <feedback>
            <p>
              This will only print if x has been set to a number less than zero.
              Has it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>x is zero</p>
          </statement>

          <feedback>
            <p>This will only print if x has been set to 0. Has it?</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>x is positive</p>
          </statement>

          <feedback>
            <p>
              The first condition is false and x is not equal to zero so the
              else will execute.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="trace-nested-ifs3">
      <statement>
        <p>What does the following code print when x has been set to .8?</p>
        <program language="java">
          <code>
if (x &lt; .25)
{
    System.out.println("first quartile");
}
else if (x &lt; .5)
{
    System.out.println("second quartile");
}
else if (x &lt; .75)
{
    System.out.println("third quartile");
}
else
{
    System.out.println("fourth quartile");
}
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>first quartile</p>
          </statement>

          <feedback>
            <p>This will only print if x is less than 0.25.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>second quartile</p>
          </statement>

          <feedback>
            <p>
              This will only print if x is greater than or equal to 0.25 and
              less than 0.5.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>third quartile</p>
          </statement>

          <feedback>
            <p>
              The first only print if x is greater than or equal to 0.5 and less
              than 0.75.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>fourth quartile</p>
          </statement>

          <feedback>
            <p>This will print whenever x is greater than or equal to 0.75.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="ifElseIfDebug">
      <statement>
        <p>
          The else-if connection is necessary if you want to hook up
          conditionals together. In the following code, there are 4 separate if
          statements instead of the if-else-if pattern. Will this code print out
          the correct grade? First, trace through the code to see why it prints
          out the incorrect grade. Use the Code Lens button. Then, fix the code
          by adding in 3 else’s to connect the if statements and see if it
          works.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
import java.util.Scanner;

public class IfDebug
{
    public static void main(String[] args)
    {
        Scanner scan = new Scanner(System.in);
        int score = scan.nextInt();

        String grade = "";

        if (score &gt;= 90)
        {
            grade = "A";
        }
        if (score &gt;= 80)
        {
            grade = "B";
        }
        if (score &gt;= 70)
        {
            grade = "C";
        }
        if (score &gt;= 60)
        {
            grade = "D";
        }
        else
        {
            grade = "F";
        }

        System.out.println(score + " = " + grade);
    }
}
        </code>
        <stdin>93</stdin>
        <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("IfDebug"); // for Book
    }

    private static String input1 = "93";

    @Test
    public void test01()
    {
        String x = "95";
        String result = "A";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            x + " = " + result,
            output,
            "Result for score = " + x,
            passed);
        assertTrue(passed);
    }

    @Test
    public void test02()
    {
        String x = "85";
        String result = "B";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            x + " = " + result,
            output,
            "Result for score = " + x,
            passed);
        assertTrue(passed);
    }

    @Test
    public void test03()
    {
        String x = "75";
        String result = "C";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            x + " = " + result,
            output,
            "Result for score = " + x,
            passed);
        assertTrue(passed);
    }

    @Test
    public void test04()
    {
        String x = "65";
        String result = "D";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            x + " = " + result,
            output,
            "Result for score = " + x,
            passed);
        assertTrue(passed);
    }

    @Test
    public void test05()
    {
        String x = "55";
        String result = "F";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            x + " = " + result,
            output,
            "Result for score = " + x,
            passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="ifelseifBattery">
      <statement>
        <p>
          Finish the following code so that it prints “Plug in your phone!” if
          the battery is below 50, “Unplug your phone!” if it is at or above
          100, and “All okay!” otherwise. Change the battery value to test all 3
          conditions.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
import java.util.Scanner;

public class BatteryTest
{
    public static void main(String[] args)
    {
        Scanner scan = new Scanner(System.in);
        int battery = scan.nextInt();
        System.out.println("battery = " + battery);

        System.out.println("All okay!");
    }
}
        </code>
        <stdin>75</stdin>
        <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    public RunestoneTests()
    {
        super("BatteryTest"); // for Book
    }

    private static String input1 = "93";

    @Test
    public void test01()
    {
        String x = "95";
        String result = "All okay!";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            result,
            output,
            "Result for battery = " + x,
            passed);
        assertTrue(passed);
    }

    @Test
    public void test02()
    {
        String x = "100";
        String result = "Unplug your phone!";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            result,
            output,
            "Result for battery = " + x,
            passed);
        assertTrue(passed);
    }

    @Test
    public void test03()
    {
        String x = "45";
        String result = "Plug in your phone!";
        String output = getMethodOutputWithInput("main", x);

        boolean passed = output.contains(result);

        passed =
        getResults(
            result,
            output,
            "Result for battery = " + x,
            passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-magic-8-ball">
    <title>Coding Challenge: Magic 8 Ball</title>
    <image source="Unit2-Selection-and-Iteration/Figures/Magic_eight_ball.png" width="18%" alt="Magic 8 Ball" />
    <p>
      Have you ever seen a Magic 8 ball? You ask it a yes-no question and then
      shake it to get a random response like <c>Signs point to yes!</c>, <c>Very
      doubtful</c>, etc. If you’ve never seen a Magic 8 ball, check out this
      <url href="https://magic-8ball.com/"
      visual="https://magic-8ball.com/">simulator</url>. In the exercise below,
      come up with 8 responses to yes-no questions. Write a program below that
      chooses a random number from 1 to 8 and then uses if statements to test
      the number and print out the associated random response from 1-8. If you
      need help with random numbers, see the <url
      href="../Unit1-Using-Objects-and-Methods/topic-1-11-Math.html"
      visual="../Unit1-Using-Objects-and-Methods/topic-1-11-Math.html">Math
      lesson</url> and remember the formula <c>(int) (Math.random() * max) +
      min</c>.
    </p>

    <project label="challenge-Magic8ball">
      <statement>
        <p>
          Complete the <c>printRandomResponse()</c> method to print out 1 of 8
          random responses and the <c>lucky()</c> method to toss a coin and
          print out “Lucky!” or “No Luck!” based on the result. Run the code
          multiple times to see the responses.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Magic8Ball
{
    public static void printRandomResponse()
    {
        // 1. Get a random number from 1 to 8

        // 2. Use if statements to test the random number
        //    and print out 1 of 8 random responses

     }

     public static void lucky()
     {
         // 3. Use Math.random() to toss a coin to choose between 2 choices
         // 4. Use an if/else statement to test the random number
         //    and print out "Lucky!" or else "No Luck!"

     }

     public static void main(String[] args)
     {
         String question = "Will it rain tomorrow?";
         System.out.println(question);
         printRandomResponse();
         lucky();
     }
 }
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;
import java.util.ArrayList;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Magic8Ball");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");

        boolean passed = output.length() &gt; 0;

        passed =
                getResults(
                        "Output length &gt; 0",
                        "Output length of " + output.length(),
                        "Prints a statement",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        String[] output = new String[200];

        for (int i = 0; i &lt; output.length; i++)
        {
            output[i] = getMethodOutput("main");
        }

        ArrayList&lt;String&gt; lines = new ArrayList&lt;String&gt;();

        for (int i = 0; i &lt; output.length; i++)
        {
            if (!lines.contains(output[i]))
            {
                lines.add(output[i]);
            }
        }

        int responses = lines.size();
        boolean passed = lines.size() &gt;= 8;

        passed = getResults("8", "" + responses, "Unique responses", passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCodeWithoutComments();

        int numIfs = countOccurences(code, "if");

        boolean passed = numIfs &gt;= 8;

        passed = getResults("8 or more", "" + numIfs, "Code has at least 8 if statements", passed);
        assertTrue(passed);
    }
    @Test
    public void testElse()
    {
        String target = "else";
        boolean passed = checkCodeContains("else statement in lucky() method", target);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>

    <p>
      You can make this code more interactive by using the <c>Scanner</c> class
      to have the user ask a question first; you can try your code with input in
      <url
      href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/feaeda26-4591-4523-bbc2-ad6e8eca2633#abe979a9-45e0-455d-8a0d-1dde8c8a5d4e"
      visual="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/feaeda26-4591-4523-bbc2-ad6e8eca2633#abe979a9-45e0-455d-8a0d-1dde8c8a5d4e">JuiceMind</url>
      or <url
      href="https://replit.com/@BerylHoffman/Magic8BallTemplate#Main.java"
      visual="https://replit.com/@BerylHoffman/Magic8BallTemplate#Main.java">replit</url>
      or a local IDE.
    </p>
  </subsection>

  <subsection>
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 2.3.A.1) Selection statements change the sequential execution of
            statements.
          </p>
        </li>

        <li>
          <p>
            (AP 2.3.A.2) An <term>if statement</term> is a type of selection
            statement that affects the flow of control by executing different
            segments of code based on the value of a Boolean expression.
          </p>
        </li>

        <li>
          <p>
            (AP 2.3.A.3) A one-way selection (if statement) is used when there
            is a segment of code to execute under a certain condition. In this
            case, the body is executed only when the Boolean expression is true.
          </p>
        </li>

        <li>
          <p>
            <term>if statements</term> test a boolean expression and if it is
            true, go on to execute the body which is the following statement or
            block of statements surrounded by curly braces (<c>{}</c>) like
            below.
          </p>
        </li>

        <li>
          <p>
            (AP 2.4.A.1) Nested if statements consist of if, if-else, or
            if-else-if statements within if, if-else, or if-else-if statements.
          </p>
        </li>

        <li>
          <p>
            (AP 2.4.A.2) The Boolean expression of the inner nested if statement
            is evaluated only if the Boolean expression of the outer if
            statement evaluates to true.
          </p>
        </li>

        <li>
          <p>
            (AP 2.4.A.3) A multi-way selection (if-else-if) is used when there
            are a series of expressions with different segments of code for each
            condition. Multi-way selection is performed such that no more than
            one segment of code is executed based on the first expression that
            evaluates to true. If no expression evaluates to true and there is a
            trailing else statement, then the body of the else is executed.
          </p>
        </li>
      </ul>
    </p>

    <program language="java">
      <code>
// A single if statement
if (boolean expression)
    Do statement;
// A block if statement
if (boolean expression)
{
   Do Statement1;
   Do Statement2;
   ...
   Do StatementN;
}
      </code>
    </program>

    <p>
      <ul>
        <li>
          <p>
            Relational operators (==, !=, &lt;, &gt;, &lt;=, &gt;=) are used in
            boolean expressions to compare values and arithmetic expressions.
          </p>
        </li>

        <li>
          <p>
            If statements can be followed by an associated <term>else</term>
            part to form a 2-way branch:
          </p>
        </li>
      </ul>
    </p>

    <program language="java">
      <code>
if (boolean expression)
{
    Do statement;
}
else
{
    Do other statement;
}
      </code>
    </program>

    <p>
      <ul>
        <li>
          <p>
            (AP 2.3.A.4) A two-way selection (if-else statement) is used when
            there are two segments of code—one to be executed when the Boolean
            expression is true and another segment for when the Boolean
            expression is false. In this case, the body of the if is executed
            when the Boolean expression is true, and the body of the else is
            executed when the Boolean expression is false.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-13">
    <title>AP Practice</title>
    <activity label="AP2-3-1">
      <statement>
        <p>Consider the following code segment.</p>
        <program language="java">
          <code>
int speed = 35;
boolean rain = false;

if (rain)
{
   speed -= 10;
}

if (rain == false)
{
  speed += 5;
}

if (speed &gt; 35)
{
   speed = speed - 2;
}

System.out.println(speed);
          </code>
        </program>

        <p>What is printed as a result of executing the code segment?</p>
      </statement>

      <choices>
        <choice>
          <statement id="AP2-3-1_opt_a">
            <p>28</p>
          </statement>

          <feedback id="AP2-3-1_opt_a">
            <p>
              Some of the if statement conditions are false so they will not
              run.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-1_opt_b">
            <p>35</p>
          </statement>

          <feedback id="AP2-3-1_opt_b">
            <p>Take a look at the changes to speed in the if statements.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP2-3-1_opt_c">
            <p>38</p>
          </statement>

          <feedback id="AP2-3-1_opt_c">
            <p>
              Correct! The first if statement condition is false, and the second
              and third if conditions are true.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-1_opt_d">
            <p>25</p>
          </statement>

          <feedback id="AP2-3-1_opt_d">
            <p>The first if statement would only run if rain is true.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-1_opt_e">
            <p>33</p>
          </statement>

          <feedback id="AP2-3-1_opt_e">
            <p>The second if statement would run since rain is false.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP2-3-2">
      <statement>
        <p>Consider the following code segment.</p>
        <program language="java">
          <code>
int x = 5;

if (x &lt; 5)
{
   x = 3 * x;
}

if (x % 2 == 1)
{
   x = x / 2;
}

System.out.print(2*x + 1);
          </code>
        </program>

        <p>What is printed as a result of executing the code segment?</p>
      </statement>

      <choices>
        <choice>
          <statement id="AP2-3-2_opt_a">
            <p>3</p>
          </statement>

          <feedback id="AP2-3-2_opt_a">
            <p>Take a look at the second if statement again!</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-2_opt_b">
            <p>11</p>
          </statement>

          <feedback id="AP2-3-2_opt_b">
            <p>Take a look at the second if statement again!</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-2_opt_c">
            <p>31</p>
          </statement>

          <feedback id="AP2-3-2_opt_c">
            <p>The first if statement condition is false.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-2_opt_d">
            <p>15</p>
          </statement>

          <feedback id="AP2-3-2_opt_d">
            <p>The first if statement condition is false.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP2-3-2_opt_e">
            <p>5</p>
          </statement>

          <feedback id="AP2-3-2_opt_e">
            <p>
              Correct! The first if statement is not true. The second one is
              true since 5 is odd, and x becomes 2. And 2*2 + 1 = 5 is printed
              out.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP2-3-if-else">
      <statement>
        <p>
          Consider the following code segment where a range of “High”, “Middle”,
          or “Low” is being determined where x is an int and a “High” is 80 and
          above, a “Middle” is between 50 - 79, and “Low” is below 50.
        </p>

        <program language="java">
          <code>
if (x &gt;= 80)
{
   System.out.println("High");
}

if (x &gt;= 50)
{
  System.out.println("Middle");
}
else
{
   System.out.println("Low");
}
          </code>
        </program>

        <p>
          Which of the following initializations for <em>x</em> will demonstrate
          that the code segment will not work as intended?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement id="AP2-3-if-else_opt_a">
            <p>80</p>
          </statement>

          <feedback id="AP2-3-if-else_opt_a">
            <p>
              This would print out both “High” and “Middle”, showing that there
              is an error in the code. As you will see in the next lesson, one
              way to fix the code is to add another else in front of the second
              if.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-if-else_opt_b">
            <p>60</p>
          </statement>

          <feedback id="AP2-3-if-else_opt_b">
            <p>This would correctly print out “Middle”.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-if-else_opt_c">
            <p>50</p>
          </statement>

          <feedback id="AP2-3-if-else_opt_c">
            <p>This would correctly print out “Middle”.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-if-else_opt_d">
            <p>30</p>
          </statement>

          <feedback id="AP2-3-if-else_opt_d">
            <p>
              This would print out “Low” which is correct according to this
              problem description.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP2-3-if-else_opt_e">
            <p>-10</p>
          </statement>

          <feedback id="AP2-3-if-else_opt_e">
            <p>
              This would print out “Low” which is correct according to this
              problem description.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-nested-if-else">
      <statement>
        <p>
          Assume an int variable x has been properly declared and initialized.
          Which of the following code segments will print out “High” if
          <em>x</em> is 66 and above, “Medium” is <em>x</em> is between 33-65,
          and “Low” if <em>x</em> is below 33.
        </p>

        <program language="java">
          <code>
I.   if (x &gt; 66)
     {
       System.out.println("High");
     }
     else if (x &gt; 33)
     {
       System.out.println("Medium");
     }
     else {
       System.out.println("Low");
     }

II.  if (x &lt; 33)
     {
       System.out.println("Low");
     }
     else if (x &lt; 66)
     {
       System.out.println("Medium");
     }
     else {
       System.out.println("High");
     }

III. if (x &gt;= 66)
     {
       System.out.println("High");
     }
     if (x &gt;= 33)
     {
       System.out.println("Medium");
     }
     if (x &lt; 33)
     {
       System.out.println("Low");
     }
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement id="AP-nested-if-else_opt_a">
            <p>I only</p>
          </statement>

          <feedback id="AP-nested-if-else_opt_a">
            <p>If x = 66, it should print out “High”.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-nested-if-else_opt_b">
            <p>II only</p>
          </statement>

          <feedback id="AP-nested-if-else_opt_b">
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-nested-if-else_opt_c">
            <p>III only</p>
          </statement>

          <feedback id="AP-nested-if-else_opt_c">
            <p>
              If x is 66, the code in III. will print out more than one thing.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-nested-if-else_opt_d">
            <p>I and II only</p>
          </statement>

          <feedback id="AP-nested-if-else_opt_d">
            <p>If x = 66, it should print out “High”.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-nested-if-else_opt_e">
            <p>II and III only</p>
          </statement>

          <feedback id="AP-nested-if-else_opt_e">
            <p>
              If x is 66, the code in III. will print out more than one thing.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
