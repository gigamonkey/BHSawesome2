<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-2-1-algorithms">
  <title>Algorithms</title>
  <introduction>
    <idx>selection</idx>
    <idx>repetition</idx>
    <idx>sequencing</idx>
    <idx>algorithm</idx>
    <idx>pseudocode</idx>
    <p>
      In the <xref ref="introduction" /> we briefly described algorithms as
      something like a recipe or directions to a friend’s house: a specific set
      of steps to perform for achieving some result. But the features of Java
      we’ve learned so far aren’t really sufficient to create algorithms in
      Java. The most complex code we’ve written so far has only involved code
      that proceeds in an essentially straight line. We may use methods to break
      up the code but each method runs from top to bottom and if we wanted we
      could get rid of all the methods but one and—at the cost of some
      duplication—put all the code in one sequence in that one method.
    </p>

    <p>
      One of the most important, and perhaps surprising facts about computers,
      discovered in the earliest days of computer science, is that we only need
      a three pretty simple building blocks to be able to create code that
      implements any algorithm that can be run on any computer. The three
      building blocks of algorithms are <term>sequencing</term>,
      <term>selection</term>, and <term>repetition</term> each of which control
      how our program executes.
    </p>

    <figure align="center">
      <caption>Sequence, Selection, and Repetition</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/algorithms.png" width="63%" />
    </figure>
  </introduction>

  <subsection>
    <title>Sequencing</title>
    <p>
      Sequencing is the simplest of the three building blocks. In fact we’ve
      been using all this time without even mentioning it. It just means running
      one step of an algorithm after after another in the order they are
      written. That is the default <term>control flow</term> in Java and most
      other programming languages where a step roughly corresponds to a line of
      code. It may seem trivial but it is important. Consider this simple bit of
      code, assuming <c>x</c> and <c>y</c> have already been declared somewhere.
    </p>

    <program language="java">
      x = 10;
      y = x + 20;
      x = 30;
      System.out.println("x: " + x + "; y: " + y);
    </program>

    <p>
      It's only because of sequencing that we can know that that program will
      print <c>"x: 30; y: 30"</c>. If we didn’t know that the lines would run in
      order maybe the assignment to <c>y</c> would happen after <c>x</c> was set
      to 30 rather than before. Or maybe the <c>println</c> would run before
      either variable had been given a value! But the default <term>control
      flow</term> of sequencing one thing after another lets us understand what
      is going to happen when.
    </p>
  </subsection>

  <subsection xml:id="selection">
    <title>Selection</title>
    <p>
      Selection—sometimes called <term>branching control flow</term>—is when
      some code either runs or doesn’t. We “select” whether to run it—based on
      some other values. For instance, an algorithm for assigning grades might
      contain a line to set a student’s grade to an A but will only run that
      line if the student’s average score is greater than 90%.
    </p>

    <p>
      As we’ll see there are all kinds of ways to make complicated selections
      but ultimately they all boil down to some combination of a simple
      selection based on some condition being either true or false. Either the
      student’s average score is greater than 90% and they get an A or it’s not
      and they don’t.
    </p>

    <activity label="clickSelection">
      <title>Morning routine</title>
      <statement>
        <p>
          Practice identifying decision points by clicking on all the phrases in
          the following human algorithm that describe a choice.
        </p>
      </statement>

      <feedback>
        <p>
          Selections are made based on a true or false decision. Look for the
          word "if" to identify selections.
        </p>
      </feedback>

      <areas>
        <cline>Morning routine:</cline>
        <cline><area correct="no">1. Wake up.</area></cline>
        <cline><area correct="no">2. Snooze for 5 more minutes.</area></cline>
        <cline><area correct="no">3. Check your phone and the weather</area></cline>
        <cline><area correct="yes">4. If there is a text from your friend, answer it.</area></cline>
        <cline><area correct="no">5. Brush teeth and shower.</area></cline>
        <cline><area correct="yes">6. If it’s cold, wear a sweater.</area></cline>
        <cline><area correct="yes">7. Check if you have homework due. If so, pack it in your bag.</area></cline>
        <cline><area correct="yes">8. Put on your sunglasses if it's sunny.</area></cline>
        <cline><area correct="no">9. Leave for school or work.</area></cline>
      </areas>
    </activity>
  </subsection>

  <subsection xml:id="repetition">
    <title>Repetition</title>
    <p>
      Finally, the third building block, repetition—also called <term>looping
      control flow</term> or <term>iteration</term>—is when some code is run
      repeatedly. Usually it is combined with selection to repeatedly run some
      code until a desired outcome is reached. In Java repetition is achieved
      through a couple flavors of <term>loops</term> that build in the
      selection. We’ll discuss loops in the next unit.
    </p>

    <p>
      And thats it! Any algorithm that any computer can execute can be built out
      of some combination of those three building blocks plus the ability to
      store and retrieve values (i.e. variables).
    </p>

    <activity label="clickRepetition">
      <title>Another morning routine</title>
      <statement>
        <p>
          Click on all of the repetition phrases in the following algorithm.
        </p>
      </statement>

      <feedback>
        <p>
          Repetition is when a process repeats itself until a desired outcome is
          reached. Look for the word "repeat" or "all" or "keep" to identify
          repetition.
        </p>
      </feedback>

      <areas>
        <cline>Morning routine 2:</cline>
        <cline><area correct="no">1. Wake up.</area></cline>
        <cline><area correct="no">2. Snooze for 5 more minutes.</area> <area correct="yes">Keep waking up and snoozing for the next 15 minutes</area></cline>
        <cline><area correct="yes">3. Answer all new texts from your friends.</area></cline>
        <cline><area correct="no">4. Brush teeth and shower.</area></cline>
        <cline><area correct="no">5. If it’s cold, wear a sweater.</area></cline>
        <cline><area correct="yes">6. For each of your classes where you have homework due, pack it in your bag.</area></cline>
        <cline><area correct="no">8. Leave for school or work.</area></cline>
      </areas>
    </activity>
  </subsection>

  <subsection xml:id="algorithms-with-pseudocode-and-flowcharts">
    <title>Describing algorithms</title>
    <p>
      Although we can build any algorithm with some combination of just three
      simple building blocks, as is often the case with programming, when we are
      building complex things out of simple parts it can be hard to keep track
      of how everything fits together. Indeed, arguably the whole task of
      learning to program is really about learning to manage that complexity.
    </p>

    <p>
      When we are trying to design and implement even slightly complicated
      algorithms, For complex problems, it can be useful to make a plan before
      we start writing code. Two common ways of describing algorithms that
      programmers will use before trying to write actual code are
      <term>pseudocode</term> and <term>flowcharts</term>.
    </p>

    <p>
      Pseudocode is a simplified, informal way of describing the steps in an
      algorithm in a language that’s part way between a human language like
      English and an actual programming language like Java. As long as we have
      some way of describing sequences, selection, and repetition we can
      describe an algorithm.
    </p>

    <p>
      Flowcharts do the same thing but graphically, representing the steps in an
      algorithm in a diagram like the one below. Sequences of code are typically
      represented with a rectangle labeled with a description of what happens
      inside that box. Decisions points in selections are usually represented as
      a diamond with a yes/no question in it and arrows coming out labeled “yes”
      and “no” or “true” and “false”. And repetition is created by arrows that
      create loops in the diagram.
    </p>

    <figure align="center">
      <caption>Flowchart for Selection branching the code into two paths</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/Condition-two.png" width="63%" />
    </figure>

    <p>
      Once we have an algorithm described in pseudocode or a flowchart, we can
      then use it as a guide to implementing the algorithm, translating the
      sequences, selections, and repetitions into actual Java code using the
      constructs we’ll learn about in the rest of this unit and the next.
    </p>

    <activity label="algorithm-gift" numbered="yes" adaptive="yes" indentation="show" language="java">
      <title>Birthday buying spree</title>
      <statement>
        <p>
          The top box below contains a scrambled pseudocode description of an
          algorithm for buying a birthday gift for your friend with the goal of
          buying as the most expensive gifts possible given a certain amount of
          money.
        </p>

        <p>
          Put the steps into the correct order by dragging them into the lower
          box. The indented steps are intended to go inside another construct
          such as the repetition.
        </p>

        <p>
          Click the “Check” button when you’re done to see if you are right.
        </p>
      </statement>

      <blocks>
        <block order="4">
          <cline>Initialize *total* amount of money.</cline>
        </block>

        <block order="5">
          <cline>Repeat while still money in *total*:</cline>
        </block>

        <block order="6">
          <cline>   If total more than $25, buy a gift card and subtract 25 from total.</cline>
        </block>

        <block order="3">
          <cline>   If total more than $10, buy a small cake and subtract 10 from total.</cline>
        </block>

        <block order="2">
          <cline>   If total more than $5, buy some candy and subtract 5 from total.</cline>
        </block>

        <block order="7">
          <cline>   If total more than $1, buy a card and subtract 1 from total.</cline>
        </block>

        <block order="1">
          <cline>   Otherwise, give them the change.</cline>
        </block>
      </blocks>
    </activity>

    <activity label="trace-algorithm-gift1">
      <statement>
        <p>
          Given the pseudocode for buying a gift above, assume you have $16 to
          spend. What will be the outcome of the algorithm?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>You will buy a gift card, a small cake, some candy, and a card.</p>
          </statement>

          <feedback>
            <p>
              Incorrect. You will not have enough money to buy all of these
              items.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>You will buy a small cake and some candy.</p>
          </statement>

          <feedback>
            <p>You still have a $1 left.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>You will buy a small cake, some candy, and a card.</p>
          </statement>

          <feedback>
            <p>Yep!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>You will buy 2 cakes and some candy.</p>
          </statement>

          <feedback>
            <p>
              Incorrect. You will not have enough money to buy all of these
              items.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="trace-algorithm-gift2">
      <statement>
        <p>
          Given the pseudocode for buying a gift above, assume you have $22 to
          spend. What will be the outcome of the algorithm?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>
              You will give them a gift card, a small cake, some candy, and a
              card.
            </p>
          </statement>

          <feedback>
            <p>
              Incorrect. You will not have enough money to buy all of these
              items.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>You will give them a small cake and some candy.</p>
          </statement>

          <feedback>
            <p>You still have money left.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>You will give them a small cake, some candy, and a card.</p>
          </statement>

          <feedback>
            <p>You still have money left.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>You will give them two cakes, and two cards.</p>
          </statement>

          <feedback>
            <p>Yep! That's a lot of cake!</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-algorithms">
    <title>Coding Challenge: Algorithms</title>
    <p>
      In this group activity, you will work together to create an algorithm for
      a common problem: choosing a snack! Create pseudocode for this problem.
      Make sure you include selection and repetition in your algorithm. For
      example, if there is no chocolate, you may want to keep searching for
      another snack. If you’re thirsty, you may want to consider the drinks in
      the fridge. You may want to consider every item in the fridge or your
      leftover halloween candy stash before deciding on the perfect snack. Be
      creative!
    </p>

    <project label="challenge-algorithm-snack">
      <title>Snack time!</title>
      <statement>
        <p>
          Write your pseudocode for choosing a snack here. Include selection and
          repetition in your algorithm. Be creative!
        </p>
      </statement>

      <response />
    </project>
  </subsection>

  <subsection xml:id="summary-15">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 2.1.A.1) The building blocks of algorithms include sequencing,
            selection, and repetition.
          </p>
        </li>

        <li>
          <p>
            (AP 2.1.A.2) Algorithms can contain selection, through decision
            making, and repetition, via looping.
          </p>
        </li>

        <li>
          <p>
            (AP 2.1.A.3) Selection occurs when a choice of how the execution of
            an algorithm will proceed is based on a true or false decision.
          </p>
        </li>

        <li>
          <p>
            (AP 2.1.A.4) Repetition is when a process repeats itself until a
            desired outcome is reached.
          </p>
        </li>

        <li>
          <p>
            (AP 2.1.A.5) The order in which sequencing, selection, and
            repetition are used contributes to the outcome of the algorithm.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
