<?xml version="1.0" encoding="utf-8"?>

<section xml:id="debugging-and-being-stuck">
  <title>Debugging and being stuck</title>

  <introduction>
    <p>
      The first and most obvious thing we need to learn about programming are
      the details of our programming languge, Java in our case. However as
      programmers have had to discover since the very beginning of programming,
      even when we know all those details, it can sometimes be frustratingly
      tricky to get our programs working correctly.
    </p>

    <p>
      The informal term for anything that makes a program not work correctly is
      <term>bug</term> and the process of getting all the bugs out of a program
      is called <term>debugging</term>. The term <term>bug</term> predates
      computers by at over half a century, at least. Thomas Edison wrote about
      working out the “bugs” in his inventions in 1878. And it made its way into
      engineering and from there into the world of computers so that when
      opererators working under Grace Hopper on the Harvard Mark II computer in
      1947 found an actual bug (a moth) inside the computer they taped it into
      the logbook with the note “First actual case of bug being found.”
    </p>

    <figure align="left">
      <caption>
        Early computer science pioneer <url
        href="https://en.wikipedia.org/wiki/Grace_Hopper">Grace Hopper’s</url>
        team documented a real bug, a moth that flew into a computer in 1947!
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/firstbug.jpg" width="54%" />
    </figure>

    <p>
      But bugs and debugging really came into their own with the invention of
      software. You might think that with no physical parts to break down or get
      jammed and no wires to be crossed, it would be simple to make software
      work. After all the computer just does what we tell it, right? Alas, it
      was no not to be, as Maurice Wilkes recounts discovering when working on
      EDSAC, one of the earliest stored-program computers in the world which
      came online in 1949:
    </p>

    <blockquote>
      <p>
        As soon as we started programming, we found out to our surprise that it
        wasn't as easy to get programs right as we had thought it would be.
        Debugging had to be discovered. And I can remember the exact instant
        where I was—our tape equipment was on one floor, the computer was on the
        other, and and I was passing down from the computer to make a change in
        my program tape—and in that instant I realized that a large part of my
        life from then on was going to be spent in finding mistakes in my own
        programs.
      </p>

      <attribution>
        Maurice Wilkes [in 1979] talking about his work in the 1940s.
      </attribution>
    </blockquote>

    <p>
      In this section we will look at some of the kinds of bugs you will
      undoubtedly soon encounter.
    </p>
  </introduction>

  <subsection>
    <title>Syntax errors</title>

    <p>
      The first kind of bug we need to deal with are called <term>syntax
      errors</term>. These are the programming equivalent of typos in English
      and usually come from the same cause: misplaced or missing punctuation,
      misspelled words, and incorrect capitalization. However, unlike in
      English, where we can still understand text even if it contains a
      misplaced comma or two, when a program does not exactly follow the rules
      of Java, it can’t be run at all.
    </p>

    <p>
      In Java running a program actually happens in two steps; first we compile
      it and that produces a set of files that Java can then run. Errors that
      are detected during compilation mean we don’t get the runnable files so we
      so we have to fix them before we can even run our program. These are also
      called <term>compile-time errors</term> because they are detected by the
      compiler.
    </p>

    <p>
      The good news is the Java compiler will tell you if your Java code is not
      exactly right. Examples of syntax errors are a semicolon <c>;</c> missing
      or if the code has a open curly brace <c>{</c> or open quote <c>"</c>, but
      no close curly brace <c>}</c> or close quote <c>"</c>.
    </p>

    <p>
      The more code you write and the more syntax errors you create and then
      remove, the more you will learn which details you really need to pay
      attention to. To get some practice at creating syntactically correct code
      try the following two exercises.
    </p>

    <exercise label="mixed-hi" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following has all the correct code to print out “Hi my friend!”
          when the code is run, but the code is mixed up. Drag the blocks from
          left to right and put them in the correct order. Click on the “Check
          Me” button to check your solution. You will be told if any of the
          blocks are in the wrong order or if you need to remove one or more
          blocks. After three incorrect attempts you will be able to use the
          Help Me button to make the problem easier.
        </p>
      </statement>

      <blocks>
        <block order="4">
          <cline>public class Hello</cline>
          <cline>{</cline>
        </block>

        <block order="1">
          <cline>   public static void main(String[] args)</cline>
          <cline>   {</cline>
        </block>

        <block order="2">
          <cline>      System.out.println("Hi my friend!");</cline>
        </block>

        <block order="3">
          <cline>   }</cline>
          <cline>}</cline>
        </block>
      </blocks>
    </exercise>

    <exercise label="mixed-hi-paired" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following has all the correct code to print out “Hi there!” when
          the code is run, but the code is mixed up and contains some extra
          blocks with errors. Drag the needed blocks from left to right and put
          them in the correct order. Click on the “Check Me” button to check
          your solution.
        </p>
      </statement>

      <blocks>
        <block order="6">
          <choice correct="yes">
            <cline>public class Hello</cline>
            <cline>{</cline>
          </choice>

          <choice>
            <cline>public Class Hello</cline>
            <cline>{</cline>
          </choice>
        </block>

        <block order="5">
          <choice correct="yes">
            <cline>   public static void main(String[] args)</cline>
            <cline>   {</cline>
          </choice>

          <choice>
            <cline>   public static void main()</cline>
            <cline>   {</cline>
          </choice>
        </block>

        <block order="8">
          <choice correct="yes">
            <cline>      System.out.println("Hi there!");</cline>
          </choice>

          <choice>
            <cline>      System.out.println("Hi there!")</cline>
            <cline />
          </choice>
        </block>

        <block order="2">
          <cline>   }</cline>
          <cline>}</cline>
        </block>
      </blocks>
    </exercise>
  </subsection>

  <subsection>
    <title>Reading error messages</title>

    <p>
      In this book when you press the Run button on coding exercises, the code
      is first complied and then run. But if the code has syntax errors or other
      compile-time errors, you will see error messages displayed below the code.
    </p>

    <p>
      In the exercises below, you will click the run button to compile and run
      the code. Unfortunately you will find that the initial code in each
      exercise contains at least one syntax error that you need to fix.
    </p>

    <p>
      It will be a lot easier to find the problems if you understand a few
      basics about how to read the error messages. They aren’t always easy to
      understand but knowing how they’re structured can help so let’s take a
      closer look.
    </p>

    <p>An error message will look something like this:</p>

    <program language="text">
      FirstClass.java:5: error: unclosed string literal
             System.out.println("Hi there!);
                                ^
      1 error
    </program>

    <p>
      The first line starts with the name of the file that was being compiled.
      (When we run code in this book we don’t name the file but it will be named
      to match the name of the class.) Then there’s a colon (<c>:</c>) followed
      by a number. That number tells us the line number in the file where the
      compiler detected the error, in this case line 5.
    </p>

    <p>
      Error messages aren’t always 100% accurate about where the error actually
      is; sometimes we actually need to change something a bit earlier in the
      program and sometimes a bit later. But the line the compiler is pointing
      us at is the best place to start looking.
    </p>

    <p>
      After the line number and another colon, we will find the actual error
      message. These can be kind of cryptic but you should still read it. As you
      learn more Java vocabulary they will become more meaningful but they
      almost always contain some useful clues. For instance take this error
      message: “unclosed string literal”. You may not know what a string literal
      is (yet) but “unclosed” suggests something was opened and then not closed.
      Keep that thought in mind.
    </p>

    <p>
      Now look at the next two lines. The very next line is just the line of
      code from your program. But below that is a very important line containing
      a single caret (<c>^</c>) positioned to point at exactly where in the line
      the Java compiler thinks the problem is. In this case it’s pointing at the
      quotation mark (<c>"</c>) before “Hi”. So it’s complaining about something
      being unclosed and it’s pointing us at a quotation mark. Usually quotation
      marks come in pairs called the open quote and the close quote, right? And
      if you look at the line of code you’ll see that there’s no closing
      quotation mark. Could that be the problem? Try adding a quotation mark and
      see if that fixes it!
    </p>

    <p>
      It is worth getting in the habit of really reading error messages. The
      people who wrote the Java compiler put in lot of work to try to make the
      error messages useful. If you read them, you’ll soon learn to recognize
      common mistakes and will get much quicker at finding your syntax errors.
    </p>

    <p>
      Another thing that happens sometimes is after we fix one syntax error,
      we’ll get a <em>new</em> syntax error. This is because sometimes the
      compiler can’t even detect the second error until the first one is fixed.
    </p>

    <p>
      Which is another reason it’s important to read error messages! It’s very
      tempting when we see that there’s an error to jump immediately to trying
      to fix it. Arg, an error! Get rid of it! But if we don’t slow down and
      read the message in a case like this, we might not notice that we’ve
      actually fixed the first error. And if we don’t notice that we fixed it,
      we might undo our change and <em>unfix</em> it!
    </p>

    <p>
      So read the error messages—they’re there to help you. With that in mind,
      see if you can fix the errors in the exercises below
    </p>

    <p>
      Practice finding and fixing syntax errors with the next three exercises.
    </p>

    <exercise label="sc2error1">
      <title>Compile Time Error 1</title>

      <statement>
        <p>
          Click the run button to try to run the following code. Look for an
          error message after the code and try to fix the code and run it again.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class FirstClass
          {
              public static void main(String[] args)
              {
                  System.out.println("Hi there!);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "Hi there!";
                  boolean passed =
                          getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </exercise>

    <exercise label="sc2error2">
      <title>Compile Time Error 2</title>

      <statement>
        <p>
          Click the run button to try to run the following code. Look for an
          error message after the code. This time the error message will
          probably point even more exactly at the problem than in the previous
          exercise. Try to fix the code and run it again.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class SecondClass
          {
              public static void main(String[] args)
              {
                  System.out.println("Hi there!";
              }
          }
        </code>

        <tests>
          // should pass if/when they run code
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "Hi there!";
                  boolean passed =
                          getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </exercise>

    <exercise label="sc2error3">
      <title>Compile Time Error 3</title>

      <statement>
        <p>
          Click on the run button below to try and run the following code. What
          is wrong this time? The first error message will probably point you
          directly at the problem. But after you fix that you’ll probably get a
          <em>new</em> error! A hint for the second error: capitalization
          matters.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class ThirdClass
          {
              public static void main(String[] args)
              {
                  system.out.println("Hi there!")
              }
          }
        </code>

        <tests>
          // should pass if/when they run code
          // This doesn't really work because it filters out the \n
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "Hi there!";
                  boolean passed =
                          getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </exercise>
  </subsection>

  <subsection>
    <title>Run-time Errors</title>

    <p>
      Some errors cannot be detected by the compiler. These are called
      <term>run-time errors</term>. These errors occur when the program is
      running, after the code is compiled. They can be caused by a variety of
      things, such as dividing by zero or trying to read from a file that
      doesn’t exist or a logic error in the code.
    </p>

    <p>
      An <term>exception</term> is a type of run-time error that occurs as a
      result of an unexpected error that was not detected by the compiler. It
      interrupts the normal flow of the program’s execution. Java will sometimes
      report an exception with a message that tells you what went wrong. For
      example, if you try to divide by zero, Java will throw (report) an
      <term>ArithmeticException</term> while running. Try this out in the code
      below.
    </p>

    <exercise label="divideByZeroDemo">
      <statement>
        <p>
          The following code has a run-time error. When you click on run, the
          compiler will not catch it since it is not a syntax error. The program
          will run and try to compute 3 divided by 0 which cannot be computed.
          This will cause a run-time error, and the program will report an
          <term>ArithmeticException</term>. Try it out!
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class DivideByZero
          {
             public static void main(String[] args)
             {
                 // It makes no sense to divide a number by zero!
                 System.out.println(3/0);
             }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String target = "DivideByZero";
                  boolean passed = checkCodeContains("DivideByZero", target);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </exercise>

    <p>
      Run-time errors can be difficult to find because they don’t always cause
      the program to crash. Sometimes they just cause the program to behave in
      unexpected ways because of an error in the logic. A <term>logic
      error</term> is a mistake in the algorithm or program that causes it to
      behave incorrectly or unexpectedly causing a run-time error. For example,
      a programmer might have made a math mistake so the wrong value is
      calculated. Logic errors can be detected by testing the program with
      specific data to see if it produces the expected outcome. We’ll see an
      example of this after learning about expressions in the next lessons.
    </p>
  </subsection>

  <subsection>
    <title>Debugging techniques</title>

    <p>
      Watch the following video to see that all coders get bugs. Debugging is a
      normal part of coding. It can be frustrating at times, but you will get
      better at it with practice! Sometimes another pair of eyes really helps,
      so ask a friend if you get stuck or try explaining your code line by line
      to someone or even a rubber duck. <url
      href="https://rubberduckdebugging.com/">Rubber duck debugging</url> is a
      lot of fun!
    </p>

    <video youtube="auv10y-dN4s" label="video-debugging" />
  </subsection>

  <subsection>
    <title>Debugging Challenge</title>

    <image source="Unit1-Using-Objects-and-Methods/Figures/rubberduck.jpg" width="18%">
      <shortdescription>Rubber Duck</shortdescription>
    </image>

    <p>
      In this course, you are encouraged to work together in pairs to complete
      the programming challenges. Pair programming is a successful software
      development technique where two programmers work together at one computer.
      One, the driver, types in code while the other, the navigator, gives ideas
      and feedback. The two coders switch roles frequently. Another option is
      buddy programming, where two or three coders work on their own computers
      but help each other as needed. If you’re working alone, you may want to
      explain the code to a rubber duck or another toy using <url
      href="https://rubberduckdebugging.com/">Rubber duck debugging</url>.
    </p>

    <p>
      Working in pairs, debug the following code. Can you find all the bugs and
      get the code to run?
    </p>

    <exercise label="challenge1-1">
      <statement>
        <p>Fix the code below.</p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Challenge1_1
          {
             public static void main(String[] args)
             {
                 System.out.println("Good morning! ")
                 system.out.printline("Good afternoon!);
                 System.PrintLn " And good evening!";

          }
        </code>

        <tests>
          // should pass if/when they run code
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "Good morning! Good afternoon! And good evening";
                  boolean passed =
                          getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </exercise>
  </subsection>

  <subsection>
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            A <term>syntax error</term> is a mistake in the program where the
            rules of the programming language are not followed. These errors are
            detected by the compiler.
          </p>
        </li>

        <li>
          <p>
            A <term>logic error</term> is a mistake in the algorithm or program
            that causes it to behave incorrectly or unexpectedly. These errors
            are detected by testing the program with specific data to see if it
            produces the expected outcome.
          </p>
        </li>

        <li>
          <p>
            A <term>run-time error</term> is a mistake in the program that
            occurs during the execution of a program. Run-time errors typically
            cause the program to terminate abnormally.
          </p>
        </li>

        <li>
          <p>
            An <term>exception</term> is a type of run-time error that occurs as
            a result of an unexpected error that was not detected by the
            compiler. It interrupts the normal flow of the program’s execution.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection>
    <title>AP Practice</title>

    <exercise label="AP1-1-print">
      <statement>
        <p>Consider the following code segment.</p>

        <program>
          System.out.println("Roses are red, ")              // Line 1;
          System.out.println("Violets are blue, ")           // Line 2;
          System.out.println("Unexpected '}' on line 32. ")  // Line 3;
        </program>

        <p>
          The code segment is intended to produce the following output but may
          not work as intended.
        </p>

        <pre>
Roses are red,
Violets are blue,
Unexpected '}' on line 32.
        </pre>

        <p>
          Which change, if any, can be made so that the code segment produces
          the intended output?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="AP1-1-print_opt_a">
            <p>Replacing <c>System</c> with <c>system</c> on all lines.</p>
          </statement>

          <feedback id="AP1-1-print_opt_a">
            <p>The class name System is always capitalized.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP1-1-print_opt_b">
            <p>Replacing println with print on lines 1 and 2.</p>
          </statement>

          <feedback id="AP1-1-print_opt_b">
            <p>println is correct to print out with a newline in between.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP1-1-print_opt_c">
            <p>Removing the single quotes in line 3.</p>
          </statement>

          <feedback id="AP1-1-print_opt_c">
            <p>The single quotes are fine in this line.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP1-1-print_opt_d">
            <p>Putting the semicolon after the ) on each line.</p>
          </statement>

          <feedback id="AP1-1-print_opt_d">
            <p>
              Correct! The semicolon should go after each statement but not in
              the comment.
            </p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </subsection>
</section>
