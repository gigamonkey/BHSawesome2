<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-1-1-intro-algorithms">
  <title>What is programming? What is Java?</title>

  <introduction>
    <p>
      What do Android phones, Minecraft, and Netflix have in common? They’re all
      programmed in Java! Many of the apps you use in an Android phone or tablet
      are written in Java. If you’ve used App Inventor before, those apps are
      translated to Java before they are run on a phone or tablet. Netflix uses
      Java for some of its software too. Java is a <term>programming
      language</term> that is used worldwide to create software that we all use.
    </p>
  </introduction>

  <subsection>
    <title>Telling the computer what to do</title>

    <p>
      So Java is a programming language, but what does that mean? A programming
      language is a language that we can use to tell a computer what to do.
    </p>

    <p>
      While computers are, in some sense, very complicated, made up of billions
      of tiny switches all turning on and off billions of times a second, in
      another sense they are pretty simple: at their most basic level they can
      only do a few things, mostly a bit of arithmetic and logic. Everything
      else has to built up from there by telling the computer what simple steps
      to do in what order to create the incredibly complex behaviors we see
      every day on our computers, tablets, and phones.
    </p>

    <p>
      Programming languages let us describe these sequences of steps, which
      computer scientists call <term>algorithms</term>. Algorithms are used in
      many areas of life, not just in computer science. For example, a recipe is
      an algorithm for cooking a meal. A set of directions to a friend’s house
      is an algorithm for getting there. But unlike when we're describing
      something for another person, when we're writing algorithms to be run on a
      computer, we need to spell everything out very precisely. So programming
      languages are designed bridge the gap between how we think about problems
      as humans and how they need to be expressed for the computer.
    </p>

    <p>
      Complex programs will be made up of lots of algorithms and while we
      ultimately have to express them all in a programming language like Java,
      when we are working on programs we will frequently shift between thinking
      like a human about <em>what</em> we want our program to do to then
      translating that into Java that tells the computer exactly <em>how</em> to
      do it.
    </p>

    <p>
      It can be useful to plan out our code by first describing the steps in
      English or another natural language or by drawing diagrams. Sometimes
      programmers will use <term>pseudocode</term> which looks kind of like a
      programming language but lets us leave out some of the details that a real
      programming language would need.
    </p>
  </subsection>

  <subsection>
    <title>Our first Java program</title>

    <p>
      Different programming languages have different ways of structuring code.
      Java is an <term>object-oriented language</term> in which all code is
      structured into <term>classes</term>. We’ll learn more about classes and
      object orientation in later units. For now we just need to understand that
      every Java program is written as one or more classes which have a
      particular structure.
    </p>

    <p>
      In particular, within any class there can be a <term>main method</term>
      that contains the code that runs if that class is run as program. In the
      coding activities in this book, there is almost always one class and that
      is the one that is run when you hit the run button. In other programming
      environments that you will use for more complex programs there will be
      some other way to run your programs but they always start from some
      class’s <c>main</c> method.
    </p>

    <p>
      A <term>method</term> is a chunk of code that performs a specific task. In
      other programming languages, methods are called functions or procedures.
      And in block programming languages like Snap! they are called blocks. For
      now, all you need to know is that any code you put inside the <c>main</c>
      method will be run when the class is run.
    </p>

    <p>
      Here is the template for a simple Java program with a <c>main</c> method:
    </p>

    <program>
      public class MyClass {
          public static void main(String[] args) {
              // Put your code here!
          }
      }
    </program>

    <p>
      Click on the run button below to have the computer execute the <c>main</c>
      method in the following class. Then, change the code to print your name.
      Be sure to keep the starting and ending quotation marks. Click on the run
      button to run the modified code.
    </p>

    <exercise label="printName">
      <title>First Java program</title>

      <statement>
        <p>
          Run this code to see the output below it. Then change the code to
          print your name, for example “Hi Pat!”, and run again.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          public class MyClass {
              public static void main(String[] args) {
                  System.out.println("Hi there!");
              }
          }
        </code>

        <tests>
          // should pass if/when they run code
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "Hi there!";
                  boolean passed =
                          getResults(expect, output, "Expected output from main", true);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </exercise>
  </subsection>

  <subsection>
    <title>Java syntax</title>

    <p>
      Every programming language has a <term>syntax</term> which is a set of
      rules for how thet text of a program has to be organized. Human languages
      also have syntax. For instance in English, “The robot ate the cupcake”, is
      a syntactically correct sentence while, “Ate robot cupcake the the”, is
      not. A program, like a sentence, can only actually be a program if it is
      syntactically correct. But computers are even more picky than humans about
      syntax, so one of the first things we need to learn, when learning a new
      programming language are the exact rules of its syntax. Luckily most
      programming languages are designed to have a relatively simple syntax,
      even if it looks a bit odd at first, so we can usually pick it up by
      reading and writing code and paying attention to the error messages we get
      when we make mistakes: no need to memorize a bunch of rules.
    </p>

    <p>
      Puncuation plays a big role in programming syntax. As you can see in the
      simple programs above, Java uses <term>curly braces</term> <c>{}</c> in
      pairs so each open brace <c>{</c> must have a matched close brace
      <c>}</c>. These are used to start and end class definitions and method
      definitions.
    </p>

    <p>
      Semicolons <c>;</c> are also used all the time in Java. They are kind of
      like Java’s equivalent of a perod in English, used to end a complete
      statement like <c>System.out.println("Hi there!");</c>. For most beginning
      Java programmers the most common error is leaving out a necessary
      semicolon.
    </p>

    <note>
      <p>
        You will not be penalized on the exam if you forget a needed semicolon,
        but the Java compiler is not so lenient; your program won’t compile
        without it. Note also that not <em>every</em> line ends with a
        semicolon; if the line starts a construct like an <c>if</c> statement,
        there is no semicolon before the opening <c>{</c> nor one after the
        closing <c>}</c>.
      </p>
    </note>

    <p>
      So punctuation is critical. Whitespace, on the other hand, such as the
      indentation at the beginning of lines or blank lines is completely
      unimportant to the computer, except in a few special contexts. But it is
      very important to human progarammers to help show the structure of code.
      You should pay attention to how code in this book is indented and try to
      indent your code in the same way. (Or use the Reformat button on the
      coding exercises to automatically properly indent your code.)
    </p>

    <p>
      Other than punctuation and whitespace, the rest of the text of a program
      is made up of words. Some words are special to Java and are called
      <term>keywords</term>. In the programs above the keywords are
      <c>public</c>, <c>class</c>, <c>static</c>, and <c>void</c>. Because
      keywords have a special meaning to Java we can only use them for the
      particular purpose each one has. All keywords in Java are lower case.
    </p>

    <p>
      Other names are ones we get to make up. In the program above
      <c>MyClass</c> and <c>args</c> are <term>names</term>, or, more formally,
      <term>identifiers</term>. <c>MyClass</c> is the name of a class and
      <c>args</c> is the name of a variable (we’ll learn all about classes and
      variables later.) Java doesn’t care at all what names we use there other
      than that they be made up of just letters and numbers and start with a
      letter. And as you can see, when a name is made up of multiple words like
      <c>MyClass</c> the convention is to capitalize the first letter of each
      word.
    </p>

    <p>
      Finally the words <c>main</c> and <c>String</c> are not keywords, but have
      a particular meaning to Java. The name <c>main</c> is used to identify the
      method we want Java to run when we run our program. And <c>String</c> is a
      class that is part of Java’s standard library. But since they are not
      keywords we could use those names in other ways in our programs. (But it
      would be confusing so we probably wouldn’t.)
    </p>

    <exercise label="mp-main-method-order-1" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create the first line for the <c>main</c>
          method. There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block><c>public static</c></block>

        <block><c>void main(</c></block>

        <block><c>String[]</c></block>

        <block><c>args)</c></block>

        <block correct="no"><c>public Static</c></block>
      </blocks>
    </exercise>

    <exercise label="mp-main-method-order-2" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create the first line for the <c>main</c>
          method. There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block><c>public</c></block>

        <block><c>static</c></block>

        <block><c>void</c></block>

        <block><c>main(</c></block>

        <block><c>String[]</c></block>

        <block><c>args)</c></block>

        <block correct="no"><c>Public</c></block>

        <block correct="no"><c>Static</c></block>
      </blocks>
    </exercise>

    <exercise label="mp-main-method-order-3" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create the first line for the <c>main</c>
          method. There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block><c>public</c></block>

        <block><c>static</c></block>

        <block><c>void</c></block>

        <block><c>main</c></block>

        <block><c>(</c></block>

        <block><c>String</c></block>

        <block><c>[]</c></block>

        <block><c>args</c></block>

        <block><c>)</c></block>

        <block correct="no"><c>()</c></block>
      </blocks>
    </exercise>

    <exercise label="mp-print-order-1" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create a Java statement that will print “Hi!”.
          There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block><c>System.</c></block>

        <block><c>out</c></block>

        <block><c>.</c></block>

        <block><c>println</c></block>

        <block><c>(</c></block>

        <block><c>"Hi!"</c></block>

        <block><c>)</c></block>

        <block><c>;</c></block>

        <block correct="no"><c>system</c></block>
      </blocks>
    </exercise>

    <exercise label="mp-print-order-2" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create a Java statement that will print Bye!”.
          There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block><c>System.</c></block>

        <block><c>out</c></block>

        <block><c>.</c></block>

        <block><c>println</c></block>

        <block><c>(</c></block>

        <block><c>"Bye!"</c></block>

        <block><c>)</c></block>

        <block><c>;</c></block>

        <block correct="no"><c>Out</c></block>
      </blocks>
    </exercise>
  </subsection>

  <subsection>
    <title>Comments</title>

    <p>
      Another important piece of Java syntax are <term>comments</term> which are
      bits of the program that Java ignores but which are useful for humans
      reading the program.
    </p>

    <p>
      Java uses two styles of comments. Single line comments start with
      <c>//</c> and go to the end of the line. Sometimes they are placed on a
      line by themselves, usually to comment on the next bit of code. And
      sometimes short comments are added at the end of a line.
    </p>

    <p>
      Multi-line comments, are marked with a <c>/*</c> to start the comment and
      a <c>*/</c> to end it.
    </p>

    <p>
      Commenting code well is an art form: there is no need to explain things
      that can be understood from the code itself but it can be very valuable to
      explain <em>why</em> code is a certain way.
    </p>

    <p>
      It can also be useful to use comments as we develop code to make notes
      about our plan and then delete the comments as we develop the code. And
      perhaps the most common use of comments is to temporarily remove a bit of
      code without deleting it. Many programming editors will have a keyboard
      shortcut for adding <c>//</c>  at the start of a selected range of text.
    </p>

    <p>
      Here are some examples of the different kinds of comments:
    </p>

    <program>
      /*
       * This style of multiline comment is often used before classes and methods to
       * document their purpose.
       */
      public class Foo {
      }

      int max = 10; // a comment about this particular line

      // Some comments about whatever comes next
      if (foo) {
        doStuff();
      }
    </program>
  </subsection>

  <subsection>
    <title>Compiling and running Java programs</title>

    <p>
      Even though Java is a programming language designed for us to communicate
      with the computer, computers don’t actually know what to do with Java
      source code. Instead we have to <term>compile</term> (translate) Java
      source files that we write into files that are meaningless to a human but
      which are closer to something the computer can actually run. A
      <term>compiler</term> checks your code for errors and then translates it
      into executable code that can be run.
    </p>

    <note>
      <p>
        Some languages compile their source code to something called
        <term>machine code</term> that can run directly on the computer
        hardware. Java uses a different strategy, compliling to an intermediate
        form called <term>bytecode</term> which is run by another program called
        the <term>Java Virtual Machine</term>. But bytecode is much closer to
        machine code than it is to Java source code.
      </p>
    </note>

    <p>
      If the compiler can’t understand our program because of syntax errors it
      will try to tell us what is wrong. That’s when we need to check for
      missing semicolons and unmatched curly braces; we have to fix any syntax
      errors before the program can be run.
    </p>

    <p>
      We can write Java code in any text editor, including the small text editor
      built into the Active Code exercises in this book. For this course, you’ll
      write a lot of code in the Active Code exercises and you can use the
      scratch coding area accessible via the pencil icon at the top of this page
      to write simple programs.
    </p>

    <p>
      However, for complex programs many programmers use an <term>Integrated
      Development Environment (IDE)</term> that provides tools for writing,
      compiling, and running code all in one place. Several are discussed in
      <xref ref="javaIDEs" />. Most likely your teacher will tell you which one
      to use.
    </p>

    <p>
      When working in an IDEs or text editor you must name the file the same
      name as the class name with “.java” as the extension. All code (programs)
      in Java must be defined inside a class in a source file, and the name of
      the class must match the file name.
    </p>

  </subsection>



  <subsection>
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            <term>Algorithms</term> define step-by-step processes to follow when
            completing a task or solving a problem. These algorithms can be
            represented using written language or diagrams.
          </p>
        </li>

        <li>
          <p>
            <term>Sequencing</term> defines an order for when steps in a process
            are completed. Steps in a process are completed one at a time.
          </p>
        </li>

        <li>
          <p>
            An <term>Integrated Development Environment (IDE)</term> is often
            used to write programs because it provides tools for a programmer to
            write, compile, and run code.
          </p>
        </li>

        <li>
          <p>A basic Java program looks like the following:</p>

          <program>
            public class MyClass {
              public static void main(String[] args) {
                System.out.println("Hi there!");
              }
            }
          </program>
        </li>

        <li>
          <p>
            A Java program starts with <term>public class NameOfClass {</term>.
            If you are using your own files for your code, each class should be
            in a separate file that matches the class name inside it, for
            example NameOfClass.java.
          </p>
        </li>

        <li>
          <p>
            Most Java classes have a main method that will be run automatically.
            It looks like this: <term>public static void main(String[] args) {
            }</term>.
          </p>
        </li>

        <li>
          <p>
            The <term>System.out.println()</term> method displays information
            given inside the parentheses on the computer monitor.
          </p>
        </li>

        <li>
          <p>
            Java statements end in <c>;</c> (semicolon). <c>{ }</c> are used to
            enclose blocks of code. <c>//</c> and <c>/* */</c> are used for
            comments.
          </p>
        </li>

        <li>
          <p>
            A <term>compiler</term> translates Java code into a class file that
            can be run on your computer. <term>Syntax errors</term> are reported
            to you by the compiler if the Java code is not correctly written.
            Some things to check for are <c>;</c> at end of lines containing
            complete statements and matching <c>{ }</c>, <c>()</c>, and
            <c>""</c>.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
