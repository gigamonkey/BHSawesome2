<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-1-intro-algorithms">
  <title>What is programming? What is Java?</title>
  <introduction>
    <p>
      What do Android phones, Minecraft, and Netflix have in common? They’re all
      programmed in Java! Many of the apps you use in an Android phone or tablet
      are written in Java. If you’ve used App Inventor before, those apps are
      translated to Java before they are run on a phone or tablet. Netflix uses
      Java for some of its software too. Java is a <term>programming
      language</term> that is used worldwide to create software that we all use.
    </p>
  </introduction>

  <subsection>
    <title>Telling the computer what to do</title>
    <p>
      So Java is a programming language, but what does that mean? A programming
      language is a language that we can use to tell a computer what to do.
    </p>

    <p>
      While computers are, in some sense, very complicated, made up of billions
      of tiny switches all turning on and off billions of times a second, in
      another sense they are pretty simple: at their most basic level they can
      only do a few things, mostly a bit of arithmetic and logic. Everything
      else has to built up from there by telling the computer what simple steps
      to do in what order to create the incredibly complex behaviors we see
      every day on our computers, tablets, and phones.
    </p>

    <p>
      Programming languages let us describe these sequences of steps, which
      computer scientists call <term>algorithms</term>. Algorithms are used in
      many areas of life, not just in computer science. For example, a recipe is
      an algorithm for cooking a meal. A set of directions to a friend’s house
      is an algorithm for getting there. But unlike when we're describing
      something for another person, when we're writing algorithms to be run on a
      computer, we need to spell everything out very precisely. So programming
      languages are designed bridge the gap between how we think about problems
      as humans and how they need to be expressed for the computer.
    </p>

    <p>
      Complex programs will be made up of lots of algorithms and while we
      ultimately have to express them all in a programming language like Java,
      when we are working on programs we will frequently shift between thinking
      like a human about <em>what</em> we want our program to do to then
      translating that into Java that tells the computer exactly <em>how</em> to
      do it.
    </p>

    <p>
      It can be useful to plan out our code by first describing the steps in
      English or another natural language or by drawing diagrams. Sometimes
      programmers will use <term>pseudocode</term> which looks kind of like a
      programming language but lets us leave out some of the details that a real
      programming language would need.
    </p>
  </subsection>

  <subsection>
    <title>Our first Java program</title>
    <p>
      Different programming languages have different ways of structuring code.
      Java is an <term>object-oriented language</term> in which all code is
      structured into <term>classes</term>. We’ll learn more about classes and
      object orientation in later units. For now we just need to understand that
      every Java program is written as one or more classes which have a
      particular structure.
    </p>

    <p>
      In particular, within any class there can be a <term>main method</term>
      that contains the code that runs if that class is run as program. Working
      in an IDE that might happen when you hit a run button. In the coding
      activities in this book, there is almost always one class and that is the
      one that is run when you hit the run button.
    </p>

    <p>
      A <term>method</term> is a chunk of code that performs a specific task. In
      other programming languages, methods are called functions or procedures.
      And in block programming languages like Snap! they are called blocks. For
      now, all you need to know is that any code you put inside the <c>main</c>
      method will be run when the class is run.
    </p>

    <p>
      Here is the template for a simple Java program with a <c>main</c> method:
    </p>

    <program language="java">
      <code>
public class MyClass
{
    public static void main(String[] args)
    {
        // Put your code here!
    }
}
      </code>
    </program>

    <p>
      In Java every open curly brace <c>{</c> must have a matched close curly
      brace <c>}</c>. These are used to start and end class definitions and
      method definitions.
    </p>

    <p>
      Click on the run button below to have the computer execute the <c>main</c>
      method in the following class. Then, change the code to print your name.
      Be sure to keep the starting and ending quotes <c>"</c>. Click on the run
      button to run the modified code.
    </p>

    <exercise label="printName">
      <title>First Java program</title>
      <statement>
        <p>
          Run this code to see the output below it. Then change the code to
          print your name, for example “Hi Pat!”, and run again.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class MyClass
{
    public static void main(String[] args)
    {
        System.out.println("Hi there!");
    }
}
        </code>
        <tests>
// should pass if/when they run code
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Hi there!";
        boolean passed =
                getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </exercise>
  </subsection>

  <subsection>
    <title>Compiling and Running Java Programs</title>
    <p>
      Code can be written in any text editor, including the small text editor
      built into the Active Code exercises in this e-book. However, an
      <term>Integrated Development Environment (IDE)</term> is often used to
      write programs because it provides tools for a programmer to write,
      compile, and run code. For this course, you can use the e-book Active Code
      exercises or the Scratch button above as your IDE to run your code. Or you
      can try other IDEs mentioned in the last unit. In other IDEs, you must
      name the file the same name as the class name with “.java” as the
      extension. All code (programs) in Java must be defined inside a class in a
      source file, and the name of the class must match the file name.
    </p>

    <p>
      Computers don’t actually speak Java so we have to <term>compile</term>
      (translate) Java source files that we write into class files which is code
      that a computer can understand and run. A <term>compiler</term> checks
      your code for errors and translates your code to executable code that can
      be run. Errors detectable by the compiler need to be fixed before the
      program can be run. In this e-book, the Java code is actually being sent
      to a Java server to be compiled and run, and the errors and output are
      sent back to be shown in the web page.
    </p>
  </subsection>

  <subsection>
    <title>Java Keywords</title>
    <p>
      <term>Keywords</term> are reserved words that have special meaning in
      Java. Keywords such as <c>public</c>, <c>class</c>, and <c>void</c> must
      be in lowercase, but class names such as <c>System</c> and <c>String</c>
      are capitalized.
    </p>

    <exercise label="mp-main-method-order-1" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create the first line for the <c>main</c>
          method. There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block>
          <c>public static</c>
        </block>

        <block>
          <c>void main(</c>
        </block>

        <block>
          <c>String[]</c>
        </block>

        <block>
          <c>args)</c>
        </block>

        <block correct="no">
          <c>public Static</c>
        </block>
      </blocks>
    </exercise>

    <exercise label="mp-main-method-order-2" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create the first line for the <c>main</c>
          method. There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block>
          <c>public</c>
        </block>

        <block>
          <c>static</c>
        </block>

        <block>
          <c>void</c>
        </block>

        <block>
          <c>main(</c>
        </block>

        <block>
          <c>String[]</c>
        </block>

        <block>
          <c>args)</c>
        </block>

        <block correct="no">
          <c>Public</c>
        </block>

        <block correct="no">
          <c>Static</c>
        </block>
      </blocks>
    </exercise>

    <exercise label="mp-main-method-order-3" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create the first line for the <c>main</c>
          method. There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block>
          <c>public</c>
        </block>

        <block>
          <c>static</c>
        </block>

        <block>
          <c>void</c>
        </block>

        <block>
          <c>main</c>
        </block>

        <block>
          <c>(</c>
        </block>

        <block>
          <c>String</c>
        </block>

        <block>
          <c>[] </c>
        </block>

        <block>
          <c>args</c>
        </block>

        <block>
          <c>)</c>
        </block>

        <block correct="no">
          <c>()</c>
        </block>
      </blocks>
    </exercise>

    <p>
      Lines in a Java program that express a complete action such as printing
      output must end with a semicolon (<c>;</c>). Such a line is called a
      <term>statement</term>. You can think of the semicolon (<c>;</c>) in Java
      like a period (<c>.</c>) in English. The same way you use a period to end
      a sentence in English, you use a semicolon to end a statement in Java. You
      will not be penalized on the exam if you forget a needed semicolon, but
      the Java compiler is not so lenient; your program won’t compile without
      it. Note also that not <em>every</em> line ends with a semicolon; if the
      line starts a construct like an <title_reference>if</title_reference>
      statement, there is no semicolon before the opening <c>{</c> nor one after
      the closing <c>}</c>.
    </p>

    <exercise label="mp-print-order-1" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create a Java statement that will print “Hi!”.
          There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block>
          <c>System.</c>
        </block>

        <block>
          <c>out</c>
        </block>

        <block>
          <c>.</c>
        </block>

        <block>
          <c>println</c>
        </block>

        <block>
          <c>(</c>
        </block>

        <block>
          <c>"Hi!"</c>
        </block>

        <block>
          <c>)</c>
        </block>

        <block>
          <c>;</c>
        </block>

        <block correct="no">
          <c>system</c>
        </block>
      </blocks>
    </exercise>

    <exercise label="mp-print-order-2" adaptive="yes">
      <statement>
        <p>
          Drag or click on the blocks you need to move them from the top section
          into the yellow area to create a Java statement that will print Bye!”.
          There are extra blocks that you don’t need.
        </p>
      </statement>

      <blocks layout="horizontal">
        <block>
          <c>System.</c>
        </block>

        <block>
          <c>out</c>
        </block>

        <block>
          <c>.</c>
        </block>

        <block>
          <c>println</c>
        </block>

        <block>
          <c>(</c>
        </block>

        <block>
          <c>"Bye!"</c>
        </block>

        <block>
          <c>)</c>
        </block>

        <block>
          <c>;</c>
        </block>

        <block correct="no">
          <c>Out</c>
        </block>
      </blocks>
    </exercise>
  </subsection>

  <subsection>
    <title>Comments</title>
    <p>
      In Java and many text-based coding languages, <c>//</c> is used to mark
      the beginning of a comment. For multi-line comments, use <c>/*</c> to
      start the comment and <c>*/</c> to end the comment. The compiler will skip
      over comments. However, it is a good idea to use comments to make notes to
      yourself and other programmers working with you. Here are some examples of
      good commenting:
    </p>

    <program language="java">
      <code>
/* MyClass.java
   Programmer: My Name
   Date:
*/

int max = 10; // this keeps track of the max score
      </code>
    </program>
  </subsection>

  <subsection>
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            <term>Algorithms</term> define step-by-step processes to follow when
            completing a task or solving a problem. These algorithms can be
            represented using written language or diagrams.
          </p>
        </li>

        <li>
          <p>
            <term>Sequencing</term> defines an order for when steps in a process
            are completed. Steps in a process are completed one at a time.
          </p>
        </li>

        <li>
          <p>
            An <term>Integrated Development Environment (IDE)</term> is often
            used to write programs because it provides tools for a programmer to
            write, compile, and run code.
          </p>
        </li>

        <li>
          <p>A basic Java program looks like the following:</p>
        </li>
      </ul>
    </p>

    <program language="java">
      <code>
public class MyClass
{
    public static void main(String[] args)
    {
        System.out.println("Hi there!");
    }
}
      </code>
    </program>

    <p>
      <ul>
        <li>
          <p>
            A Java program starts with <term>public class NameOfClass {</term>.
            If you are using your own files for your code, each class should be
            in a separate file that matches the class name inside it, for
            example NameOfClass.java.
          </p>
        </li>

        <li>
          <p>
            Most Java classes have a main method that will be run automatically.
            It looks like this: <term>public static void main(String[] args) {
            }</term>.
          </p>
        </li>

        <li>
          <p>
            The <term>System.out.println()</term> method displays information
            given inside the parentheses on the computer monitor.
          </p>
        </li>

        <li>
          <p>
            Java statements end in <c>;</c> (semicolon). <c>{ }</c> are used to
            enclose blocks of code. <c>//</c> and <c>/* */</c> are used for
            comments.
          </p>
        </li>

        <li>
          <p>
            A <term>compiler</term> translates Java code into a class file that
            can be run on your computer. <term>Syntax errors</term> are reported
            to you by the compiler if the Java code is not correctly written.
            Some things to check for are <c>;</c> at end of lines containing
            complete statements and matching <c>{ }</c>, <c>()</c>, and
            <c>""</c>.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
