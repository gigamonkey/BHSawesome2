<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-11-Math">
  <title>Using the Math Class</title>
  <introduction>
    <idx>Math</idx>
    <idx>random</idx>
    <idx>
      <h>Math</h><h>random</h>
    </idx>

    <p>
      Games would be boring if the same thing happened each time you played the
      game. Random numbers can be used in games to generate different outcomes
      each time the game is played. In Java, the <c>Math.random()</c> method to
      is used to generate a random number.
    </p>

    <p>
      There are lots of mathematical methods in the <c>Math</c> class that you
      might want to use in your programs, like <c>Math.pow(2,3)</c> which
      calculates the 2 to the power of 3 which is 8.
    </p>

    <p>
      The <c>Math</c> class is part of the <c>java.lang</c> package. Classes in
      the <c>java.lang</c> package are available by default. The <c>Math</c>
      methods are <term>class methods</term> (or <term>static</term> methods)
      which means you can call them by just using <c>ClassName.methodName()</c>.
    </p>
  </introduction>

  <subsection>
    <title>Other people’s methods</title>

    <p>
      We can also use methods that we didn’t write. In fact we already have.
      <c>System.out.println</c> is a method provided by Java for emitting output
      to the screen. To use methods we didn’t write we just need to know the
      method signature and what they do.
    </p>

    <p>
      For example, the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
      class’s Javadocs</url> document the following method signatures for
      <c>println</c> that we use in <c>System.out.println()</c>:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>void println()</c> which has an empty parameter list with no
            parameters
          </p>
        </li>

        <li>
          <p>
            <c>void println(String x)</c> which will print out a <c>String</c>
            value
          </p>
        </li>

        <li>
          <p>
            <c>void println(int x)</c> which will print out an <c>int</c> value
          </p>
        </li>
      </ul>
    </p>

    <p>
      We can see from the <c>void</c> return type in these method signatures
      that these methods don’t return any value. That means we can’t use them in
      expressions to compute values. Instead they are called purely for their
      <term>side effects</term>, in this case printing something to the screen.
    </p>

    <p>
      We can call these methods with the appropriate arguments to print out the
      value we want. The <term>argument</term> is the actual value that is
      passed to the method when it is called. Here are the method calls that
      correspond to the method signatures above (We’ll discuss later what the
      <c>System.out</c> part of the call is for):
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>System.out.println();</c> // prints a newline
          </p>
        </li>

        <li>
          <p>
            <c>System.out.println("Hello World");</c> // prints a String
          </p>
        </li>

        <li>
          <p>
            <c>System.out.println(42);</c> // prints an int
          </p>
        </li>
      </ul>
    </p>

    <p>
      Compare the method signature of <c>println(String x)</c> with the method
      call <c>println("Hello World");</c> below. The method signature contains
      the method name and the parameter type and variable. The method call
      contains only the method name and the argument value. The argument must be
      compatible with the data type of the parameter in the method signature and
      is saved in the parameter variable when the method is called. If you want
      to be very precise the argument is the value and the parameter is the
      variable but many people use the terms interchangeably.
    </p>

    <figure align="center">
      <caption>Method Signature and Method Call</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/method-parts.png" width="89%" alt="Method Signature and Method Call" />
    </figure>

    <p>
      The <c>println</c> methods are also an example of something called
      <term>overloading</term> which is when multiple methods have the same name
      but different method signatures because their parameter lists are
      different. Java matches each method call with the complete signature of
      the method so it can tell which method to call based on the number and
      types of the argument. A call to <c>println()</c> calls the version with
      no parameters which just prints a newline; a call to
      <c>println("hello")</c> calls the version with a <c>String</c> parameter
      that prints string followed by a newline; and a call to <c>println(42)</c>
      calls the version that takes an <c>int</c> and prints it, also followed by
      a newline.
    </p>

  </subsection>

  <subsection>
    <title>Methods Outside the Class</title>
    <p>
      In the examples above, we called the methods by using the method name.
      However, if we call a method from a different class, we need to include
      its class name. For example, if the <c>square</c> method is in a class
      called <c>MathFunctions</c>, we would call it as
      <c>MathFunctions.square(3)</c>. Class methods are typically called using
      the class name along with the <term>dot operator (.)</term>. When the
      method call occurs in the defining class, the use of the class name is
      optional in the call.
    </p>

    <image source="Unit1-Using-Objects-and-Methods/Figures/pow.png" width="18%" alt="Pow!" />
    <p>
      In the next lesson, we will learn to use the methods in the <c>Math</c>
      class in Java and will need to call them with the class name <c>Math</c>.
      There is a method to compute the square of a number in the <c>Math</c>
      library, but it is called <c>pow</c> instead of square, and it takes 2
      arguments to return a number raised to the power of an exponent number.
      Here’s a quick preview of two of the methods in the Math class:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>Math.sqrt(double number)</c> : returns the square root of a given
            number
          </p>
        </li>

        <li>
          <p>
            <c>Math.pow(double base, double exponent)</c> : returns
            <m>base^{exponent}</m>, the value of base, the first argument,
            raised to the power of exponent, the second argument.
          </p>
        </li>
      </ul>
    </p>

    <p>Here is an example of how to use these methods:</p>
    <program language="java">
      <code>
double x = Math.pow(3, 2); // 3^2 is 9.0
double y = Math.sqrt(9); // the square root of 9 is 3.0
      </code>
    </program>
  </subsection>

  <subsection xml:id="mathematical-functions">
    <title>Mathematical Functions</title>
    <p>
      The <c>Math</c> class contains the following methods that are in the AP
      CSA subset. There are more <c>Math</c> methods, outside of what you need
      on the AP exam, that you can find in the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/Math.html"><c>Math</c>
      class Javadocs</url>.
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>int abs(int)</c> : Returns the absolute value of an int value
            (which is the value of a number without its sign, for example
            <c>Math.abs(-4)</c> = 4).
          </p>
        </li>

        <li>
          <p>
            <c>double abs(double)</c> : Returns the absolute value of a double
            value.
          </p>
        </li>

        <li>
          <p>
            <c>double pow(double, double)</c> : Returns the value of the first
            parameter raised to the power of the second parameter.
          </p>
        </li>

        <li>
          <p>
            <c>double sqrt(double)</c> : Returns the positive square root of a
            double value.
          </p>
        </li>

        <li>
          <p>
            <c>double random()</c> : Returns a double value greater than or
            equal to 0.0 and less than 1.0 (not including 1.0!).
          </p>
        </li>
      </ul>
    </p>

    <note>
      <p>
        All the <c>Math</c> methods that you may need to use or understand on
        the AP exam are listed in the <url
        href="https://drive.google.com/file/d/1UL4JeQ5hfnO3H6uoZizgOU2XjHkitmFw/view?usp=sharing">AP
        CSA Java Quick Reference Sheet</url> that you can use during the exam.
      </p>
    </note>

    <p>
      These Math methods are mathematical functions that compute new values from
      their arguments. You may be able to guess what <c>abs</c>, <c>pow</c>, and
      <c>sqrt</c> do, from their abbreviations.
    </p>

    <p>
      <c>Math.abs</c> takes a single argument, either a <c>double</c> or an
      <c>int</c> and returns a value of the same type which is the absolute
      value of the argument. The absolute value is the positive value of the
      number without its sign or its distance from 0. So:
    </p>

    <program language="java">
      <code>
Math.abs(45);    // returns 45
Math.abs(-45);   // returns 45
Math.abs(33.3);  // returns 33.3
Math.abs(-33.3); // returns 33.3
      </code>
    </program>

    <image source="Unit1-Using-Objects-and-Methods/Figures/pow.png" width="14%" alt="Pow!" />
    <p>
      <c>Math.pow</c> takes two argument, both <c>double</c>s and returns a
      <c>double</c> which is the first argument raised to the power of the
      second argument.
    </p>

    <program language="java">
      <code>
Math.pow(2 , 3); // returns 8.0
Math.pow(10, 6); // returns 1000000.0
Math.pow(2, -3); // returns 0.125
      </code>
    </program>

    <p>
      <c>Math.sqrt</c> takes an <c>double</c> argument and returns a positive
      <c>double</c> value which is the square root of the argument. For example,
      the square root of 9 is 3 because 3 squared is 9.
    </p>

    <program language="java">
      <code>
Math.sqrt(9); // returns 3.0
      </code>
    </program>

    <p>
      Since these methods calculate and return a value, you need to use that
      value, for example in an assignment statement or in a print statement to
      see the result. For example:
    </p>

    <program language="java">
      <code>
System.out.println("The square root of 9 is " + Math.sqrt(9));
      </code>
    </program>

    <activity label="trymath">
      <statement>
        <p>
          Try the Math methods below. Change the code so that it computes the
          absolute value of -4, the square root of 9, and 3 raised to the power
          of 2.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class TryMath
{
    public static void main(String[] args)
    {
        // TODO: Change the code below to compute
        //       the absolute value of -4,
        //       the square root of 9,
        //       and 3 raised to the power of 2.
        System.out.println( Math.abs(-2) );
        System.out.println( Math.sqrt(4) );
        System.out.println( Math.pow(2, 3) );
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "4\n3.0\n9.0\n";
        boolean passed = getResults(expect, output, "Expected output from main after changing code");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="call-sqrt-mc">
      <statement>
        <p>
          Knowing that <c>Math.sqrt</c> takes a single argument, Which of these
          are syntactically correct method calls to <c>sqrt</c>?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement id="call-sqrt-mc_opt_a">
            <p>
              <c>Math.sqrt(2)</c>
            </p>
          </statement>

          <feedback id="call-sqrt-mc_opt_a">
            <p>
              ✅ This is a simple call to <c>Math.sqrt</c> with the argument 2.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="call-sqrt-mc_opt_b">
            <p>
              <c>Math.sqrt()</c>
            </p>
          </statement>

          <feedback id="call-sqrt-mc_opt_b">
            <p>
              ❌ <c>Math.sqrt</c> takes one argument. This would be a correct
              call if it took no arguments.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="call-sqrt-mc_opt_c">
            <p>
              <c>Math.sqrt(2, 4)</c>
            </p>
          </statement>

          <feedback id="call-sqrt-mc_opt_c">
            <p>
              ❌ <c>Math.sqrt</c> takes one argument. This would be a correct
              call if it took two arguments.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="call-sqrt-mc_opt_d">
            <p>
              <c>Math.sqrt(2 + 3)</c>
            </p>
          </statement>

          <feedback id="call-sqrt-mc_opt_d">
            <p>
              ✅ The argument passed to <c>Math.sqrt</c> is the value of the
              expression 2 + 3, namely 5.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="call-sqrt-mc_opt_e">
            <p>
              <c>Math.sqrt 2</c>
            </p>
          </statement>

          <feedback id="call-sqrt-mc_opt_e">
            <p>❌ You must have parentheses around the arguments.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="call-sqrt-mc_opt_f">
            <p>
              <c>Math.sqrt(Math.sqrt(2))</c>
            </p>
          </statement>

          <feedback id="call-sqrt-mc_opt_f">
            <p>
              ✅ The argument passed to <c>Math.sqrt</c> is the value of
              <em>another</em> call to <c>Math.sqrt</c> which is perfectly fine.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="distance-mc">
      <statement>
        <p>
          The distance between two numbers on the number line is defined as the
          absolute value of their difference. Their difference is just what you
          get when you subtract one from the other. For example, the distance
          from 0 to 3 is 3, the distance from -3 to 0 is 3, and the distance
          from -3 to 1 is 4.
        </p>

        <image source="Unit1-Using-Objects-and-Methods/Figures/number-line.svg" width="80%" alt="number line" />
        <p>
          Which of the following are correct expressions to compute the distance
          between the numbers <c>a</c> and <c>b</c>.
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement id="distance-mc_opt_a">
            <p>
              <c>Math.abs(a - b)</c>
            </p>
          </statement>

          <feedback id="distance-mc_opt_a">
            <p>
              ✅ <c>a - b</c> gives us the difference and <c>Math.abs</c> gives
              us the absolute value of that difference.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="distance-mc_opt_b">
            <p>
              <c>Math.abs(a) - Math.abs(b)</c>
            </p>
          </statement>

          <feedback id="distance-mc_opt_b">
            <p>
              ❌ Consider the distance between -2 and 3. It should be five. What
              value would this expression produce in that case?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="distance-mc_opt_c">
            <p>
              <c>Math.abs(a + b)</c>
            </p>
          </statement>

          <feedback id="distance-mc_opt_c">
            <p>
              ❌ We need to start with the difference between <c>a</c> and
              <c>b</c>, not their sum.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="distance-abs">
      <statement>
        <p>
          The distance between two numbers on a number line, as we discussed in
          the problem above, is defined as the absolute value of their
          difference. Their difference is just what you get when you subtract
          one from the other. For example, the distance from 0 to 3 is 3, the
          distance from -3 to 0 is 3, and the distance from -3 to 1 is 4.
        </p>

        <p>
          Fill in the method <c>distance</c> below so it correctly computes the
          distance between two numbers <c>a</c> and <c>b</c> using subtraction
          and Math.abs.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class DistanceCalculator
{

    public static double distance(double a, double b)
    {
        // TODO: calculate the distance from a to b using subtraction and Math.abs.
        double distance = 0.0;

        return distance;
    }

    public static void main(String[] arg)
    {
        System.out.println("distance(13.5, 26.2) = " + distance(13.5, 26.2));
        System.out.println("distance(26.2, 13.5) = " + distance(26.2, 13.5));
        System.out.println(distance(13.5, 26.2) == distance(13.5, 26.2));
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void test1()
    {
         Object[] args = {10.5, 20.6};
         String output = getMethodOutput("distance", args);
         String expect = "10.1";
         boolean passed = getResults(expect, output, "distance(10.5, 20.6)");
         assertTrue(passed);
    }
    @Test
    public void test2()
    {
         Object[] args = { -5.0, 2.4 };
         String output = getMethodOutput("distance", args);
         String expect = "7.4";
         boolean passed = getResults(expect, output, "distance(-5.0, 2.4)");
         assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="random-numbers">
    <title>Random Numbers</title>
    <image source="Unit1-Using-Objects-and-Methods/Figures/dice.png" width="18%" alt="Dice" />
    <p>
      The <c>Math.random()</c> method returns a double number greater than or
      equal to 0.0, and less than 1.0. When we talk about ranges of numbers
      sometimes we need to be precise about whether the ends of the range are
      part of the range. For example, <c>Math.random</c> returns a number
      between 0 and 1, but does that mean it can return exactly 0? Or exactly 1?
      As it turns out it can return 0 but never returns 1.
    </p>

    <p>
      When we need to be precise about this we’d say that it returns a number
      between 0, <em>inclusive</em>, and 1, <em>exclusive</em>, meaning
      <em>include</em> 0 but <em>exclude</em> 1. Lots of ranges in Java are
      expressed this way, as you’ll see later on with an inclusive bottom and
      exclusive top.
    </p>

    <activity label="random1">
      <statement>
        <p>
          Try the following code. Run it several times to see what it prints
          each time.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test3
{
    public static void main(String[] args)
    {
        System.out.println(Math.random());
        System.out.println(Math.random());
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = output;
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      Getting a number between 0, inclusive, and 1, exclusive, may not seem all
      that useful. But we can expand the range easily enough. To see how,
      imagine you had less than a dollar to your name and you wanted to be
      richer—you’d want to find a way to <term>multiply</term> your money. If
      you could invest every penny you had in something that would multiply your
      money by 1,000 then instead of having somewhere between $0 and $1, then
      you’d have somewhere between $0 (inclusive—if you started with $0) and
      $1,000 (exclusive, since if you had even a fraction of a penny less than
      $1 multiplying by 1,000 would still leave you just a bit shy of $1,000.)
      If the investment multiplied your original money by a million, you’d have
      between $0 and $1,000,000! (But never <em>quite</em> $1,000,000.)
    </p>

    <p>
      Same trick applies to random numbers. The value <c>Math.random</c> returns
      is like the initial amount of money in your pocket, always a bit less than
      $1. If you multiply that value by any amount, it will stretch it into the
      range you want:
    </p>

    <activity label="random-example-stretched">
      <statement>
        <p>
          Try the following code. Run it several times to see what it prints
          each time. Did you ever see 0.0? How about 1.0?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class StretchedRandom
{
    public static void main(String[] args)
    {
        System.out.println(Math.random() * 10);
        System.out.println(Math.random() * 10);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = output;
        boolean passed = getResults(expect, output, "Expected output from main", true);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <p>
      You may have noticed that while the numbers generated were always in the
      range 0 to 10, all the numbers probably had a lot a digits after the
      decimal point. Often we want a random integer, with nothing after the
      decimal point. Easy enough—casting a <c>double</c> to an <c>int</c> will
      throw away any values after the decimal point. For example,
    </p>

    <program language="java">
      <code>
// rnd is an integer in the range 0-9 (from 0 up to 10).
int rnd = (int)(Math.random()*10);
      </code>
    </program>

    <p>
      Finally, what if we want a number in a range that doesn’t start with 0,
      say a number from 1 to 10 (including 10) instead of from 0 to 9 (including
      9)? Since the size of the two ranges is the same, with ten numbers in
      each, all we need to do is shift from the range we’ve generated into the
      range we want. In other words, add the difference between the two ranges,
      1 in this case.
    </p>

    <program language="java">
      <code>
// rnd is an integer in the range 1-10 (including 10).
int rnd = (int)(Math.random()*10) + 1;
      </code>
    </program>

    <activity label="randomRange">
      <statement>
        <p>
          Run the code below several times to see how the value changes each
          time. How could you change the code to return a random integer from 1
          to 10? Modify the code and see if your answer is correct. Try removing
          the parentheses from around (Math.random() * 10) and run the code
          several times. What happens? The parentheses are necessary because
          (int) will cast the closest expression, and (int)Math.random() will
          always be 0 since anything after the decimal point is dropped.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class Test4
{
    public static void main(String[] args)
    {
        System.out.println((int) (Math.random() * 10));
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    @Test
    public void testContainsRange() throws IOException
    {
        String target = "+ 1";
        boolean passed = checkCodeContains("Math.random in range 1 to 10", target);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <note>
      <p>
        <ul>
          <li>
            <p>Math.random() returns a random number between 0.0-0.99.</p>
          </li>

          <li>
            <p>
              <term>(int)(Math.random() * range) + min</term> moves the random
              number into a range starting from a minimum number.
            </p>
          </li>

          <li>
            <p>
              The range is the <term>(max number - min number + 1)</term>.
            </p>
          </li>
        </ul>
      </p>
    </note>

    <p>
      Here are some examples that move a random number into a specific range.
    </p>

    <program language="java">
      <code>
// Math.random() returns a random number between 0.0-0.99.
double rnd = Math.random();

// rnd1 is an integer in the range 0-9 (including 9).
int rnd1 = (int)(Math.random()*10);

// rnd2 is in the range 1-10 (including 10). The parentheses are necessary!
int rnd2 = (int)(Math.random()*10) + 1;

// rnd3 is in the range 5-10 (including 10). The range is 10-5+1 = 6.
int rnd3 = (int)(Math.random()*6) + 5;

// rnd4 is in the range -10 up to 9 (including 9). The range is doubled (9 - -10 + 1 = 20) and the minimum is -10.
int rnd4 = (int)(Math.random()*20) - 10;
      </code>
    </program>

    <p>
      So the general recipe for generating a random is to first stretch the
      value from <c>Math.random()</c> until it’s in the right size range by
      multiplying by the size of the range. Then if you want an integer value,
      cast to <c>int</c> to discard the part after the decimal point. Then shift
      the value up by adding the minimum value. The table below shows some
      applications of that general recipe.
    </p>

    <table>
      <tabular row-headers="yes">
        <col top="minor" />
        <col top="minor" />
        <col top="minor" />
        <col top="minor" />
        <title>Random recipes</title>
        <row header="yes" left="minor">
          <cell bottom="minor" right="minor">Expression</cell>
          <cell bottom="minor" right="minor">Minimum (inclusive)</cell>
          <cell bottom="minor" right="minor">Maximum (exclusive)</cell>
          <cell bottom="minor" right="minor">Possible values</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">
            <c>Math.random()</c>
          </cell>

          <cell bottom="minor" right="minor">0.0</cell>
          <cell bottom="minor" right="minor">1.0</cell>
          <cell bottom="minor" right="minor">Over 9 quadrillion</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">
            <c>Math.random() * 100</c>
          </cell>

          <cell bottom="minor" right="minor">0.0</cell>
          <cell bottom="minor" right="minor">100.0</cell>
          <cell bottom="minor" right="minor">Over 9 quadrillion</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">
            <c>(int)(Math.random() * 100)</c>
          </cell>

          <cell bottom="minor" right="minor">0</cell>
          <cell bottom="minor" right="minor">100</cell>
          <cell bottom="minor" right="minor">100</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">
            <c>(int)(Math.random() * 50) + 25</c>
          </cell>

          <cell bottom="minor" right="minor">25</cell>
          <cell bottom="minor" right="minor">75</cell>
          <cell bottom="minor" right="minor">50</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">
            <c>(int)(Math.random() * max)</c>
          </cell>

          <cell bottom="minor" right="minor">0</cell>
          <cell bottom="minor" right="minor">max</cell>
          <cell bottom="minor" right="minor">max</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">
            <c>(int)(Math.random() * range) + min</c>
          </cell>

          <cell bottom="minor" right="minor">min</cell>
          <cell bottom="minor" right="minor">min + range</cell>
          <cell bottom="minor" right="minor">range</cell>
        </row>

        <row left="minor">
          <cell bottom="minor" right="minor">
            <c>(int)(Math.random() * (max - min)) + min</c>
          </cell>

          <cell bottom="minor" right="minor">min</cell>
          <cell bottom="minor" right="minor">max</cell>
          <cell bottom="minor" right="minor">max - min</cell>
        </row>
      </tabular>
    </table>

    <activity label="qrand_1">
      <statement>
        <p>Which of the following would be true about 40% of the time?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>Math.random() &lt; 0.4</p>
          </statement>

          <feedback>
            <p>
              This is true about 40% of the time since Math.random returns a
              value from 0 to not quite 1.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Math.random() &gt; 0.4</p>
          </statement>

          <feedback>
            <p>This will be true about 60% of the time.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Math.random() == 0.4</p>
          </statement>

          <feedback>
            <p>
              Do not use == with double values! Remember that Math.random can
              return any number between 0 and not quite 1 (about .99999999).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qrand_2">
      <statement>
        <p>
          Which of the following would return a random number from 1 to 5
          inclusive?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>((int) (Math.random() * 5))</p>
          </statement>

          <feedback>
            <p>This would be a number between 0 and 4.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>((int) (Math.random() * 6))</p>
          </statement>

          <feedback>
            <p>This would be a number between 0 and 5.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>((int) (Math.random() * 5) + 1)</p>
          </statement>

          <feedback>
            <p>
              The first part would return a number between 0 and 4 and when you
              add 1 you get a number from 1 to 5 inclusive.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qrand_3">
      <statement>
        <p>
          Which of the following would return a random number from 0 to 10
          inclusive?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>((int) (Math.random() * 10))</p>
          </statement>

          <feedback>
            <p>This would be a number between 0 and 9.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>((int) (Math.random() * 11))</p>
          </statement>

          <feedback>
            <p>This would be a number between 0 and 10.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>((int) (Math.random() * 10) + 1)</p>
          </statement>

          <feedback>
            <p>
              The first part would return a number between 0 and 9 and when you
              add 1 you get a number from 1 to 10 inclusive.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="qrand_4">
      <statement>
        <p>Which of the following would be true about 75% of the time?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Math.random() &lt; 0.25</p>
          </statement>

          <feedback>
            <p>
              This is true about 25% of the time, since it will be a number from
              0 to not quite 1.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Math.random() &gt; 0.25</p>
          </statement>

          <feedback>
            <p>
              This is true about 75% of the time, since it will be a number from
              0 to not quite 1.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Math.random() == 0.25</p>
          </statement>

          <feedback>
            <p>
              Do not use == with double values! Remember that Math.random can
              return any number between 0 and not quite 1 (about .99999999).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="apcsa_sample3">
      <statement>
        <p>
          Which of the following statements assigns a random integer between 25
          and 60, inclusive, to rn?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int rn = (int) (Math.random() * 25) + 36;</p>
          </statement>

          <feedback>
            <p>
              Remember that (int)(Math.random()*range) + min moves the random
              number into a range starting from a minimum number. We want the
              minimum number to be 25, but the minimum number here would be 36.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>int rn = (int) (Math.random() * 25) + 60;</p>
          </statement>

          <feedback>
            <p>
              Remember that (int)(Math.random()*range) + min moves the random
              number into a range starting from a minimum number. We want the
              minimum number to be 25, but the minimum number here would be 60.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>int rn = (int) (Math.random() * 26) + 60;</p>
          </statement>

          <feedback>
            <p>
              Remember that (int)(Math.random()*range) + min moves the random
              number into a range starting from a minimum number. Here the min
              is 25. We want the minimum number to be 25, but the minimum number
              here would be 60.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>int rn = (int) (Math.random() * 36) + 25;</p>
          </statement>

          <feedback>
            <p>
              Yes, (int)(Math.random()*36) + 25 moves the random number into a
              range of 36 numbers starting from a minimum number 25 up to 60.
              The range is (max number - min number + 1) which is (60-25 +1) =
              36.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>int rn = (int) (Math.random() * 60) + 25;</p>
          </statement>

          <feedback>
            <p>
              This would give us random numbers from 25 to 85. Remember that you
              can compute the range you need with (max number - min number + 1).
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-random-numbers">
    <title>Coding Challenge : Random Numbers</title>
    <image source="Unit1-Using-Objects-and-Methods/Figures/lock.jpg" width="18%" alt="lock" />
    <p>
      You may have a combination lock on your locker at school where you have to
      spin the dial to 3 separate numbers from 0 up to 40. What if you forgot
      your combination? Would you be able to guess it?
    </p>

    <p>
      <ol marker="1">
        <li>
          <p>
            Write code that will generate 3 random integers from 0 up to 40 (but
            not including 40) using <term>Math.random()</term> in the Active
            Code window below. Run it a couple times to see it generate
            different numbers.
          </p>
        </li>

        <li>
          <p>
            How many times would you need to run it to guess your combination
            correctly? Let’s have the code compute the number of permutations
            possible in your combination lock using
            <term>Math.pow(number,exponent)</term>. For example, if you had to
            spin the dial twice on your combination lock where each spin can
            choose a digit from 0-9 (10 digits), there are <m>10^{2}</m>
            possible permutations. In Java, this would be written as
            <term>Math.pow(10,2)</term> which means 10 to the power of 2. If you
            start listing all the permutations possible, you can tell that there
            are <m>10^{2}</m> or 100 possible permutations for a 2 spins on a
            dial lock from 0-9.
          </p>
        </li>
      </ol>
    </p>

    <p>
      <pre>
00, 01, 02, 03, 04, 05, 06, 07, 08, 09
10, 11, 12, 13, 14, 15, 16, 17, 18, 19
...
90, 91, 92, 93, 94, 95, 96, 97, 98, 99
      </pre>
    </p>

    <p>
      Now what about the combination lock for this challenge? You will need to
      spin the dial 3 times: once to the right, once to the left, and once to
      the right to 3 different numbers from 0 up to 40 (not including 40). In
      general, the formula to use is <m>NumbersPerDial^{numberOfSpins}</m>.
      Write this using the <term>Math.pow()</term> method in your code and save
      it into a variable and print out.
    </p>

    <project label="challenge1-11-random-math">
      <statement>
        <p>Complete the combination lock challenge below.</p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class MathChallenge
{
    public static void main(String[] args)
    {
        // 1. Use Math.random() to generate 3 integers from 0-40 (not
        // including 40) and print them out.

        // 2. Calculate the number of combinations to choose 3 numbers between
        // 0-40 (not including 40) using Math.pow() and print it out.
        // For example, Math.pow(10,2) is 10^2 and the number of permutations
        // to choose 2 numbers between 0-9.

    }
}
        </code>
        <tests>
import static org.junit.Assert.*;
import org.junit.*;
import java.io.*;

public class RunestoneTests extends CodeTestHelper {
    @Test
    public void test1() {
        String output = getMethodOutput("main");
        String[] lines = output.split("\\s+");

        boolean passed = lines.length &gt;= 2;

        passed = getResults(
                "2+ lines of output",
                lines.length + " lines of output",
                "Expected output",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test2() {
        String output = getMethodOutput("main");
        boolean passed = output.contains("64000");
        passed = getResults("true", "" + passed, "Prints result of 40^3", passed);
        assertTrue(passed);
    }

    @Test
    public void test3() {
        String[] code = getCode().split("\n");
        String expected = "Possible answers:\n(int) (Math.random() * 40)\n(int) (40 * Math.random())";
        String actual = "";
        int num = 0;

        for (int i = 0; i &lt; code.length; i++) {
            if (code[i].contains("Math.random()") &amp;&amp; code[i].contains("40")) {
                actual += code[i].trim() + "\n";
                if (code[i].contains("(int)"))
                    num++;
            }
        }

        boolean passed = num &gt;= 3;
        passed = getResults(
                expected,
                actual,
                "Creates 3 random numbers from 0 to 40 (not inclusive)",
                passed);
        assertTrue(passed);
    }

    @Test
    public void test4() {
        String code = getCode();
        int num = countOccurences(code, "Math.pow(");

        boolean passed = num &gt;= 1;
        passed = getResults("1 or more", "" + num, "Calls to Math.pow(...)", passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>

    <p>
      Here’s another challenge that is a lot of fun! Can you use random numbers
      to make dancing turtles? This idea was suggested by CSA teacher Zac
      Martin.
    </p>

    <project label="challenge-random-dancing-turtles">
      <statement>
        <p>
          Complete the random numbers using Math.random() in the correct ranges
          to choose x, y coordinates and random color in the range of 0-255 for
          the turtle. Put on some music and watch your turtle dance!
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.util.*;
import java.awt.*;

public class DancingTurtles
{
  public static void main(String[] args)
  {

      World world = new World(500,400);
      Turtle yertle = new Turtle(world);

      // This is a loop that runs 10 times (you will learn to write loops in
      // Unit 2)
      for(int i = 1; i &lt;= 10; i++)
      {
       // Can you choose a randomX between 0-500?
       // Can you adjust for the 20 pixel width of the turtle,
       // so it doesn't get cut off at the edges?
       // Move the range from 20 to 480.
       int randomX = 0;
       // Can you choose a randomY between 0-400?
       // Can you adjust for the 20 pixel height of the turtle,
       // so it doesn't get cut off at the edges?
       int randomY = 0;

       yertle.moveTo(randomX, randomY);
       yertle.turnRight();

       // Can you choose a random red, green, and blue value between 0-255?
       int randomR = 0;
       int randomG = 0;
       int randomB = 0;

       yertle.setColor(new Color(randomR, randomG, randomB));

      } // end of loop
      world.show(true);
  }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("DancingTurtles");
    }

    @Test
    public void test1()
    {
        String code = getCode();
        int numRandom = countOccurences(code, "Math.random()");

        boolean passed = numRandom &gt;= 5;
        passed = getResults("5+", "" + numRandom, "5+ calls to Math.random()", passed);
        assertTrue(passed);
    }

    @Test
    public void test2()
    {
        boolean passed =
                checkCodeContainsNoRegex(
                        "Random numbers for 0-255 colors (256 values)", "Math.random() * 256");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

    <subsection>
    <title>Coding Challenge: Ladder on Tower</title>
    <image source="Unit1-Using-Objects-and-Methods/Figures/ladder.png" width="36%" alt="Ladder on tower" />
    <p>
      The Pythagorean theorem states that the length of the hypotenuse (the side
      opposite the right angle in a right triangle) is the square root of the
      sum of the squares of the lengths of the other two sides, also called the
      “legs” or the width and height of the triangle. (Incidentally, the
      Pythagorean theorem is named for Pythagoras who was also the leader of the
      gang of Greek mathematicians who legend has it allegedly drowned their
      fellow mathematician for showing that <m>\sqrt{2}</m> is irrational.)
      Here’s the formula for this theorem:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <m>c = \sqrt{a^{2} + b^{2}}</m> where <m>a</m> and <m>b</m> are the
            width and height of the triangle and <m>c</m> is the length of the
            hypotenuse.
          </p>
        </li>
      </ul>
    </p>

    <p>
      One common use for the Pythagorean theorem is to calculate the length of
      ladder you will need to reach the window of your beloved, given that their
      cruel parents have locked them in a tower surrounded by a moat. The ladder
      will be the hypotenuse of a triangle whose legs are the height of the
      window of your beloved’s room in the tower and the width of the moat since
      you have to place the base of the ladder on the edge of the moat.
    </p>

    <activity label="hypotenuse-java-mc">
      <title>Find correct hypotenuse</title>
      <statement>
        <p>
          Which of the following are correct Java expressions to compute the
          hypotenuse of a triangle with legs <c>a</c> and <c>b</c> given the
          Pythagorean Theorem <m>c = \sqrt{a^{2} + b^{2}}</m> where <m>a</m> and
          <m>b</m> are the lengths of the legs and <m>c</m> is the length of the
          hypotenuse?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement id="hypotenuse-java-mc_opt_a">
            <p>
              <c>Math.sqrt(a * a + b * b)</c>
            </p>
          </statement>

          <feedback id="hypotenuse-java-mc_opt_a">
            <p>
              ✅ <c>a * a</c> is a squared, likewise <c>b * b</c>. Adding them
              with <c>+</c> gives us the sum which is then passed to
              <c>Math.sqrt</c>.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="hypotenuse-java-mc_opt_b">
            <p>
              <c>Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))</c>
            </p>
          </statement>

          <feedback id="hypotenuse-java-mc_opt_b">
            <p>
              ✅ <c>Math.pow(a, 2)</c> is <c>a</c> squared, likewise
              <c>Math.pow(b, 2)</c>. Adding them with <c>+</c> gives us the sum
              which is then passed to <c>Math.sqrt</c>.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="hypotenuse-java-mc_opt_c">
            <p>
              <c>Math.sqrt(a + b)</c>
            </p>
          </statement>

          <feedback id="hypotenuse-java-mc_opt_c">
            <p>❌ Close, but we need to square the lengths of the legs.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="hypotenuse-java-mc_opt_d">
            <p>
              <c>a * a + b * b</c>
            </p>
          </statement>

          <feedback id="hypotenuse-java-mc_opt_d">
            <p>
              ❌ This is the sum of the squares of the lengths of the legs which
              gives us the square of the hypotenuse. We need a <c>Math.sqrt</c>
              to get the length of the hypotenuse.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <project label="challenge-1-10-pythagorean">
      <title>Ladder size</title>
      <statement>
        <p>
          Complete the <c>ladderSizeNeeded</c> method below using the
          Pythagorean Theorem and the <c>Math.sqrt</c> method. Then in the main
          method, write a method call to test the <c>ladderSizeNeeded</c> method
          with arguments for the height of 30 and the width of 40. The method
          should return the length of the ladder needed to reach the window of
          your beloved.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class LadderHelper {
              /* ladderSizeNeeded computes the hypotenuse of a right triangle
               * given the lengths of the other two sides.
               * @param height : the height of the window
               * @param width : the width of the moat
               * @return the length of the ladder needed
               */
              public static double ladderSizeNeeded(double height, double width) {
                  double ladderSize;
                  // TODO: Calculate ladderSize using the Pythagorean theorem
                  // with the Math.sqrt and Math.pow (or just *) methods
                  // using the arguments height and width

                  return ladderSize;
              }

              public static void main(String[] args) {
                  double size;
                  // TODO: Call the ladderSizeNeeded method
                  // with the height of 30 and the width of 40 and save it in size.

                  System.out.println("Beloved, I need a " + size + " foot ladder!");
              }
          }
        </code>
        <tests>
import org.junit.Test;
import java.io.IOException;

public class RunestoneTests extends CodeTestHelper
{
    private void check(double height, double width)
    {
        double expected = Math.sqrt(Math.pow(height, 2) + Math.pow(width, 2));
        double got = LadderHelper.ladderSizeNeeded(height, width);
        String label = "ladderSizeNeeded(" + height + ", " + width + ")";
        expectExact(expected, got, label);
    }

    @Test
    public void testMain() throws IOException
    {
        String expected = "Beloved, I need a 50.0 foot ladder!";
        expect(expected, getMethodOutput("main"), "Expected output from main");
    }

    @Test
    public void testShort() {
      check(3, 4);
    }
    @Test
    public void testTall() {
      check(30, 40);
    }

    @Test
    public void testRandom() {
      check(Math.random() * 100, Math.random() * 50);
    }
}
        </tests>
      </program>
    </project>

      <activity label="vocab1_9">
      <title>Vocab check</title>
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct concept
          on the right. Click the "Check Me" button to see if you are correct.
        </p>
      </statement>

      <feedback>
        <p>Review the summary below.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">named block of code to perform a task</premise>
          <response>method</response>
        </match>

        <match>
          <premise order="2">where execution starts</premise>
          <response>main method</response>
        </match>

        <match>
          <premise order="3">method name and parameter list</premise>
          <response>method signature</response>
        </match>

        <match>
          <premise order="4">a variable declared in the header of a method</premise>
          <response>parameter</response>
        </match>

        <match>
          <premise order="5">value passed into a method when it is called</premise>
          <response>argument</response>
        </match>
      </cardsort>
    </activity>
  </subsection>

  <subsection xml:id="summary-2">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 1.10.A.2) Class methods are typically called using the class
            name along with the dot operator. When the method call occurs in the
            defining class, the use of the class name is optional in the call.
          </p>
        </li>
        <li>
          <p>
            (AP 1.11.A.1) The <c>Math</c> class is part of the <c>java.lang</c>
            package. Classes in the <c>java.lang</c> package are available by
            default.
          </p>
        </li>

        <li>
          <p>
            (AP 1.11.A.2) The Math class contains only class (static) methods.
            They can be called using <term>Math</term>.method(); for each
            method.
          </p>
        </li>

        <li>
          <p>
            (AP 1.11.A.2) The following static Math methods are part of the Java
            Quick Reference:
          </p>

          <p>
            <ul>
              <li>
                <p>
                  <term>int abs(int)</term> : Returns the absolute value of an
                  int value (which means no negatives).
                </p>
              </li>

              <li>
                <p>
                  <term>double abs(double)</term> : Returns the absolute value
                  of a double value.
                </p>
              </li>

              <li>
                <p>
                  <term>double pow(double, double)</term> : Returns the value of
                  the first parameter raised to the power of the second
                  parameter.
                </p>
              </li>

              <li>
                <p>
                  <term>double sqrt(double)</term> : Returns the positive square
                  root of a double value.
                </p>
              </li>

              <li>
                <p>
                  <term>double random()</term> : Returns a double value greater
                  than or equal to 0.0 and less than 1.0 (not including 1.0)!
                </p>
              </li>
            </ul>
          </p>
        </li>

        <li>
          <p>
            (AP 1.11.A.3) The values returned from <c>Math.random()</c> can be
            manipulated to produce a random int or double in a defined range.
          </p>
        </li>

        <li>
          <p>
            <term>(int)(Math.random() * range) + min</term> moves the random
            number into a range starting from a minimum number. The range is the
            <term>(max - min + 1)</term>. For example, to get a number in the
            range of 5 to 10, use the range 10-5+1 = 6 and the min number 5:
            <c>(int)(Math.random()*6) + 5</c>.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
