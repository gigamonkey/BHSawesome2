<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-2-7-while-loops">
  <title>While loops</title>

  <idx>loop</idx>
  <idx>looping</idx>
  <idx>iteration</idx>
  <idx>repetition</idx>
  <idx>while</idx>
  <idx><h>loop</h><h>while</h></idx>
  <introduction>
    <p>
      Java has two flavors of loop, <c>while</c> and <c>for</c>. Of the two the
      <c>while</c> loop is simpler, with fewer moving parts so we’ll talk about
      it first. The <c>for</c> loop, which we’ll discuss in the next section is
      actually the one you’ll use most of the time as it has some amenities to
      make it easier to express common looping patterns.
    </p>

    <p>
      Syntactically, a <c>while</c> statement looks a lot like an <c>if</c>
      statement, as you can see in the two listings below:
    </p>

    <sidebyside>
      <listing>
        <title><c>if</c> statement</title>

        <program language="java">
          if (condition) {
              statements;
          }
        </program>
      </listing>

      <listing>
        <title><c>while</c> loop</title>

        <program>
          while (condition) {
              statements;
          }
        </program>
      </listing>
    </sidebyside>

    <p>
      Like with an <c>if</c> statement, when the flow of control reaches a
      <c>while</c> loop, the first thing that happens is the condition, which
      must be a <c>boolean</c> expression, is evaluated. If it true, then the
      body of the loop runs. However, when control reaches the end of the body,
      it loops back around to the top of the loop and evaluates the condition
      again, and runs the body again if the condition is true, and so on. When
      the condition is false, the body is skipped, just like in an <c>if</c>
      statement when its condition is false.
    </p>

    <p>
      So the difference between an <c>if</c> statement and a <c>while</c> loop
      is that the body of the <c>if</c> statement runs either zero or one times,
      whereas the body of the <c>while</c> loop runs zero or many times.
    </p>

    <p>
      Here’s a flow chart for a <c>while</c> loop. Follow the arrows in this
      diagram to see when the condition is checked versus when the body is
      executed.
    </p>

    <figure align="center">
      <caption>Control flow in a <c>while</c> Loop</caption>

      <image source="_static/img/while-loop-flowchart.svg" width="30%" />
    </figure>

    <p>
      If you took AP CSP using a block program like Snap!, you may be familiar
      with the Repeat Until block. Unfortunately Repeat Until is the opposite of
      a <c>while</c> loops: it loops until the condition is <em>true</em> where
      a <c>while</c> loop loops until its condition is <em>false</em>.
    </p>

    <p>
      For example, the Snap! block below that loops until <c>x</c> is 100 would
      need to be written in Java with a <c>while</c> loop that runs as long as
      <c>x</c> is not yet 100, which can be written as <c>x &lt; 100</c>.
    </p>

    <figure>
      <caption>
        Comparing Snap! <c>repeat until</c> loop to Java <c>while</c> loop
      </caption>

      <image source="_static/img/snap-repeat-until-vs-java.png" width="100%" />
    </figure>

    <p>
      The following <url href="https://www.youtube.com/watch?v=Uw9mv53Jnfs"
      visual="https://www.youtube.com/watch?v=Uw9mv53Jnfs">video</url>
      introduces while loops.
    </p>

    <video youtube="Uw9mv53Jnfs" label="video-while-loop" />
  </introduction>

  <subsection xml:id="three-steps-to-writing-a-loop">
    <title>Three steps to writing a loop</title>

    <p>
      The simplest loops are <term>counting loops</term> where the loop’s
      condition is based on checking a numeric <term>loop variable</term> that
      counts up each time the body of the loop executes until it reaches some
      limit. Thus the loop variable is a counter that controls how many times
      the loop body executes.
    </p>

    <p>
      There are three steps to writing a counter-controlled <c>while</c> loop.
      They are labeled in <xref ref="three-steps-of-writing-a-loop"
      text="type-global" />.
    </p>

    <ol>
      <li>Initialize the loop variable (before the <c>while</c> loop)</li>

      <li>Test the loop variable (in the loop header)</li>

      <li>
        Update the loop variable (somewhere in the loop body, usually at the
        end)
      </li>
    </ol>

    <figure xml:id="three-steps-of-writing-a-loop">
      <caption>Three Steps of Writing a Loop</caption>

      <image source="Unit2-Selection-and-Iteration/Figures/loop3steps.png" width="71%" />
    </figure>

    <activity label="whileloop">
      <statement>
        <p>
          Here is a while loop that counts from 1 to 5 that demonstrates the 3
          steps of writing a loop. Can you change it to count from 2 to 10?
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class LoopTest1 {
              public static void main(String[] args) {
                  // 1. initialize the loop variable
                  int count = 1;

                  // 2. test the loop variable
                  while (count <= 5) {
                      System.out.println(count);
                      // 3. update the loop variable
                      count++;
                  }
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "2\n3\n4\n5\n6\n7\n8\n9\n10\n";
                  boolean passed = getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="print_odds_while" numbered="yes" adaptive="yes" indentation="show" language="java">
      <title>Printing odds</title>

      <statement>
        <p>
          The following method has the correct code to print out all the odd
          values from 1 to 10, but the code is mixed up. Drag the blocks from
          the left into the correct order on the right and indent them
          correctly. Even though Java doesn’t require indention it is a good
          habit to get into. You will be told if any of the blocks are in the
          wrong order or not indented correctly when you click the “Check Me”
          button.
        </p>
      </statement>

      <blocks>
        <block order="4">
          <cline>public static void printOdds() {</cline>
        </block>

        <block order="6">
          <cline>   // initialize the loop variable</cline>
          <cline>   int i = 1;</cline>
        </block>

        <block order="3">
          <cline>   while (i &lt;= 10) {</cline>
        </block>

        <block order="5">
          <cline>      System.out.println(i);</cline>
        </block>

        <block order="1">
          <cline>      // update the loop variable</cline>
          <cline>      i += 2;</cline>
        </block>

        <block order="2">
          <cline>   } // end while</cline>
          <cline>} // end method</cline>
        </block>
      </blocks>
    </activity>

    <activity label="while1">
      <statement>
        <p>
          Consider the following code segment. Which of the following can be
          used as a replacement for the missing loop header so that the loop
          prints out “0 2 4 6 8 10”?
        </p>

        <program language="java">
          <code>
            int count = 0;
            /* missing loop header */ {
                System.out.print(count + " ");
                count += 2;
            }
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>while (count == 10)</p>
          </statement>

          <feedback>
            <p>
              This would not print out anything because count = 0 at the start
              of the loop, so it never equals 10.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>while (count &lt; 10)</p>
          </statement>

          <feedback>
            <p>
              This would print out 0 2 4 6 8. Try it in the Active Code window
              above.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>while (count &lt;= 10)</p>
          </statement>

          <feedback>
            <p>Yes, try it in the Active Code window above.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>while (count &gt; 10)</p>
          </statement>

          <feedback>
            <p>
              This would not print out anything because count = 0 at the start
              of the loop, so it is not greater than 10.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="tracing-loops-1">
    <title>Tracing loops</title>

    <p>
      A really important skill to develop is the ability to trace the values of
      variables and how they change during each iteration of a loop.
    </p>

    <p>
      You can create a tracing table that keeps track of the variable values
      each time through the loop as shown below. This is very helpful on the
      exam. Studies have shown that students who create tables like this do much
      better on code tracing problems on multiple choice exams.
    </p>

    <figure>
      <caption>
        A trace table showing the values of all of the variables each time
        through the loop. Iteration 0 means before the loop.
      </caption>

      <image source="Unit2-Selection-and-Iteration/Figures/traceTable.png" width="27%" />
    </figure>

    <p>
      Watch the following <url
      href="https://www.youtube.com/watch?v=TZss5ukwN8s"
      visual="https://www.youtube.com/watch?v=TZss5ukwN8s">video</url> for a
      tracing demo. When you are tracing through code, pretend to be the
      computer running the code line by line, repeating the code in the loop,
      and keeping track of the variable values and output.
    </p>

    <video youtube="TZss5ukwN8s" label="video-tracing-loops" />
    <activity label="while2">
      <statement>
        <p>
          Consider the following code segment. What is count’s value after
          running this code segment? (To trace through the code, keep track of
          the variable count and its value through each iteration of the loop.)
        </p>

        <program language="java">
          <code>
            <![CDATA[

            int count = 1;
            while (count <= 10) {
                count *= 2;
            }
            count = count - 10;

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>0</p>
          </statement>

          <feedback>
            <p>Count is changed inside the loop and after the loop.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>1</p>
          </statement>

          <feedback>
            <p>Count is changed inside the loop and after the loop.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>16</p>
          </statement>

          <feedback>
            <p>Don't forget to subtract 10 from count after the loop.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>6</p>
          </statement>

          <feedback>
            <p>
              Yes, the loop will keep multiplying count by 2 to get 2, 4, 8, 16
              and then it subtracts 10 from 16 after the loop.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      Step through the code above with the <url
      href="http://www.pythontutor.com/visualize.html#code=public%20class%20TraceLoop%20%7B%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20int%20count%20%3D%201%3B%0A%20%20%20%20%20%20while%20%28count%20%3C%3D%2010%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20count%20*%3D%202%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20count%20%3D%20count%20-%2010%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false"
      visual="http://www.pythontutor.com/visualize.html#code=public%20class%20TraceLoop%20%7B%0A%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%20%7B%0A%20%20%20%20%20%20int%20count%20%3D%201%3B%0A%20%20%20%20%20%20while%20%28count%20%3C%3D%2010%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20count%20*%3D%202%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20count%20%3D%20count%20-%2010%3B%0A%20%20%20%20%7D%0A%7D&amp;cumulative=false&amp;curInstr=16&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">visualizer</url>.
    </p>

    <activity label="while3">
      <statement>
        <p>
          What does the following code print? (To trace through the code, keep
          track of the variable x and its value, the iteration of the loop, and
          the output every time through the loop.)
        </p>

        <program language="java">
          <code>
            <![CDATA[

            int x = -5;
            while (x < 0) {
               x++;
               System.out.print(x + " ");
            }

            ]]>
          </code>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>5 4 3 2 1</p>
          </statement>

          <feedback>
            <p>x is initialized (set) to -5 to start.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>-5 -4 -3 -2 -1</p>
          </statement>

          <feedback>
            <p>x is incremented (x++) before the print statement executes.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>-4 -3 -2 -1 0</p>
          </statement>

          <feedback>
            <p>
              x is set to -5 to start but then incremented by 1 so it first
              prints -4.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="common-errors-with-loops">
    <title>Infinite loops</title>

    <idx>infinite loop</idx>
    <idx><h>loop</h><h>infinite</h></idx>
    <p>
      One common error with <c>while</c> is to accidentally create an
      <term>infinite loop</term>. An infinite loop runs forever because
      condition never becomes false. If we create an infinite loop by accident,
      our program may seem to get stuck. For an example, look at the following
      loop. It looks a lot like the loops earlier in this chapter but it is
      actually an infinite loop. Can you see why?
    </p>

    <program language="java">
      <code>
        <![CDATA[

        int i = 0;
        while (i < 10) {
            System.out.println(i);
        }

        ]]>
      </code>
    </program>

    <p>
      The problem in this loop—and a common way to accidentally create an
      infinite <c>while</c> loop—is that although it includes steps 1 and 2
      (initializing the loop variable and testing it) it forgot step 3 and never
      changes the loop variable. The loop variable, <c>i</c>, starts at <c>0</c>
      and the loop loops as long as <c>i &lt; 10</c> which will always be true
      because there’s no code in the loop that changes <c>i</c>. The simple fix
      is to add a line that increments <c>i</c>:
    </p>

    <program language="java">
      <code>
        <![CDATA[

        int i = 0;
        while (i < 10) {
            System.out.println(i);
            i++; // This fixes it!
        }

        ]]>
      </code>
    </program>

    <p>
      Sometimes we will write an infinite loop on purpose. For example, here’s a
      simple loop that might exist in a computer-controlled thermostat. The loop
      header of <c>while (true)</c> is a clear sign that this was intended to be
      an infinite loop.
    </p>

    <program language="java">
      <code>
        while (true) {
            if (tooHot()) {
                turnOnFurnace();
            } else {
                turnOffFurnace();
            }
        }
      </code>
    </program>

    <p>
      An error that’s the opposite of creating an infinite loop is writing a
      loop that never runs. (An infinitely short loop!) This can be a problem
      either in step one, initializing the loop variable or step two, writing
      the loop condition. For example, if the loop variable is initialized to 10
      and test tests that it is less than 10, the loop body will never run.
    </p>

    <program language="java">
      <code>
        <![CDATA[

        int i = 10;
        while (i < 10){ // This loop will never run!
            System.out.println(i);
            i++;
        }

        ]]>
      </code>
    </program>
  </subsection>

  <subsection>
    <title>Off-by-one errors</title>

    <p>
      Another common error with loops is an <term>off-by-one error</term> where
      the loop runs one too many or one too few times. This is usually a problem
      in step two, writing the test condition caused by using the incorrect
      relational operator such as <c>&lt;=</c> when it should have been
      <c>&lt;</c> or vice versa.
    </p>

    <activity label="whileloopbugs">
      <statement>
        <p>
          The <c>while</c> loop should print out the numbers from 1 to 8, but it
          has two bugs. One causes an infinite loop. And the other an off-by-one
          error. Can you fix the bugs? Try to fix the infinite loop bug first
          since otherwise you’ll just get an error abut the code taking too long
          to run.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          <![CDATA[

          public class LoopTest2 {
              public static void main(String[] args) {
                  int count = 1;
                  while (count < 8) {
                      System.out.println(count);
                  }
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("LoopTest2");
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect = "1\n2\n3\n4\n5\n6\n7\n8";

                  boolean passed = getResults(expect, output, "Running main");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="input-controlled-loops">
    <title>Input-controlled loops</title>

    <p>
      While we can use a <c>while</c> loop as a counting loop to repeat the body
      of the loop a certain number of times, we’ll see in the next section that
      that’s more easily done with a <c>for</c> loop. A <c>while</c> loop is
      more typically used when we don’t know how many times the loop will need
      to execute—when the condition will eventually become false but it might be
      after a few iterations or a lot and the only way to find out is to execute
      the loop.
    </p>

    <p>
      On such loop of this kind is an <term>input-controlled loop</term> where
      code in the body accepts input from the user, and that input indicates
      whether to stop or to keep looping. For example, in the Magpie chatbot lab
      code below, the <c>while</c> loop stops when the user types “Bye”.
    </p>

    <program language="java">
      Scanner in = new Scanner(System.in);
      String statement = in.nextLine();
      while (!statement.equals("Bye")) {
          System.out.println(getResponse(statement));
          statement = in.nextLine();
      }
    </program>

    <p>
      Notice how the loop variable in this loop is a <c>String</c> not a number.
      And the condition, <c>statement.equals("Bye")</c> is how we test whether
      that <c>String</c> is a particular value, <c>"Bye"</c>. (More on this in
      the unit <xref ref="reference-types" />). A special value, like
      <c>"Bye</c>, that is the sign to stop the loop is called a <term>sentinel
      value</term> for the loop.
    </p>

    <p>
      Also notice how the loop still contains a line at the bottom of the loop
      to update the loop variable with new input from the user. Without that
      line the loop would either be an infinite loop, endlessly printing out the
      first thing the user typed or an infinitely short loop if the typed
      <c>"Bye"</c> as the very first thing.
    </p>
  </subsection>

  <subsection xml:id="coding-challenge-turtle-squares">
    <title>Coding Challenge: Turtle Squares</title>

    <p>
      Do you remember when we used the turtle objects to draw shapes? To create
      a square without loops we had to repeat code to go forward and turn 90
      degrees to the right 4 times like below. This is a lot of repeated code!
    </p>

    <activity label="repeatedcode-square">
      <statement>
        <p>
          Click on the lines of code that are repeated after the first two
          lines.
        </p>
      </statement>

      <feedback>
        <p>Which lines are identical to the first two lines?</p>
      </feedback>

      <areas>
        <cline><area correct="no">yertle.forward(100);</area></cline>
        <cline><area correct="no">yertle.turn(90);</area></cline>
        <cline><area correct="yes">yertle.forward(100);</area></cline>
        <cline><area correct="yes">yertle.turn(90);</area></cline>
        <cline><area correct="yes">yertle.forward(100);</area></cline>
        <cline><area correct="yes">yertle.turn(90);</area></cline>
        <cline><area correct="yes">yertle.forward(100);</area></cline>
        <cline><area correct="yes">yertle.turn(90);</area></cline>
      </areas>
    </activity>

    <p>
      Can you change the code below to remove the repeated lines of code and use
      a while loop to draw 4 sides of the square? Did you notice that the code
      becomes a lot shorter? You should only need 1 call to forward and 1 call
      to turn in the loop. Whenever you find yourself repeating code, try to use
      a loop instead!
    </p>

    <p>
      (If the code below does not work for you, you can copy the code into this
      <url href="https://replit.com/@BerylHoffman/Java-Swing-Turtle"
      visual="https://replit.com/@BerylHoffman/Java-Swing-Turtle">replit
      link</url> (refresh page after forking and if it gets stuck) or download
      the files <url
      href="https://github.com/bhoffman0/csawesome2/tree/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip"
      visual="https://github.com/bhoffman0/csawesome2/tree/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip">here</url>
      to use in your own IDE.)
    </p>

    <project label="challenge-turtle-square-while">
      <statement>
        <p>
          Can you change the code below to remove the repeated lines of code and
          use a while loop to draw 4 sides of the square?
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDrawSquare {
              public static void main(String[] args) {
                  World world = new World(300, 300);
                  Turtle yertle = new Turtle(world);

                  // Change the following code to use a while loop to draw the square
                  // Remember to initialize a counter variable, test it, and increment it.

                  yertle.forward();
                  yertle.turn(90);
                  yertle.forward();
                  yertle.turn(90);
                  yertle.forward();
                  yertle.turn(90);
                  yertle.forward();
                  yertle.turn(90);

                  world.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("TurtleDrawSquare");
              }

              @Test
              public void test1()
              {
                  String target = "while (* ? 4)";
                  boolean passed = checkCodeContainsRegex("while loop that counts to 4", target);
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  String code = getCode();
                  String forwards = ".forward()";

                  int count = countOccurences(code, forwards);

                  boolean passed = count == 1;

                  passed =
                          getResults(
                                  "1 forward()",
                                  "" + count + " forward()",
                                  "Should only need forward() once",
                                  passed);
                  assertTrue(passed);
              }

              @Test
              public void test3()
              {
                  String code = getCode();
                  String forwards = ".turn(90)";

                  int count = countOccurences(code, forwards);

                  boolean passed = count == 1;

                  passed =
                          getResults(
                                  "1 turn(90)",
                                  "" + count + " turn(90)",
                                  "Should only need turn(90) once",
                                  passed);
                  assertTrue(passed);
              }
              @Test
              public void test4()
              {
                  boolean passed = checkCodeContains("increment the counter with ++", "++");
                  assertTrue(passed);
              }
              @Test
              public void test5()
              {
                  boolean passed = checkCodeContains("test the counter with < or <=", "<");
                  assertTrue(passed);
              }
          }

          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-24">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 2.7.A.1) Iteration statements (loops) change the flow of control
            by repeating a segment of code zero or more times as long as the
            Boolean expression controlling the loop evaluates to true. Iteration
            is a form of repetition.
          </p>
        </li>

        <li>
          <p>
            (AP 2.7.B.1) A <term>while loop</term> is a type of iterative
            statement. In while loops, the Boolean expression is evaluated
            before each iteration of the loop body, including the first. When
            the expression evaluates to true, the loop body is executed. This
            continues until the Boolean expression evaluates to false, whereupon
            the iteration terminates. Here is the general form of a while loop:
          </p>

          <program language="java">
            <code>
              <![CDATA[

              // The statements in a while loop run zero or more times,
              // determined by how many times the condition is true
              int count = 0; // initialize the loop variable
              while (count < 10)  // test the loop variable
              {
                  // repeat this code
                  // update the loop variable
                  count++;
              }

              ]]>
            </code>
          </program>
        </li>

        <li>
          <p>
            Loops often have a <term>loop variable</term> that is used in the
            boolean condition of the loop. Remember the three steps of writing a
            loop:
          </p>

          <ol>
            <li>Initialize the loop variable</li>

            <li>Test the loop variable</li>

            <li>Update the loop variable</li>
          </ol>
        </li>

        <li>
          <p>
            (AP 2.7.A.2) An <term>infinite loop</term> occurs when the Boolean
            expression in an iterative statement always evaluates to true.
          </p>
        </li>

        <li>
          <p>
            (AP 2.7.A.3) The loop body of an iterative statement will not
            execute if the Boolean expression initially evaluates to false.
          </p>
        </li>

        <li>
          <p>
            (AP 2.7.A.4) <term>Off by one errors</term> occur when the iteration
            statement loops one time too many or one time too few.
          </p>
        </li>

        <li>
          <p>
            <term>Input-controlled loops</term> often use a <term>sentinel
            value</term> that is input by the user like “bye” or -1 as the
            condition for the loop to stop. Input-controlled loops are not on
            the AP CSA exam, but are very useful to accept data from the user.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-17">
    <title>AP Practice</title>

    <activity label="AP-while-loop1">
      <statement>
        <p>Consider the following code segment.</p>

        <program language="java">
          <code>
            <![CDATA[

            int n = 35;
            int result = 1;
            while (n > 0)
            {
                int d = n % 10;
                result *= d;
                n /= 10;
            }
            System.out.println(result);

            ]]>
          </code>
        </program>

        <p>What is the output after the code has been executed?</p>
      </statement>

      <choices>
        <choice>
          <statement id="AP-while-loop1_opt_a">
            <p>35</p>
          </statement>

          <feedback id="AP-while-loop1_opt_a">
            <p>
              Keep track of the variables n, d, and result. Watch the tracing
              video.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-while-loop1_opt_b">
            <p>15</p>
          </statement>

          <feedback id="AP-while-loop1_opt_b">
            <p>Correct! The digits in n = 35 are 3 and 5 and 3*5 = 15.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-while-loop1_opt_c">
            <p>10</p>
          </statement>

          <feedback id="AP-while-loop1_opt_c">
            <p>
              Keep track of the variables n, d, and result. Watch the tracing
              video.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-while-loop1_opt_d">
            <p>8</p>
          </statement>

          <feedback id="AP-while-loop1_opt_d">
            <p>
              Although the sum of the digits in 35 are 8. This code uses
              multiplication.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-while-loop1_opt_e">
            <p>33</p>
          </statement>

          <feedback id="AP-while-loop1_opt_e">
            <p>
              Keep track of the variables n, d, and result. Watch the tracing
              video.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-while-loop2">
      <statement>
        <p>
          Consider the following code segment which is intended to print out the
          even numbers from 0 to 8 (including 8).
        </p>

        <program language="java">
          <code>
            int count = 0;
            /* missing loop header */
            {
                if (count % 2 == 0)
                {
                    System.out.println(count);
                }
                count++;
            }
          </code>
        </program>

        <p>
          Which of the following could replace the missing loop header to ensure
          that the code segment will work as intended to print out the even
          numbers from 0 to 8?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="AP-while-loop2_opt_a">
            <p>while (count &gt; 0)</p>
          </statement>

          <feedback id="AP-while-loop2_opt_a">
            <p>This would cause an infinite loop.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-while-loop2_opt_b">
            <p>while (count &gt;= 8)</p>
          </statement>

          <feedback id="AP-while-loop2_opt_b">
            <p>
              This would not print out anything since count is 0 before the loop
              and not greater than 8.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-while-loop2_opt_c">
            <p>while (count &lt; 8)</p>
          </statement>

          <feedback id="AP-while-loop2_opt_c">
            <p>
              This would print out one too few numbers and would stop before it
              printed out 8.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-while-loop2_opt_d">
            <p>while (count &lt; 10)</p>
          </statement>

          <feedback id="AP-while-loop2_opt_d">
            <p>Correct! This would stop the loop when count is 10.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-while-loop2_opt_e">
            <p>while (count &lt;= 10)</p>
          </statement>

          <feedback id="AP-while-loop2_opt_e">
            <p>This would print out one too many numbers, 0, 2, 4, 6, 8, 10.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
