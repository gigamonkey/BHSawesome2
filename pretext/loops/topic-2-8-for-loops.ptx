<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-2-8-for-loops">
  <title>For loops</title>

  <introduction>
    <idx>for loop</idx>
    <idx><h>loop</h><h>for</h></idx>
    <p>
      While the <c>while</c> loop is all we need to be able to provide the
      repetition component required by any algorithm, it’s a little bit
      primitive. It has it’s uses but the real workhorse loop in Java is the
      <c>for</c> loop.
    </p>

    <p>
      The <c>for</c> loop really shines when writing counting loops, those loops
      where we know before the loop starts exactly how many times the body will
      run.
    </p>

    <p>
      If you took AP CSP with a block programming language like Snap! you almost
      certainly used a for loop block like the one shown below. It is a bit more
      limited than a Java <c>for</c> loop but in simple cases, such as shown on
      the right below, they are essentially the same.
    </p>

    <figure>
      <caption>Comparing Snap! and Java <c>for</c> loops.</caption>

      <image source="_static/img/snap-for-vs-java.png" width="100%" />
    </figure>
  </introduction>

  <subsection xml:id="three-parts-of-a-for-loop">
    <title>Capturing the counting loop pattern</title>

    <p>
      Remember the three step process we went through in the previous section
      for building a counting <c>while</c> loop?
    </p>

    <p>
      <ol>
        <li>Initialize the loop variable</li>

        <li>Test the loop variable</li>

        <li>Update the loop variable</li>
      </ol>
    </p>

    <p>
      The purpose of a <c>for</c> loop is to provide a structure that gives us
      an easy way to put all three of those parts into the loop header instead
      of having to remember to initialize the loop variable before the loop and
      to remember to update the loop variable before the end of the body the way
      we have to do in a <c>while</c> loop.
    </p>

    <p>The basic structure looks like this:</p>

    <program>
      for (initializer; condition; updater) {
         body
      }
    </program>

    <p>
      So instead of a single <c>boolean</c> condition as we have in a while
      loop, the stuff in parentheses is a bit more complicated: three parts
      separated by semicolons (<c>;</c>).
    </p>

    <p>
      Here is a control flow diagram for a for loop. If you compare this to the
      flow chart for of a <c>while</c> loop from in the previous section, you’ll
      see that the main difference is that some parts that weren’t explicitly
      part of the <c>while</c> loop now get their own nodes in the chart.
    </p>

    <figure align="center">
      <caption>Control flow in a for loop</caption>

      <image source="_static/img/for-loop-flowchart.svg" width="30%" />
    </figure>

    <p>
      The first item in the parentheses of the <c>for</c> loop header is, the
      <term>initializer</term> is a single statement that initializes the loop
      variable. Usually it also declares the variable, like <c>int i = 0</c>. As
      you can see from the flow chart, the initializer runs just once at the
      beginning of the loop.
    </p>

    <p>
      After the initializer comes the <term>condition</term>, a <c>boolean</c>
      expression that acts just like the condition in a <c>while</c> loop; as
      long as it is true the loop body executes. When it is true the program
      proceeds to the body. When the condition is false we leave the loop and go
      to whatever comes after it in the program.
    </p>

    <p>
      The final item in parentheses, the <term>updater</term>, is a statement
      that, as the flow chart shows, runs immediately after the body. Its job is
      to update the loop variable before control loops back to the condition.
    </p>

    <note>
      <p>
        Two of the most common ways to use a <c>for</c> loops is to count from 0
        up to an number (using &lt;) or count from 1 to the number including the
        number (using &lt;=). Remember that if you start at 0 use &lt;, and if
        you start at 1, use &lt;=. The two loops below using these two patterns
        both run 10 times. The variable i (for index) is often used as a counter
        in for-loops.
      </p>

      <program>
        <![CDATA[
        // These loops both run 10 times

        // If you start at 0, use <
        for (int i = 0; i < 10; i++) {
           System.out.println(i);
        }

        // If you start at 1, use <=
        for (int i = 1; i <= 10; i++) {
           System.out.println(i);
        }
        ]]>
      </program>
    </note>
  </subsection>

  <subsection>
    <title>Equivalence of <c>for</c> and <c>while</c> loops.</title>

    <p>
      You may be thinking that there doesn’t seem to be anything you can do with
      a <c>for</c> loop that you can’t do with a <c>while</c> loop. And you’d be
      right. In fact it is completely straight forward to translate between the
      two.
    </p>

    <figure align="center">
      <caption>Showing how a for loop maps to a while loop</caption>

      <image source="Unit2-Selection-and-Iteration/Figures/compareForAndWhile.png" width="100%" />
    </figure>

    <p>
      For a very good walkthrough of how <c>for</c> and <c>while</c> loops are
      equivalent, watch the following <url
      href="https://www.youtube.com/watch?v=SEDnzXeb2hU&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;index=9&amp;ab_channel=colleenlewis">video</url>
      which compares a <c>while</c> loop and <c>for</c> loop line by line.
    </p>

    <video youtube="SEDnzXeb2hU" label="video-for-loop" />
    <p>
      So why have both kinds of loops? And which should we use when? Since
      anything we can write with one, we can write with the other, it really
      comes down to convenience and expressing our intent.
    </p>

    <p>
      The advantage of the <c>for</c> loop is that we can see at a glance, by
      looking at the loop header the overall structure of the loop: where the
      loop variable starts, what the loop’s condition is, and how the loop
      variable changes on each iteration of the loop. So when a loop is simple
      and fits into the pattern of a basic counting loop it makes sense to use a
      <c>for</c> loop. It’s easy to read once you get used to it and it’s a
      signal that this is just a regular loop.
    </p>

    <p>
      The <c>while</c> loop, on the other hand, is infinitely flexible. It’s
      great, as we saw in the last chapter, for loops where we don’t know how
      many times the loop is going to execute until we’ve run it. And in even
      more complex loops where maybe there’s some complicated code to decide how
      to update the loop variable, or maybe when there are multiple loop
      variables, trying to fit all that into a <c>for</c> loop header is going
      to get to complicated. In that case a <c>while</c> loop is a better
      choice.
    </p>

    <activity label="forloop">
      <statement>
        <p>
          Here is a <c>for</c> loop that counts from <c>1</c> to <c>5</c>. Can
          you change it to count from <c>2</c> to <c>10</c>?
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class ForLoop {
              public static void main(String[] args) {
                  for (int count = 1; count <= 5; count++) {
                      System.out.println(count);
                  }
              }
          }
          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "2\n3\n4\n5\n6\n7\n8\n9\n10\n";
                  boolean passed = getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="forloopfromwhile">
      <statement>
        <p>
          Here is a while loop that counts from <c>5</c> to <c>10</c>. Run it
          and see what it does. Can you change it to a <c>for</c> loop? Run your
          <c>for</c> loop. Does it do the same thing?
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class ForLoopFromWhile {
              public static void main(String[] args) {
                  int count = 5;
                  while (count <= 10) {
                      System.out.println(count);
                      count++;
                  }
              }
          }
          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("ForLoopFromWhile");
              }

              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "5\n6\n7\n8\n9\n10\n";

                  boolean passed = getResults(expect, output, "Running main");
                  assertTrue(passed);
              }

              @Test
              public void testWhile() throws IOException
              {
                  String target = "while (*)";
                  boolean passed = checkCodeNotContainsRegex("while loop", target);
                  assertTrue(passed);
              }

              @Test
              public void testFor() throws IOException
              {
                  String target = "for (int * = #; * ? #; *~)";
                  boolean passed = checkCodeContainsRegex("for loop", target);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="mcq-for-1">
      <statement>
        <p>What does the following code print?</p>

        <program>
          <![CDATA[
          for (int i = 3; i < 8; i++) {
             System.out.print(i + " ");
          }
          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>3 4 5 6 7 8</p>
          </statement>

          <feedback>
            <p>
              This loop starts with i equal to 3 but ends when i is equal to 8.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>0 1 2 3 4 5 6 7 8</p>
          </statement>

          <feedback>
            <p>What is i set to in the initialization area?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>8 8 8 8 8</p>
          </statement>

          <feedback>
            <p>
              This would be true if the for loop was missing the change part
              <c>(int i = 3; i &lt; 8; )</c> but it does increment i in the
              change part <c>(int i = 3; i &lt; 8; i++)</c>.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>3 4 5 6 7</p>
          </statement>

          <feedback>
            <p>
              The value of i is set to 3 before the loop executes and the loop
              stops when i is equal to 8. So the last time through the loop i is
              equal to 7.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq-for-2">
      <statement>
        <p>What does the following code print?</p>

        <program>
          <![CDATA[
          for (int i = 1; i <= 10; i++) {
             System.out.print(i + " ");
          }
          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>3 4 5 6 7 8</p>
          </statement>

          <feedback>
            <p>What is i set to in the initialization area?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>0 1 2 3 4 5 6 7 8 9</p>
          </statement>

          <feedback>
            <p>What is i set to in the initialization area?</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>1 2 3 4 5 6 7 8 9 10</p>
          </statement>

          <feedback>
            <p>
              The value of i starts at 1 and this loop will execute until i
              equals 11. The last time through the loop the value of i is 10.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>1 3 5 7 9</p>
          </statement>

          <feedback>
            <p>This loop changes i by 1 each time in the change area.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq-for-3">
      <statement>
        <p>How many times does the following method print a <c>*</c>?</p>

        <program>
          <![CDATA[
          for (int i = 3; i <= 9; i++) {
             System.out.print("*");
          }
          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>10</p>
          </statement>

          <feedback>
            <p>This would be true if i started at 0 and ended at 9. Does it?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>6</p>
          </statement>

          <feedback>
            <p>How many numbers are between 3 and 9 (including 3 and 9)?</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>7</p>
          </statement>

          <feedback>
            <p>
              Since i starts at 3 and the last time through the loop it is 9 the
              loop executes 7 times (9 - 3 + 1 = 7)
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>9</p>
          </statement>

          <feedback>
            <p>
              This would be true if i started at 0 and the value of i the last
              time through the loop it was 8.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="print_evens" numbered="yes" adaptive="yes" indentation="show" language="java">
      <statement>
        <p>
          The following method has the correct code to print out all the even
          values from 0 to the value of 10, but the code is mixed up. Drag the
          blocks from the left into the correct order on the right and indent
          them correctly. Even though Java doesn’t require indention it is a
          good habit to get into. You will be told if any of the blocks are in
          the wrong order or not indented correctly when you click the “Check
          Me” button.
        </p>
      </statement>

      <blocks>
        <block order="1">
          <cline>public static void printEvens() {</cline>
        </block>

        <block order="4">
          <cline>   for (int i = 0; i &lt;= 10; i+=2) {</cline>
        </block>

        <block order="5">
          <cline>      System.out.println(i);</cline>
        </block>

        <block order="2">
          <cline>   } // end for</cline>
        </block>

        <block order="3">
          <cline>} // end method</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="decrementing-loops">
    <title>Counting backwards</title>

    <p>
      You can also write <c>for</c>loops that count backwards starting at a big
      number and decrementing the loop variable until it is some small number,
      usually 0 or 1. If you want to change a forwards loop into a backwards
      loop that runs with the same values of the loop variable, just counting
      down instead of up, all three parts of the loop header must change. For
      example, the forwards loop on the left which starts at <c>1</c> and goes
      up to <c>5</c> has to change to the backwards loop on the right to count
      down from <c>5</c> down to <c>1</c>.
    </p>

    <sidebyside>
      <listing>
        <title>Forwards loop</title>

        <program>
          <![CDATA[
          for (int i = 1; i <= 5; i++) {
          }
          ]]>
        </program>
      </listing>

      <listing>
        <title>Backwards loop</title>

        <program>
          <![CDATA[
          for (int i = 5; i > 0; i--) {
          }
          ]]>
        </program>
      </listing>
    </sidebyside>

    <activity label="for-bottles-backwards">
      <statement>
        <p>
          What do you think will happen when you run the code below? How would
          it change if you changed the initializer to start <c>i</c>’s value at
          <c>3</c>? Try the Code Lens button to visualize and trace through this
          code.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class SongTest {

              public static void main(String[] args) {
                  String line1 = " bottles of pop on the wall";
                  String line2 = " bottles of pop";
                  String line3 = "Take one down and pass it around";

                  // loop 5 times (5, 4, 3, 2, 1)
                  for (int i = 5; i > 0; i--) {
                      System.out.println(i + line1);
                      System.out.println(i + line2);
                      System.out.println(line3);
                      System.out.println((i - 1) + line1);
                      System.out.println();
                  }
              }
          }
          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("SongTest");
              }

              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "3 bottles of pop on the wall";

                  String expect1 = expect.split("\n")[0];
                  String output1 = output.split("\n")[0];

                  boolean passed = output.contains(expect);
                  passed = getResults(expect1, output1, "Print the song from 3", passed);
                  assertTrue(passed);
              }

              @Test
              public void testMain2() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "5 bottles of pop on the wall";

                  boolean passed = !output.contains(expect);

                  String expect1 = expect.split("\n")[0];
                  String output1 = output.split("\n")[0];

                  passed = getResults(expect1, output1, "Do not start loop from 5", passed);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <p>
      The program above prints the words to a song. It initializes the value of
      the variable <c>i</c> to <c>5</c> and then checks if <c>i</c> is greater
      than <c>0</c>. Since <c>5</c> is greater than <c>0</c>, the body of the
      loop executes. Before the condition is checked again, <c>i</c> is
      decreased by <c>1</c>. When the value of <c>i</c> is <c>0</c> it is no
      longer greater than <c>0</c> and the loop stops executing.
    </p>

    <activity label="forloop-backwards">
      <statement>
        <p>
          Can you make the loop count by 2s backwards? It should print out 5 3
          1? Remember to change all 3 parts of the for loop.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          <![CDATA[
          public class ForLoop {
              public static void main(String[] args) {
                  for (int count = 1; count <= 5; count++) {
                      System.out.println(count);
                  }
              }
          }
          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "5\n3\n1";
                  boolean passed = getResults(expect, output, "Expected output from main");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-turtles-drawing-shapes">
    <title>Coding Challenge: Turtles Drawing Shapes</title>

    <p>
      Let’s use a <c>for</c> loop to have a Turtle draw different shapes. We
      encourage you to work in pairs.
    </p>

    <p>
      The following code has four methods to draw shapes using a Turtle t passed
      in as an argument.
    </p>

    <p>
      <ol>
        <li>
          <p>
            Complete the <c>drawSquare</c> method to use a <c>for</c> loop to
            have the Turtle t draw a square.
          </p>
        </li>

        <li>
          <p>
            Complete the <c>drawTriangle</c> method to use a <c>for</c> loop to
            draw an equilateral triangle. How many times should the loop run? It
            ran 4 times for a square, so how many for a triangle? What angle
            should you use for the turns? One way to figure this out is to
            notice that to complete a shape, all the exterior angles should add
            up to 360 degrees. So, for a square 4x90 = 360. What angle times 3
            will give you 360?
          </p>
        </li>

        <li>
          <p>
            Complete the <c>drawPentagon</c> method to use a <c>for</c> loop to
            draw a pentagon (which has 5 sides and looks like a stop sign). What
            external angle should you use for the turns? Remember they have to
            add up to 360 degrees after 5 turns.
          </p>
        </li>

        <li>
          <p>
            Complete the <c>drawPolygon</c> method to use a <c>for</c> loop to
            draw any polygong with <c>n</c> sides of length <c>pixels</c> given
            as arguments. Use <c>n</c> in your loop for the number of sides (or
            the number of iterations). Use <c>pixels</c> for the amount to move
            forward. Calculate the angle to turn by using a formula that uses n
            and 360, so that n turns add up to 360 degrees.
          </p>
        </li>

        <li>
          <p>
            In the main method, call the <c>drawPolygon</c> method to draw a
            hexagon (6 sides). This method can draw a variety of shapes by just
            changing the value of the argument n. The power of abstraction! Try
            drawing other shapes with it. Note that if the turtle runs into
            walls, it stays there and will mess up the shape, so you may have to
            move the turtle or go forward smaller amounts.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-TurtleLoopShapes">
      <statement>
        <p>
          Complete the methods below with for-loops to draw a square, triangle,
          pentagon, and then any polygon using a variable n that holds the
          number of sides. Add 1 more call to the method drawShapes in main.
          Note that the angles in the turns have to add up to 360.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDrawShapes {

              public static void drawSquare(Turtle t) {
                  t.setColor(Color.blue);
                  // 1. Complete the following for loop to draw a square with 4 sides
                  for(int i = 0;       ;        ) {
                      t.forward(100);
                      t.turn(90);
                  }
              }

              public static void drawTriangle(Turtle t) {
                  t.setColor(Color.green);
                  // 2. Use a for loop to draw a triangle
                  // External angles of 3 sides add up to 360.
              }

              public static void drawPentagon(Turtle t) {
                  t.setColor(Color.red);
                  // 3. Use a for loop to draw a pentagon
                  // External angles of 5 sides add up to 360.
              }

              public static void drawShape(Turtle t, int n, int pixels) {
                  t.setColor(Color.black);
                  // 4. Use a for loop to draw a polygon with n sides.
                  // Use the argument pixels to move forward.
                  // Use 360 and n to determine the angle to turn.
              }

              public static void main(String[] args) {
                  World world = new World(400, 400);
                  Turtle yertle = new Turtle(world);
                  yertle.penUp();
                  //move a little to the left
                  yertle.moveTo(100, 200);
                  yertle.penDown();
                  yertle.setSpeed(25); // fast 0 - 100 slow

                  // Draw a square
                  drawSquare(yertle);
                  // Draw a triangle
                  drawTriangle(yertle);
                  // Draw a pentagon
                  drawPentagon(yertle);

                  // Draw shapes of any number of sides and pixels
                  drawShape(yertle, 4, 50);

                  // 5. Call drawShapes to draw a hexagon (6 sides) of length 20

                  // Leave this call here to draw everything.
                  world.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("TurtleDrawShapes");
              }

              @Test
              public void test1()
              {
                  String code = getCode();
                  String target = "for (int * = #; * ? *; *~)";

                  int num = countOccurencesRegex(code, target);

                  boolean passed = num == 4;

                  getResults("4", "" + num, "Each method should have a for loop", passed);
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  boolean passed = checkCodeContains("for-loop in drawSquare counting up to 4;","4;");
                  assertTrue(passed);
              }

              @Test
              public void test3()
              {
                  boolean passed = checkCodeContains("for-loop in drawTriangle counting up to 3;","3;");
                  assertTrue(passed);
              }

              @Test
              public void test4()
              {
                  boolean passed = checkCodeContains("for-loop in drawPentagon counting up to 5;","5;");
                  assertTrue(passed);
              }

              @Test
              public void test5()
              {
                  boolean passed = checkCodeContains("formula using 360 and n and a math operation to calculate angle in drawShape","360/n");
                  assertTrue(passed);
              }
              @Test
              public void test6()
              {
                  boolean passed = checkCodeContains("call drawShape to draw a hexagon (6 sides) of length 20", "drawShape(yertle, 6, 20);");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-25">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 2.8.A.1) A <c>for</c> loop is a type of iterative statement.
            There are three parts in a for loop header: the initialization (of
            the loop control variable or counter), the Boolean expression
            (testing the loop variable), and the update (to change the loop
            variable).
          </p>
        </li>

        <li>
          <p>
            (AP 2.8.A.2) In a <c>for</c> loop, the initialization statement is
            only executed once before the first Boolean expression evaluation.
            The variable being initialized is referred to as a <term>loop
            control variable</term>.
          </p>
        </li>

        <li>
          <p>
            (AP 2.8.A.2) The <c>for</c> loop Boolean expression is evaluated
            immediately after the loop control variable is initialized and then
            followed by each execution of the increment (or update) statement
            until it is false.
          </p>
        </li>

        <li>
          <p>
            (AP 2.8.A.2) In each iteration of the <c>for</c> loop, the update is
            executed after the entire loop body is executed and before the
            Boolean expression is evaluated again.
          </p>
        </li>

        <li>
          <p>
            (AP 2.8.A.3) A <c>for</c> loop can be rewritten into an equivalent
            <c>while</c> loop (and vice versa).
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-18">
    <title>AP Practice</title>

    <activity label="AP-for-loop-1">
      <statement>
        <p>Consider the following code segment.</p>

        <program>
          <![CDATA[
          int count = 0, sum = 0;
          while (count <= 6)
          {
              count++;
              if (count % 2 == 0)
              {
                  sum += count;
              }
          }
          System.out.println(sum);
          ]]>
        </program>

        <p>
          Which of the following code segments will produce the same output as
          the code segment above?
        </p>

        <program>
          <![CDATA[
          I.  int sum = 0;
              for (int count = 0; count <= 6; count++) {
                  count++;
                  if (count % 2 == 0) {
                       sum += count;
                  }
              }
              System.out.println(sum);

          II. int sum = 0;
              for (int i = 0; i <= 6; i += 2) {
                 sum += i;
              }
              System.out.println(sum);

          III. int sum = 0;
               for (int j = 7; j > 1; j--) {
                  if (j % 2 == 0) {
                       sum += j;
                  }
               }
               System.out.println(sum);
          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement id="AP-for-loop-1_opt_a">
            <p>I and II only</p>
          </statement>

          <feedback id="AP-for-loop-1_opt_a">
            <p>
              Note that I has an extra count++ at the beginning of the loop body
              that should be deleted.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-for-loop-1_opt_b">
            <p>II and III only</p>
          </statement>

          <feedback id="AP-for-loop-1_opt_b">
            <p>
              Correct! In the II, the loop counter increments by 2’s making sure
              it visits only even numbers and III generates the same sum but
              backwards.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-for-loop-1_opt_c">
            <p>I and III only</p>
          </statement>

          <feedback id="AP-for-loop-1_opt_c">
            <p>
              Note that I has an extra count++ at the beginning of the loop body
              that should be deleted.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-for-loop-1_opt_d">
            <p>III only</p>
          </statement>

          <feedback id="AP-for-loop-1_opt_d">
            <p>This is partially correct.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-for-loop-1_opt_e">
            <p>I, II, and III</p>
          </statement>

          <feedback id="AP-for-loop-1_opt_e">
            <p>
              Note that I has an extra count++ at the beginning of the loop body
              that should be deleted.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-for-loop-2">
      <statement>
        <p>Consider the following code segment.</p>

        <program>
          <![CDATA[
          int result = 1;
          for (int i = 3; i < 6; i += 2) {
            result *= i;
          }
          System.out.println(result);
          ]]>
        </program>

        <p>
          Which of the following best explains how changing the for loop header
          to <c>for (int i = 4; i &lt;= 6; i += 2)</c> affects the output of the
          code segment?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="AP-for-loop-2_opt_a">
            <p>The output of the code segment will be unchanged.</p>
          </statement>

          <feedback id="AP-for-loop-2_opt_a">
            <p>One will multiply odd numbers and the other even numbers.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-for-loop-2_opt_b">
            <p>
              The output will be the same, but the new loop will iterate more
              times.
            </p>
          </statement>

          <feedback id="AP-for-loop-2_opt_b">
            <p>One will multiply odd numbers and the other even numbers.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-for-loop-2_opt_c">
            <p>
              The output will be different, but both versions of the loop will
              iterate two times.
            </p>
          </statement>

          <feedback id="AP-for-loop-2_opt_c">
            <p>Correct! One will multiply 3*5 and the other 4*6.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-for-loop-2_opt_d">
            <p>
              The output will be different, and the new loop will iterate more
              times.
            </p>
          </statement>

          <feedback id="AP-for-loop-2_opt_d">
            <p>The output is different but they both would iterate 2 times.</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-for-loop-2_opt_e">
            <p>This will cause an error.</p>
          </statement>

          <feedback id="AP-for-loop-2_opt_e">
            <p>It will not cause an error.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
