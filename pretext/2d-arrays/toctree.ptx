<?xml version="1.0" encoding="utf-8"?>

<chapter xml:id="arrays-2d" xml:lang="en-US" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Two-dimensional arrays</title>

  <introduction>
    <p>
      The arrays we’ve been dealing with so far can also be called
      <term>one-dimensional arrays</term> because the elements are arranged
      along a one dimension like numbers on the number line or people in a line
      to buy movie tickets. In order to indicate which element of an array we
      want we need just one number, the index.
    </p>

    <p>
      But sometimes it’s useful to think of data arranged in more than one
      dimension. For instance many things are arranged in horizontal
      <term>rows</term> and vertical <term>columns</term> like spreadsheets,
      chess boards, bingo cards, and theater seats. And all the images on a
      computer screen are ultimately made up of tiny pixels arranged into a
      two-dimensional arrangement of rows and columns. In the picture below
      there are three rows of lockers and six columns.
    </p>

    <figure align="center">
      <caption>Lockers in rows and columns</caption>

      <image source="Unit4-Data-Collections/Figures/2DLockers.jpg" width="63%" />
    </figure>

    <p>
      In Java we can also make <term>two-dimensional arrays</term> or <term>2d
      arrays</term> which can be indexed with two indices which we can think of
      as rows and columns or x and y. Though as it turns out, Java’s 2d arrays
      are really just 1d arrays that happen to contain 1d arrays as their
      elements. So if we fully understand how 1d arrays work, there’s really
      nothing to learn about 2d arrays. But we’ll look at some uses of 2d arrays
      and how to apply the ideas from the previous unit in a 2d context.
    </p>

  </introduction>

  <xi:include href="./topic-4-11-2Darrays.ptx" />
  <xi:include href="./topic-4-12-2Darray-traversal.ptx" />
  <xi:include href="./topic-4-13-2Darray-algorithms.ptx" />
</chapter>
