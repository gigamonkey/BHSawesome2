<?xml version="1.0" encoding="utf-8"?>

<section xml:id="topic-3-4-constructors">
  <title>Constructors</title>

  <introduction>
    <idx><h>class</h><h>constructor</h></idx>
    <p>
      As we’ve seen, instance variables define the structure that all instances
      of a class share. And each object stores its own value for each instance
      variable in its object data. But how do those instances get created and
      how are their instance variables initialized?
    </p>

    <p>
      That’s the job of the constructor—to set the initial values for the
      object’s instance variables to useful values. But what does “useful” mean?
      Sometimes we describe the values of all an object’s instance variables at
      a given time as the object’s <term>state</term>. And we say an object is
      in a <term>valid state</term> when all its instance variables have values
      that let us use the object by invoking its public methods.
    </p>

    <p>
      So another way to describe the job of a constructor is to set the object’s
      instance values so it’s in a valid state and ready to be used. As we’ll
      see, classes can have zero or more constructors but they should all
      produce an object in a valid state.
    </p>

    <p>
      For instance, it doesn’t really make sense to call <c>greet</c> on a
      <c>Person</c> object unless it’s <c>name</c> instance variable has been
      set. And <c>canVote</c> only works if <c>age</c> has been initialized.
      Which is why the constructor in the <c>Person</c> class takes arguments
      that let it initialize both of those variables.
    </p>

    <p>
      As we’ll see, constructors are similar in many ways to methods: they can
      take arguments and contain code that is run when they are invoked. But
      unlike a method, a constructor is called exactly once for each object,
      when the object is created. This is in contrast to methods that can be
      called whenever we want, for as long as we have a reference to an object.
    </p>

    <p>
      In the source code for a class, constructors are usually written after the
      instance variables and before any methods. Which make sense because first
      we need to see the instance variables to understand the basic structure of
      a class. But before we can look at methods and see how to use the class we
      need to see how those variables are initialized. And to understand that,
      we need to look at the classes constructors.
    </p>
  </introduction>

  <subsection>
    <title>Not writing a constructor</title>

    <p>
      The simplest way to get a constructor is to not write one at all! If a
      class does not contain an explicit constructor, Java creates what is
      called the <term>default constructor</term> automatically. The default
      constructor takes no arguments and does nothing. But that doesn’t mean the
      object’s instance variables are not initialized.
    </p>

    <p>
      Instance variables can be declared with and without initializers. Here’s a
      class that has one of each as well as an instance method to show their
      values and a <c>main</c> to instantiate an object and call the method.
    </p>

    <program>
      public class Demo {
          private String a;
          private String b = "I have a value";

          public void showValues() {
              System.out.println("a: " + uninitialized);
              System.out.println("b: " + initialized);
          }

          public static void main(String[] args) {
              Demo d = new Demo();
              d.showValues();
          }
      }
    </program>

    <p>This will produce the output:</p>

    <pre>
      a: null
      b: I have a value
    </pre>

    <p>
      We can see that both instance variables have a value but one of them is
      <c>null</c>. Every instance variable in an object has a value from the
      moment the object is created. To ensure that, if an instance variable
      declaration doesn’t assign a value, the variable will start out with the
      approriate zero value for its type, <c>0</c>, <c>0.0</c>, <c>false</c>, or
      <c>null</c>. But otherwise the variable is assigned the value specifed in
      the declaration. These assignments happen even before the constructor runs
      so code in the constructor can rely on instance variables being
      initialized.
    </p>

    <p>
      One important note: if you <em>do</em> write a constructor, Java will not
      generate the default constructor for you. This is a good thing because it
      lets you make sure that instances of your class are always properly
      initialized. For example, because our <c>Person</c> class contains an
      explicit constructor, there’s no way to construct a <c>Person</c> object
      without providing the required name and age values so there will never be
      an instance of <c>Person</c> missing those values.
    </p>

    <note>
      <p>
        Technically someone could call our <c>Person</c> constructor like <c>new
        Person(null, 0)</c> but then they’d kind of get what they deserve. And
        some Java programmers, especiallly when working in large systems, would
        write the constructor to check that the arguments themselves are valid
        and to fail immediately if they are not.
      </p>
    </note>

    <p>
      In general it is good style to initialize variables in their declaration
      if possible. But that’s not always the case. Often we need information
      from the code that is constructing the object to know what the values in
      the object should be. In those cases we actually have to write a
      constructor.
    </p>
  </subsection>

  <subsection xml:id="constructor-signature">
    <idx>signature</idx>
    <idx>parameters</idx>
    <idx>arguments</idx>
    <idx>overloading</idx>
    <title>Constructor signatures</title>

    <p>
      In <xref ref="topic-1-9-method-signatures" /> we learned about method
      signatures, the combination of the return type, method name, and
      parameters that identify a method. Constructors also have a signature but
      it is structured slightly differently.
    </p>

    <p>
      The main difference is a constructor has no return type, not even
      <c>void</c>, and instead of a method name, the name of the constructor is
      always the same as the name of the class. This is because constructors
      don’t return a value; they initialize a brand new object. Here, for
      example, is the constructor from our <c>Person</c> class:
    </p>

    <program>
      public Person(String name, int age) {
        this.name = name;
        this.age = age;
      }
    </program>

    <p>
      As we can see, there is no return type between <c>public</c> and
      <c>Person</c>. And <c>Person</c> is the name of the class this constructor
      came from. After the name comes a list of parameters which work just like
      parameters in a method: they are local variables that will hold the values
      of the arguments passed to the constructor. And constructors don’t need a
      <c>return</c> statement because they don’t return a value.
    </p>

    <p>
      To invoke a constructor we use the keyword <c>new</c>, just like we did
      with arrays, but instead of specifying the type and dimensions of an
      array, we follow <c>new</c> with the class name and an argument list in
      parentheses that matches a constructor in that class. So to invoke the
      <c>Person</c> constructor above we would write an expression like:
    </p>

    <program>
      new Person("Joe", 18);
    </program>

    <p>
      When we invoke a constructor with <c>new</c> two things happen: first a
      new object is created and the memory needed to hold all its instance
      variables is allocated somewhere in the computer’s memory. Then, after the
      instance variable are initialized either to their default zero value or
      the value specified in the declaration, the constructor is run with
      <c>this</c> being the newly created object. The code in the constructor
      can then finish initializing the object however is appropriate. In the
      case of the above constructor invocation, the constructor will set the
      instance variable <c>name</c> to the value <c>"Joe"</c> and set <c>age</c>
      to <c>18</c>. The value of a constructor invocation is a reference to the
      new object just like the value of an array creation expression is a
      reference to the newly created array.
    </p>

    <p>
      Constructor signatures are an important part of the API when we use a
      class from a library someone else has written. In order to use most
      classes, such as the <c>Turtle</c> class we first used in <xref
      ref="topic-1-7-APIs-and-libraries" /> we need to look up how to construct
      an instance of the class. Usually we’ll look at the class’s <url
      href="https://cseweb.ucsd.edu/~ricko/CSE11/turtleClassesDocs/index.html?turtleClasses/SimpleTurtle.html">documentation</url>
      which will list the signatures of the constructors available. Knowing the
      parameter list of a constructor gives us the information we need to invoke
      the constructor. The documentation may also give us more information about
      how the constructor’s arguments will be used or restrictions. For
      instance, in a real <c>Person</c> class, we might document that the
      <c>age</c> argument has to be a positive number.
    </p>

    <note>
      <p>
        Like classes, constructors will usually be made <c>public</c>. As with
        making a class <c>public</c> it means the constructor can be invoked
        from any code anywhere.
      </p>

      <p>
        Constructors can also be <c>private</c> and sometimes that’s useful to
        control how instances of a class are created. And there is a level of
        accessibility inbetween <c>public</c> and <c>private</c> that requires a
        deeper understanding of Java packages than we want to get into. But both
        of those options are well outside the AP curriculum. For the purposes of
        the AP exam classes and their constructors are always <c>public</c>.
      </p>

      <p>
        Constructors cannot have the <c>static</c> modifier that we’ve used with
        methods until this unit. That’s only an option for methods and variables
        which will discuss more in <xref ref="topic-3-7-static-vars-methods" />.
      </p>
    </note>
  </subsection>

  <subsection>
    <title>Overloading constructors</title>

    <p>
      It’s also possible to define more than one constructor in a class. As long
      as they all have different signatures, meaning the number or the types of
      their parameters are different, we can have as many constructors as we
      want. Such constructors are said to be <term>overloaded</term>.
    </p>

    <p>
      One common reason to write overloaded constructors is when some of the
      instance variables in the class have reasonable default values. In such
      cases we can write one constructor that takes arguments for all the
      instance variables that need to be initialized and then write other
      constructors that omit certain parameters and instead initialize the
      unspecified variables to default values.
    </p>

    <p>
      For instance, in our <c>Person</c> class, suppose we wanted to be able to
      make objects to represent anonymous people but we wanted all anonymous
      people to be named the same thing: <c>"Anonymous"</c>. Rather than
      requiring all the code that wants to construct an anonymous <c>Person</c>
      to pass that specific <c>String</c> to the two-argument constructor we’ve
      already written, we can write a new constructor like this:
    </p>

    <program>
      public Person(int age) {
          this.name = "Anonymous";
          this.age = age;
      }
    </program>

    <p>
      With that constructor added to the class, writing <c>new Person(20)</c> is
      the same as writing <c>new Person("Anonymous", 20)</c>.
    </p>

    <p>
      However there’s an even better way to write that constructor using the
      <c>this</c> keyword, that we’ve previously used to access instance
      variables. In the context of a constructor, we can use <c>this</c>
      followed by an argument list in parentheses to invoke another
      constructor’s code to let it initialize the object. So we could write that
      one-argument constructor like this:
    </p>

    <program>
      public Person(int age) {
          this("Anonymous", age);
      }
    </program>

    <p>
      Then when we evaluate <c>new Person(20)</c> the argument <c>20</c> is
      passed to that constructor which then passes it along to the original
      constructor with the <c>"Anonymous"</c> as the name argument. In this case
      it doesn’t simplify things much since both constructors are so simple. But
      in more complicated classes that do more complicated initialization it
      lets us write the complicated stuff in just one place. The typical pattern
      for writing overloaded constructors is to write one main constructor that
      takes all the arguments that could possibly be passed, and then write
      other constructors that take fewer arguments and invoke the main
      constructor using <c>this()</c>, passing default values as needed.
    </p>

    <activity label="TurtleClass1">
      <statement>
        <p>
          The following digram shows the signatures of two of the constructors
          in the <c>Turtle</c> class.
        </p>

        <figure align="center">
          <caption>Turtle Class Constructor Signatures and Parameters</caption>

          <image source="Unit1-Using-Objects-and-Methods/Figures/TurtleClassDefn.png" width="100%">
            <shortdescription>
              Turtle Class Constructor Signatures and Parameters
            </shortdescription>
          </image>
        </figure>

        <p>
          Given the Turtle class in the figure above and a <c>World</c> object
          <c>world1</c>, which of the following code segments will correctly
          create an instance of a Turtle object at x, y coordinates 50, 150?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Turtle t = new Turtle();</p>
          </statement>

          <feedback>
            <p>
              There is no Turtle constructor that takes no arguments according
              to the figure above.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(50,150);</p>
          </statement>

          <feedback>
            <p>
              There is no Turtle constructor that takes 2 arguments according to
              the figure above.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(world1);</p>
          </statement>

          <feedback>
            <p>
              This would initialize the Turtle to the middle of the world, not
              necessarily coordinates (50,150).
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(world1,50,150);</p>
          </statement>

          <feedback>
            <p>
              Make sure the order of the arguments match the constructor
              signature above.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Turtle t = new Turtle(50,150,world1);</p>
          </statement>

          <feedback>
            <p>
              This matches the second constructor above with the parameters of
              x, y, and world.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      Another reason to overload constructors is to allow callers to construct
      objects with arguments of a type different than what the class really
      needs. As a trivial example, consider class that stores an ammount in an
      <c>int</c> variable. The obvious constructor would look like:
    </p>

    <program>
      public Amount(int value) {
          this.value = value;
      }
    </program>

    <p>
      But maybe sometimes it’d be convenient to construct an amount from a
      <c>String</c> containing a numeric value. In that case we could write
      another constructor:
    </p>

    <program>
      public Amount(String value) {
          this(Integer.parseInt(value));
      }
    </program>

    <activity label="date_constructor">
      <statement>
        <p>
          If you see a class definition on the AP exam, like the one below for a
          class called <c>Date</c>, you should be able to pick out the
          attributes (instance variables) and the constructors and know how to
          use them.
        </p>

        <figure align="center">
          <caption>A Date class showing attributes and constructors</caption>

          <image source="Unit1-Using-Objects-and-Methods/Figures/DateClass.png" width="89%">
            <shortdescription>
              A Date class showing attributes and constructors
            </shortdescription>
          </image>
        </figure>

        <p>
          Show that you recognize the constructors by clicking on the
          constructor signatures.
        </p>
      </statement>

      <feedback>
        <p>
          Constructors are public and have the same name as the class. Click on
          the constructor headers which are the first line of the constructors
          showing their name and parameters.
        </p>
      </feedback>

      <areas>
        <cline><area correct="no">public class Date {</area></cline>
        <cline />
        <cline>    <area correct="no">private int year;</area></cline>
        <cline>    <area correct="no">private int month;</area></cline>
        <cline>    <area correct="no">private int day;</area></cline>
        <cline />
        <cline>    <area correct="yes">public Date() </area></cline>
        <cline>        <area correct="no">{ /** Implementation not shown */ }</area></cline>
        <cline />
        <cline>    <area correct="yes">public Date(int year, int month, int day) </area></cline>
        <cline>        <area correct="no">{ /** Implementation not shown */ }</area></cline>
        <cline />
        <cline>     <area correct="no">public void print() </area></cline>
        <cline>        <area correct="no">{ /** Implementation not shown */ }</area></cline>
        <cline />
        <cline><area correct="no">}</area></cline>
      </areas>
    </activity>

    <activity label="DateClass1">
      <statement>
        <p>
          Given the <c>Date</c> class in the previous problem and assuming that
          months in the <c>Date</c> class are numbered starting at 1, which of
          the following code segments will create a <c>Date</c> object for the
          date September 20, 2020 using the correct constructor?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Date d = new Date();</p>
          </statement>

          <feedback>
            <p>
              This would initialize the date attributes to today's date
              according to the constructor comment above, which might not be
              Sept. 20, 2020.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Date d = new Date(9,20);</p>
          </statement>

          <feedback>
            <p>
              There is no Date constructor that takes 2 arguments according to
              the figure above.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Date d = new Date(9,20,2020);</p>
          </statement>

          <feedback>
            <p>
              The comment for the second constructor in the Date class above
              says that the first argument must be the year.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Date d = new Date(2020,9,20);</p>
          </statement>

          <feedback>
            <p>
              This matches the second constructor above with the parameters
              year, month, day.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Date d = new Date(2020,20,9);</p>
          </statement>

          <feedback>
            <p>
              Make sure the order of the arguments match the constructor
              signature above.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="name_constructor">
      <statement>
        <p>
          Click on all the lines of code that are part of constructors in the
          following class.
        </p>
      </statement>

      <feedback>
        <p>Constructors are public and have the same name as the class.</p>
      </feedback>

      <areas>
        <cline><area correct="no">public class Name</area></cline>
        <cline><area correct="no">{</area></cline>
        <cline>    <area correct="no">private String first;</area></cline>
        <cline>    <area correct="no">private String last;</area></cline>
        <cline />
        <cline>    <area correct="yes">public Name(String theFirst, String theLast)</area></cline>
        <cline>    <area correct="yes">{</area></cline>
        <cline>        <area correct="yes">first = theFirst;</area></cline>
        <cline>        <area correct="yes">last = theLast;</area></cline>
        <cline>    <area correct="yes">}</area></cline>
        <cline />
        <cline>    <area correct="no">public void setFirst(String theFirst)</area></cline>
        <cline>    <area correct="no">{</area></cline>
        <cline>        <area correct="no">first = theFirst;</area></cline>
        <cline>    <area correct="no">}</area></cline>
        <cline />
        <cline>    <area correct="no">public void setLast(String theLast)</area></cline>
        <cline>    <area correct="no">{</area></cline>
        <cline>        <area correct="no">last = theLast;</area></cline>
        <cline>    <area correct="no">}</area></cline>
        <cline />
        <cline><area correct="no">}</area></cline>
      </areas>
    </activity>

    <activity label="constructor-purpose">
      <statement>
        <p>What best describes the purpose of a class’s constructor?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>
              Determines the amount of space needed for an object and creates
              the object
            </p>
          </statement>

          <feedback>
            <p>
              The object is already created before the constructor is called but
              the constructor initializes the instance variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Names the new object</p>
          </statement>

          <feedback>
            <p>Constructors do not name the object.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              Return to free storage all the memory used by this instance of the
              class.
            </p>
          </statement>

          <feedback>
            <p>
              Constructors do not free any memory. In Java the freeing of memory
              is done when the object is no longer referenced.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Initialize the instance variables in the object</p>
          </statement>

          <feedback>
            <p>
              A constructor initializes the instance variables to their default
              values or in the case of a parameterized constructor, to the
              values passed in to the constructor.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="class-Fraction">
      <statement>
        <p>
          The following class defines a <c>Fraction</c> with the instance
          variables <c>numerator</c> and <c>denominator</c>. Complete the body
          of its 2 constructors. The no-argument constructor should set the
          default instance variable values to 1 rather than 0 since a fraction
          with 0 in the denominator is not valid. The constructor with
          parameters should copy those parameters into the instance variables.
          What will the code print out? Try tracing through it. View it in the
          Java visualizer by clicking on the Show CodeLens button below.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          public class Fraction {
              //  instance variables
              private int numerator;
              private int denominator;

              // no-arg constructor: set instance variables to default values of 1
              public Fraction() {
                  // 1. set numerator to 1

                  // 2. set denominator to 1
              }

              // constructor w/args: set instance variables to init parameters
              public Fraction(int initNumerator, int initDenominator) {
                  // 3. set numerator to initNumerator

                  // 4. set denominator to initDenominator

              }

              // Print fraction
              public void print() {
                  System.out.println(numerator + "/" + denominator);
              }

              // main method for testing
              public static void main(String[] args) {
                  Fraction f1 = new Fraction();
                  Fraction f2 = new Fraction(1, 2);
                  // What will these print out?
                  f1.print();
                  f2.print();
              }
          }
        </code>

        <tests>
          // Test Code for Lesson 5.2.0.1 - Fraction
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void test() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "1/1\n1/2";

                  boolean passed = getResults(expect, output, "Running main");
                  assertTrue(passed);
              }

              @Test
              public void testCodeContains1() {
                  boolean check1 = checkCodeContains("numerator = 1 in Fraction()", "numerator = 1");
                  assertTrue(check1);
              }

              @Test
              public void testCodeContains2() {
                  boolean check1 = checkCodeContains("denominator = 1 in Fraction()", "denominator = 1");
                  assertTrue(check1);
              }

              @Test
              public void testCodeContains3() {
                  boolean check1 =
                          checkCodeContains(
                                  "numerator = initNumerator in 2nd constructor",
                                  "numerator = initNumerator");
                  assertTrue(check1);
              }

              @Test
              public void testCodeContains4() {
                  boolean check1 =
                          checkCodeContains(
                                  "denominator = initDenominator in 2nd constructor",
                                  "denominator = initDenominator");
                  assertTrue(check1);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="class-Car">
      <statement>
        <p>
          The following class defines a Car with the instance variables model
          and year, for example a Honda 2010 car. However, some of the code is
          missing. First, fill in the code to create a <c>Car</c> constructor.
          Then, fill in the code to call the constructor in the main method to
          create 2 <c>Car</c> objects. The first car should be a 2023 Ford and
          the second car should be a 2010 Honda. Run your program and make sure
          it works and prints out the information for both cars.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          public class Car
          {
             //  instance variables
             private String model;
             private int year;

             // constructor: set instance variables to init parameters
             public Car(String initModel, int initYear)
             {
                 // 1. set the instance variables to the init parameter variables


             }

             // Print Car info
             public void print()
             {
               System.out.println("Car model: " + model);
               System.out.println("Car year: " + year);
             }

             // main method for testing
             public static void main(String[] args)
             {
                 // 2. Call the constructor to create 2 new Car objects with different
                 // values The first car should be a 2023 Ford and the second car
                 // should be a 2010 Honda.

                 Car car1 =
                 Car car2 =

                 car1.print();
                 car2.print();
             }
          }
        </code>

        <tests>
          // Test Code for Lesson 5.2.0 - Car
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main");
                  String expect = "Car model: Ford\nCar year: 2023\nCar model: Honda\nCar year: 2010";

                  boolean passed = getResults(expect, output, "Running main");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-student-class">
    <title>Coding Challenge: Student Class</title>

    <p>
      We encourage you to work in pairs for this challenge to create a Student
      class with constructors.
    </p>

    <p>
      <ol>
        <li>
          <p>
            First, brainstorm in pairs to do the <term>Object-Oriented
            Design</term> for a Student class. What data should we store about
            Students? Come up with at least 4 different instance variables. What
            are the data types for the instance variables?
          </p>
        </li>

        <li>
          <p>
            Write a Student class below that has your 4 instance variables and
            write a constructor that has 4 parameters to set all of the instance
            variables.
          </p>
        </li>

        <li>
          <p>
            Add a print() method that uses System.out.println to print out all
            the instance variables.
          </p>
        </li>

        <li>
          <p>
            Add a main method that constructs at least 2 Student objects using
            the constructor with different values and then calls their print()
            methods.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-Student-class">
      <statement>
        <p>
          Create a class Student with 4 instance variables, a constructor, and a
          print method. Write a main method that creates 2 Student objects with
          the constructor and calls their print() method.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          /**
           * class Student with 4 instance variables, a constructor, a print method, and a main method to test
           * them.
           */
          public class Student {
              // Write 4 instance variables

              // Write a constructor with 4 parameters to initialize all of the instance
              // variables

              // Write a print method that prints all the instance variables
              public void print() {}

              // main method
              public static void main(String[] args) {
                  // Construct 2 Student objects using the constructor with different values

                  // call their print() methods

              }
          }
        </code>

        <tests>
          // Test Code for Lesson 5.2.1 - Challenge - Student
          import static org.junit.Assert.*;

          import org.junit.Test;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("Student");

                  Object[] values = new Object[] {"Name", 0};
                  setDefaultValues(values);
              }

              @Test
              public void testCallConstructors() {
                  String code = getCodeWithoutComments();
                  String search = "= new Student(";

                  int num = countOccurences(code, search);

                  String expect = search + "...) x 2";
                  String actual = search + "...) x " + num;

                  boolean passed = getResults(expect, actual, "Checking that you made 2 Student objects");
                  assertTrue(passed);
              }

              @Test
              public void testConstructors() {
                  String code = getCodeWithoutComments();
                  String search = "public Student(";

                  int num = countOccurences(code, search);

                  String expect = search + "...) x 1";
                  String actual = search + "...) x " + num;

                  boolean passed = getResults(expect, actual, "Checking that you made a constructor");
                  assertTrue(passed);
              }

              @Test
              public void testPrint() {
                  String code = getCodeWithoutComments();
                  String search = ".print()";

                  int num = countOccurences(code, search);

                  String expect = search + " x 2";
                  String actual = search + " x " + num;

                  boolean passed = getResults(expect, actual, "Checking that you called print 2 times");
                  assertTrue(passed);
              }

              @Test
              public void testPrivateVariables() {
                  String expect = "4 Private";
                  String output = testPrivateInstanceVariables();

                  boolean passed = getResults(expect, output, "Checking for 4 Private Instance Variable(s)");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </project>
  </subsection>

  <subsection xml:id="design-a-class-for-your-community-1">
    <title>Design a Class for your Community</title>

    <p>
      In the last lesson, you came up with a class of your own choice relevant
      to you or your community. In this lesson, you will add a constructor to
      this class.
    </p>

    <p>
      <ol>
        <li>
          <p>
            Consult your completed worksheet or your code in <url
            href="topic-3-3-anatomy-of-class.html#groupwork-design-a-class-for-your-community">lesson
            3.3 Community Challenge</url> for the class name and its 3 instance
            variables that you created. Copy them into the active code exercise
            below.
          </p>
        </li>

        <li>
          <p>
            Add a constructor with 3 parameters to set all of the instance
            variables to the given parameters.
          </p>
        </li>

        <li>
          <p>
            Write a print() method that uses <c>System.out.println</c> to print
            out all the instance variables.
          </p>
        </li>

        <li>
          <p>
            Write a main method that constructs at least 2 objects of your class
            using the constructor and then calls their <c>print()</c> methods.
          </p>
        </li>
      </ol>
    </p>

    <project label="community-challenge2">
      <statement>
        <p>
          Copy your class with its 3 instance variables from <url
          href="topic-3-3-anatomy-of-class.html#groupwork-design-a-class-for-your-community">lesson
          3.3 Community Challenge</url>. Add a constructor with 3 parameters to
          set all of the instance variables to the given parameters. Write a
          print() method that uses System.out.println to print out all the
          instance variables. Write a main method that constructs at least 2
          objects of your class using the constructors and then calls their
          print() methods.
        </p>
      </statement>

      <program interactive="activecode">

        <code>
          public class          // Add your class name here!
          {
              // 1. copy in your instance variables for class from the last lesson

              // 2. Add a constructor with 3 parameters to set all of the instance variables to the given parameters.


              // 3. Write a print() method that uses System.out.println to print out all the instance variables.

              // 4. Write a main method that constructs at least 2 objects of your class
              // using the constructor and then calls their print() methods.
              public static void main(String[] args)
              {
                 // Construct 2 objects of your class to test the constructors


                 // call the objects print() methods

              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              @Test
              public void testPrivateVariables() {
                  String expect = "3 Private";
                  String output = testPrivateInstanceVariables();
                  boolean passed = false;
                  if (Integer.parseInt(expect.substring(0, 1)) <= Integer.parseInt(output.substring(0, 1)))
                      passed = true;
                  passed = getResults(expect, output, "Checking private instance variable(s)", passed);
                  assertTrue(passed);
              }

              /* No longer required
              @Test
              public void testDefaultConstructor()
              {
                  String output = checkDefaultConstructor();
                  String expect = "pass";

                  boolean passed = getResults(expect, output, "Checking default constructor");
                  assertTrue(passed);
              }
              */

              @Test
              public void testConstructor3() {
                  String output = checkConstructor(3);
                  String expect = "pass";

                  boolean passed = getResults(expect, output, "Checking constructor with 3 parameters");
                  assertTrue(passed);
              }

              @Test
              public void testPrint() {
                  String output = getMethodOutput("print");
                  String expect = "More than 15 characters";
                  String actual = " than 15 characters";

                  if (output.length() < 15) {
                      actual = "Less" + actual;
                  } else {
                      actual = "More" + actual;
                  }
                  boolean passed = getResults(expect, actual, "Checking print method");
                  assertTrue(passed);
              }

              @Test
              public void testMain() throws IOException {
                  String output = getMethodOutput("main"); // .split("\n");
                  String expect = "3+ line(s) of text";
                  String actual = " line(s) of text";
                  int len = output.split("\n").length;

                  if (output.length() > 0) {
                      actual = len + actual;
                  } else {
                      actual = output.length() + actual;
                  }
                  boolean passed = len >= 3;

                  getResults(expect, actual, "Checking output", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-4">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 1.13.A.1) A class contains <term>constructors</term> that are
            called with the keyword <c>new</c> to create objects and initialize
            its attributes.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.1) <term>Constructors</term> have the same name as the
            class.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.1) An object is typically created using the keyword new
            followed by a call to one of the class’s constructors. <c>new
            ClassName()</c> creates a new object of the specified class and
            calls a constructor.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.B.1) The new object is saved in a variable of a
            <term>reference type</term> which holds an object reference or null
            if there is no object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.2) A <term>constructor signature</term> consists of the
            constructor’s name, which is the same as the class name, and the
            ordered list of parameter types.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.2) The <term>parameter list</term>, in the header of a
            constructor, lists the types of the values that are passed and their
            variable names.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.A.3) Constructors are said to be <term>overloaded</term>
            when there are multiple constructors with different signatures. They
            must differ in the number, type, or order of parameters.
          </p>
        </li>

        <li>
          <p>
            A <term>no-argument constructor</term> is a constructor that doesn’t
            take any passed in values (arguments).
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.2) <term>Parameters</term> allow constructors to accept
            values to establish the initial values of the attributes of the
            object.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.3) A constructor <term>argument</term> is a value that is
            passed into a constructor when the constructor is called. The
            arguments passed to a constructor must be compatible in order and
            number with the types identified in the parameter list in the
            constructor signature.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.3) When calling constructors, arguments are passed using
            call by value. <term>Call by value</term> initializes the parameters
            with copies of the arguments.
          </p>
        </li>

        <li>
          <p>
            (AP 1.13.C.4) A constructor call interrupts the sequential execution
            of statements, causing the program to first execute the statements
            in the constructor before continuing. Once the last statement in the
            constructor has been executed, the flow of control is returned to
            the point immediately following where the constructor was called.
          </p>
        </li>
      </ul>
    </p>

    <p>
      <ul>
        <li>
          <p>
            (AP 3.4.A.1) An object’s <term>state</term> refers to its attributes
            and their values at a given time and is defined by instance
            variables belonging to the object. This defines a <term>has-a</term>
            relationship between the object and its instance variables.
          </p>
        </li>

        <li>
          <p>
            (AP 3.4.A.2) A constructor is used to set the initial state of an
            object, which should include initial values for all instance
            variables. When a constructor is called, memory is allocated for the
            object and the associated object reference is returned. Constructor
            parameters, if specified, provide data to initialize instance
            variables.
          </p>
        </li>

        <li>
          <p>
            A constructor must have the same name as the class! Constructors
            have no return type!
          </p>
        </li>

        <li>
          <p>
            (AP 3.4.A.4) When no constructor is written, Java provides a
            no-parameter constructor, and the instance variables are set to
            default values according to the data type of the attribute. This
            constructor is called the <term>default constructor</term>. (Note
            that AP 3.4.A.3 is covered in lesson 3.6).
          </p>
        </li>

        <li>
          <p>(3.4.A.5) Default values used by the default constructor:</p>

          <p>
            <ul>
              <li>
                <p>
                  The default value for an attribute of type <c>int</c> is
                  <c>0</c>.
                </p>
              </li>

              <li>
                <p>
                  The default value of an attribute of type <c>double</c> is
                  <c>0.0</c>.
                </p>
              </li>

              <li>
                <p>
                  The default value of an attribute of type <c>boolean</c> is
                  <c>false</c>.
                </p>
              </li>

              <li>
                <p>The default value of a reference type is <c>null</c>.</p>
              </li>
            </ul>
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-3">
    <title>AP Practice</title>

    <activity label="AP-constructors">
      <statement>
        <p>
          Consider the following class. Which of the following successfully
          creates a new Cat object?
        </p>

        <program>
          public class Cat
          {
              private String color;
              private String breed;
              private boolean isHungry;

              public Cat()
              {
                  color = "unknown";
                  breed = "unknown";
                  isHungry = false;
              }

              public Cat(String c, String b, boolean h)
              {
                  color = c;
                  breed = b;
                  isHungry = h;
              }
          }

          I.   Cat a = new Cat();
          II.  Cat b = new Cat("Shorthair", true);
          III. String color = "orange";
               boolean hungry = false;
               Cat c = new Cat(color, "Tabby", hungry);
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>I only</p>
          </statement>

          <feedback>
            <p>
              I is one of the correct constructors but the second constructor
              can also be used.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>I and II</p>
          </statement>

          <feedback>
            <p>
              II is not correct because there is no Cat constructor with 2
              parameters.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>I and III</p>
          </statement>

          <feedback>
            <p>I and III call the correct constructors.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>I, II, and III</p>
          </statement>

          <feedback>
            <p>
              II is not correct because there is no Cat constructor with 2
              parameters.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>II and III</p>
          </statement>

          <feedback>
            <p>
              II is not correct because there is no Cat constructor with 2
              parameters.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-constructors2">
      <statement>
        <p>
          Consider the following class. Which of the following code segments
          will construct a Movie object m with a title of “Lion King” and rating
          of 8.0?
        </p>

        <program>
          public class Movie {
              private String title;
              private String director;
              private double rating;
              private boolean inTheaters;

              public Movie(String t, String d, double r) {
                  title = t;
                  director = d;
                  rating = r;
                  inTheaters = false;
              }

              public Movie(String t) {
                  title = t;
                  director = "unknown";
                  rating = 0.0;
                  inTheaters = false;
              }
          }
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Movie m = new Movie(8.0, "Lion King");</p>
          </statement>

          <feedback>
            <p>There is no Movie constructor with 2 parameters.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Movie m = Movie("Lion King", 8.0);</p>
          </statement>

          <feedback>
            <p>There is no Movie constructor with 2 parameters.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Movie m = new Movie();</p>
          </statement>

          <feedback>
            <p>
              This creates a Movie object but it does not have the correct title
              and rating.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Movie m = new Movie("Lion King", "Disney", 8.0);</p>
          </statement>

          <feedback>
            <p>
              This creates a Movie object with the correct title and rating.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Movie m = new Movie("Lion King");</p>
          </statement>

          <feedback>
            <p>
              This creates a Movie object but it does not have a rating of 8.0.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-constructor1">
      <statement>
        <p>
          Consider the definition of the Cat class below. The class uses the
          instance variable isSenior to indicate whether a cat is old enough to
          be considered a senior cat or not.
        </p>

        <program>
          <![CDATA[
          public class Cat {
              private String name;
              private int age;
              private boolean isSenior;

              public Cat(String n, int a) {
                  name = n;
                  age = a;
                  if (age >= 10) {
                      isSenior = true;
                  } else {
                      isSenior = false;
                  }
              }
          }
          ]]>
        </program>

        <p>
          Which of the following statements will create a Cat object that
          represents a cat that is considered a senior cat?
        </p>
      </statement>

      <choices>
        <choice>
          <statement id="AP-constructor1_opt_a">
            <p>Cat c = new Cat (“Oliver”, 7);</p>
          </statement>

          <feedback id="AP-constructor1_opt_a">
            <p>
              The age 7 is less than 10, so this cat would not be considered a
              senior cat.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor1_opt_b">
            <p>Cat c = new Cat (“Max”, “15”);</p>
          </statement>

          <feedback id="AP-constructor1_opt_b">
            <p>
              An integer should be passed in as the second parameter, not a
              string.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor1_opt_c">
            <p>Cat c = new Cat (“Spots”, true);</p>
          </statement>

          <feedback id="AP-constructor1_opt_c">
            <p>
              An integer should be passed in as the second parameter, not a
              boolean.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-constructor1_opt_d">
            <p>Cat c = new Cat (“Whiskers”, 10);</p>
          </statement>

          <feedback id="AP-constructor1_opt_d">
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor1_opt_e">
            <p>Cat c = new Cat (“Bella”, isSenior);</p>
          </statement>

          <feedback id="AP-constructor1_opt_e">
            <p>
              An integer should be passed in as the second parameter and
              isSenior would be undefined outside of the class.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-constructor2">
      <statement>
        <p>
          Consider the following class definition. Each object of the class Cat
          will store the cat’s name as name, the cat’s age as age, and the
          number of kittens the cat has as kittens. Which of the following code
          segments, found in a class other than Cat, can be used to create a cat
          that is 5 years old with no kittens?
        </p>

        <program>
          public class Cat
          {
              private String name;
              private int age;
              private int kittens;

              public Cat(String n, int a, int k)
              {
                  name = n;
                  age = a;
                  kittens = k;
              }
              public Cat(String n, int a)
              {
                  name = n;
                  age = a;
                  kittens = 0;
              }
              /* Other methods not shown */
          }

          I.   Cat c = new Cat("Sprinkles", 5, 0);
          II.  Cat c = new Cat("Lucy", 0, 5);
          III. Cat c = new Cat("Luna", 5);
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>I only</p>
          </statement>

          <feedback>
            <p>Option III can also create a correct Cat instance.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>II only</p>
          </statement>

          <feedback>
            <p>
              Option II will create a cat that is 0 years old with 5 kittens.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>III only</p>
          </statement>

          <feedback>
            <p>Option I can also create a correct Cat instance.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>I and III only</p>
          </statement>

          <feedback>
            <p>Good job!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>I, II and III</p>
          </statement>

          <feedback>
            <p>
              Option II will create a cat that is 0 years old with 5 kittens.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-constructor3">
      <statement>
        <p>Consider the following class definition.</p>

        <program>
          public class Cat {
              private String color;
              private boolean isHungry;
              /* missing constructor */
          }
        </program>

        <p>
          The following statement appears in a method in a class other than Cat.
          It is intended to create a new Cat object c with its attributes set to
          “black” and true. Which of the following can be used to replace
          <term>missing constructor code</term> in the class definition so that
          the object c below is correctly created?
        </p>

        <program>
          Cat c = new Cat("black", true);
        </program>
      </statement>

      <choices>
        <choice>
          <statement id="AP-constructor3_opt_a">
            <program>
              public Cat(String c, boolean h)
              {
                  c = "black";
                  h = true;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_a">
            <p>
              The constructor should be changing the instance variables, not the
              local variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor3_opt_b">
            <program>
              public Cat(String c, boolean h)
              {
                  c = "black";
                  h = "true";
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_b">
            <p>
              The constructor should be changing the instance variables, not the
              local variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor3_opt_c">
            <program>
              public Cat(String c, boolean h)
              {
                  c = color;
                  h = isHungry;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_c">
            <p>
              The constructor should be changing the instance variables, not the
              local variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement id="AP-constructor3_opt_d">
            <program>
              public Cat(String c, boolean h)
              {
                  color = black;
                  isHungry = true;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_d">
            <p>
              The constructor should be using the local variables to set the
              instance variables.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement id="AP-constructor3_opt_e">
            <program>
              public Cat(String c, boolean h)
              {
                  color = c;
                  isHungry = h;
              }
            </program>
          </statement>

          <feedback id="AP-constructor3_opt_e">
            <p>Correct!</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>
</section>
