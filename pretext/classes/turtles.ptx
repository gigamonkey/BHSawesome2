<?xml version="1.0" encoding="utf-8"?>

<section xml:id="turtles">
  <title>More turtles</title>

  <introduction>
    <p>
      We first used the Turtle library that is built into this book in <xref
      ref="topic-1-7-APIs-and-libraries" />. Now that we’ve learned more about
      classes we can use the classes in the Turtle library, <c>Turtle</c> and
      <c>World</c> to look at some concrete examples of some of the topics we’ve
      discussed in this unit.
    </p>

    <p>
      Then we will practice using classes from the Turtle library in a set of
      coding exercises and challenges.
    </p>

  </introduction>

  <subsection xml:id="turtle-class">
    <title>Turtle basics</title>

    <p>
      Like any class the <c>Turtle</c> class is a blueprint for making objects
      that each represent one turtle we can use to draw lines on a graphical
      world. It defines attributes for graphical turtles like their color and
      position and methods to make the turtles move. As a refresher, here’s a
      simple program that makes one <c>Turtle</c> and calls a few methods on it
      to draw a couple lines.
    </p>

    <activity label="TurtleTest">
      <statement>
        <p>
          Try clicking the run button below to see what the following program
          does.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();
                  yertle.forward();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest");
              }

              @Test
              public void test1() {
                  boolean passed = getResults("true", "true", "main()");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <p>
      The following <url
      href="https://www.youtube.com/watch?v=TFmmG4_KK8I&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;ab_channel=colleenlewis">video</url>
      walk through how the program creates a <c>World</c> object and a
      <c>Turtle</c> object assigning them to the variables <c>habitat</c> and
      <c>yertle</c>
    </p>

    <figure align="center">
      <caption>Turtle Memory Model</caption>

      <video youtube="TFmmG4_KK8I" label="video-turtle" />
    </figure>

    <p>
      This code also demonstrates the use of the <term>dot operator</term> to
      invoke an object’s method. The dot allows us to get a particular method
      from an object, such as <c>forward</c> or <c>turnLeft</c>, and then we can
      call that method to cause the object to do whatever the code in the method
      specifies.
    </p>

    <p>
      For example, <c>yertle.forward()</c> asks the turtle referenced by the
      variable <c>yertle</c> to go <c>forward</c>. The <c>forward</c> method
      doesn’t take any arguments so it moves the turtle forward a default amount
      of one hundred pixels.
    </p>

    <p>
      The <c>Turtle</c> class gives us an example of overloaded methods, which
      we learned about in <xref ref="overloaded-methods"/>. It defines two
      <c>forward</c> methods; the no-args version used above and another that
      takes an <c>int</c> arguments specifying the number of pixels to move. For
      example to have the turtle move forward fifty pixels instead of one
      hundred, we can use <c>yertle.forward(50);</c>. Try making that change in
      the code above and then run it again to see the change.
    </p>

    <activity label="TurtleTest2">
      <statement>
        <p>
          In the code below, <c>yertle</c> goes forward and then turns left. Can
          you change the code to make <c>yertle</c> go <c>forward</c> twice and
          then <c>turnRight</c>?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest2 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest2");
              }

              @Test
              public void test1() {
                  String code = getCode();
                  String expect = "yertle.forward";

                  int count = countOccurences(code, expect);

                  boolean passed = getResults("2 time(s)", "" + count + " time(s)", "yertle.forward() twice");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String expect = "yertle.turnRight()";

                  int count = countOccurences(code, expect);

                  boolean passed = count >= 1;
                  passed = getResults("1+ time(s)", "" + count + " time(s)", "yertle.turnRight()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="creating-turtle-objects">
    <title>Creating multiple objects</title>

    <p>
      Remember that a class is a blueprint from which we can make as many
      instances as we want. The code below creates two turtle objects and stores
      references to them in the variables <c>yertle</c> and <c>myrtle</c>. They
      are both added to the same <c>World</c> so when we run the code we see two
      turtles drawing.
    </p>

    <activity label="TurtleTest3">
      <statement>
        <p>After running the code once to see what <c>yertle</c> and
        <c>myrtle</c> draw, can you add another turtle object to the code below?
        You will need to declare a new variable, construct a new <c>Turtle</c>
        and then call some methods on the new turtle to make it draw
        something.</p>

      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest3 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);
                  Turtle myrtle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();
                  yertle.forward();

                  myrtle.turnRight();
                  myrtle.forward();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest3");
              }

              @Test
              public void test1() {
                  String code = getCode();
                  String expect = "new Turtle(habitat)";

                  int count = countOccurences(code, expect);

                  boolean passed = count >= 3;
                  passed = getResults("3+ Turtles", "" + count + " Turtles", "Add a new Turtle(s)", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="the-world-class-constructors">
    <title>Overloaded constructors</title>

    <p>
      As we saw in <xref ref="overloading-constructors" />, a class can define
      more than one constructor class, creating <term>overloaded</term>
      constructors. Both the <c>World</c> and <c>Turtle</c> classes have
      overloaded constructors in order to allow us to create instances with
      reasonable default values for some of their attributes and also to specify
      things ourselves.
    </p>

    <p>
      The <c>World</c> class has two constructors, one that takes no arguments
      and one that takes two <c>int</c> arguments that specify the size of the
      world and thus the size the image that will be created. The no-argument
      constructor creates a world with a default size of 640x480 pixels.
    </p>

    <figure align="center">
      <caption>Two World constructors</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/worldConstructors.png" width="63%">
        <shortdescription>Two World constructors</shortdescription>
      </image>
    </figure>

    <p>
      Here are two lines of code that each use one of the constructors:
    </p>

    <program>
      World world1 = new World(); // creates a default size 640x480 world
      World world2 = new World(300,400); // creates a 300x400 world
    </program>

    <activity label="mcq_world_constructor">
      <statement>
        <p>
          Which of these is valid syntax for creating and initializing a World
          object?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>World w = null;</p>
          </statement>

          <feedback>
            <p>
              This declares a variable w that refers to a World object, but it
              doesn't create a World object or initialize it.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = new World;</p>
          </statement>

          <feedback>
            <p>You must include parentheses () to call a constructor.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World();</p>
          </statement>

          <feedback>
            <p>
              Correct, use the new keyword followed by the class name and
              parentheses to create a new object and call the constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = World();</p>
          </statement>

          <feedback>
            <p>You must use the new keyword to create a new object.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World(300,500);</p>
          </statement>

          <feedback>
            <p>
              Correct, this constructor call creates a new World object with the
              size 300x500 pixels.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq_overload_constructor">
      <statement>
        <p>Which of these is overloading the constructor?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>When a constructor takes one argument.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>When a constructor takes more than one argument.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>When one constructor is defined in a class.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>When more than one constructor is defined in a class.</p>
          </statement>

          <feedback>
            <p>
              Overloading means that there is more than one constructor. The
              parameter lists must differ in either number, order, or type of
              parameters.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      The <c>Turtle</c> class also also has multiple constructors. They all take
      at least a <c>World</c> argument in order to have a place to draw the
      turtle but one of them takes two <c>int</c> arguments to specify the
      initial <c>x</c> and <c>y</c> position of the <c>Turtle</c> in the
      <c>World</c>. The constructor that does not take these <c>int</c>
      arguments puts the <c>Turtle</c> in the middle of the <c>World</c>.
    </p>

    <program>
      Turtle t1 = new Turtle(world1); // put turtle in center of image
      Turtle t2 = new Turtle(50, 100, world1); // put turtle at 50,100
    </program>

    <p>
      In order to understand how to position a new <c>Turtle</c> in the world we
      need to know how the <c>x</c> and <c>y</c> values are used which may be
      surprising since the Turtle world does not use the Cartesian coordinate
      system with (0,0) in the middle the screen like we may be used to from
      math class or languages like Snap! Instead, (0,0) is at the top left
      corner of the screen and x increases to the right and y increases towards
      the bottom of the screen.
    </p>

    <p>
      Most computer graphics systems use this coordinate system which is a
      carryover from when computers dealt only with text being printed line by
      line, where it made sense to think of row zero, column zero as where the
      first character would come out.
    </p>

    <figure align="center">
      <caption>
        The coordinate (0,0) is at the top left of the Turtle world.
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/coords.png" width="36%" />
    </figure>

    <note>
      <p>
        Notice that the order of the arguments matter. The three-argument
        <c>Turtle</c> constructor takes the arguments <c>x</c>, <c>y</c>, and
        <c>world</c> in that order. If we put the <c>World</c> argument first
        Java will complain because there is no constructor that takes a
        <c>World</c>followed by two <c>int</c> values. Worse yet, if we swap the
        <c>x</c> and <c>y</c> values, the code will compile and probably run
        fine, i.e. it won’t crash, but our <c>Turtle</c> will not be positioned
        where we intended. So we need to be extra careful when a constructor or
        method takes multiple arguments of the same type to make sure we’re
        passing them in the right order.
      </p>
    </note>

    <activity label="const_turtle">
      <statement>
        <p>
          Which of these is valid syntax for creating and initializing a Turtle
          object in world1?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Turtle t = Turtle(world1);</p>
          </statement>

          <feedback>
            <p>You must use the new keyword to create a new Turtle.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle();</p>
          </statement>

          <feedback>
            <p>All turtle constructors take a world as an argument.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(world1, 100, 100);</p>
          </statement>

          <feedback>
            <p>
              The order of the parameters matter, so this would cause a syntax
              error.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Turtle t = new Turtle(100, 100, world1);</p>
          </statement>

          <feedback>
            <p>
              This creates a new Turtle object in the passed world at location
              (100,100)
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="TurtleConstructorTest">
      <statement>
        <p>
          Try changing the code below to create a <c>World</c> object with
          300x400 pixels. Where is the turtle placed by default? What arguments
          do you need to pass to the <c>Turtle</c> constructor to put the turtle
          at the top right corner? Experiment and find out. What happens if you
          mix up the order of the arguments?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleConstructorTest {
              public static void main(String[] args) {
                  // Change the World constructor to 300x400
                  World world1 = new World(300, 300);

                  // Change the Turtle constructor to put the turtle in the top right
                  // corner
                  Turtle t1 = new Turtle(world1);

                  t1.turnLeft();
                  world1.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleConstructorTest");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                              + "import java.util.*;\n\n"
                              + "public class TurtleConstructorTest\n"
                              + "{\n"
                              + "  public static void main(String[] args)\n"
                              + "  {\n"
                              + "      // Change the World constructor to 300x400\n"
                              + "      World world1 = new World(300,300);\n\n"
                              + "      // Change the Turtle constructor to put the turtle in the top right"
                              + " corner\n"
                              + "      Turtle t1 = new Turtle(world1);\n\n"
                              + "      t1.turnLeft();\n"
                              + "      world1.show(true);\n"
                              + "  }\n"
                              + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="turtle-methods">
    <title>Turtle exercises</title>

    <p>
      Now we can practice more with the <c>Turtle</c> class and its methods.
      Here is a class diagram that shows some of the attributes and methods in
      the class <c>Turtle</c>.
    </p>

    <figure align="center">
      <caption>Turtle class diagram</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleUMLClassDiagram.png" width="71%">
        <shortdescription>Turtle class diagram</shortdescription>
      </image>
    </figure>

    <activity label="ParsonsDraw7" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following code uses a turtle to draw the digital number 7 (with
          just straight lines), but the code is mixed up. Drag the code blocks
          to the right and put them in the correct order to first draw the line
          going up (towards the top of the page) and then turn and draw a line
          to the left to make a 7. Remember that the turtle is facing the top of
          the page when it is first created. Click on the “Check Me” button to
          check your solution.
        </p>
      </statement>

      <blocks>
        <block order="2">
          <cline>public class Draw7</cline>
          <cline>{</cline>
        </block>

        <block order="7">
          <cline>    public static void main(String[] args)</cline>
          <cline>    {</cline>
        </block>

        <block order="6">
          <cline>        World habitat = new World(300,300);</cline>
        </block>

        <block order="8">
          <cline>        Turtle yertle = new Turtle(habitat);</cline>
        </block>

        <block order="1">
          <cline>        yertle.forward();</cline>
        </block>

        <block order="4">
          <cline>        yertle.turnLeft();</cline>
          <cline>        yertle.forward();</cline>
        </block>

        <block order="9">
          <cline>        habitat.show(true);</cline>
        </block>

        <block order="5">
          <cline>    } // end main</cline>
        </block>

        <block order="3">
          <cline>} // end class</cline>
        </block>
      </blocks>
    </activity>


    <activity label="TurtleDrawSeven">
      <statement>
        <p>
          After solving the mixed up code problem above, type in the same code
          below to make the turtle draw a 7.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDraw7 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);
                  // Make yertle draw a 7 using the code above

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleDraw7");
              }

              @Test
              public void test1() {
                  String orig = "yertle.forward();\nyertle.turnLeft();\nyertle.forward();";
                  boolean passed = checkCodeContains(orig);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="TurtleDrawEight">
      <statement>
        <p>
          Can you make yertle draw the number 8, as two squares on top of each
          other? If you want to be really fancy you can use <c>penUp</c> and
          <c>penDown</c> to put some space between the two squares. Maybe you
          can even draw an 8 as it would be displayed on a <url
          href="https://en.wikipedia.org/wiki/Seven-segment_display">seven
          segment display</url>.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDraw8 {
              public static void main(String[] args) {
                  World habitat = new World(500, 500);
                  Turtle yertle = new Turtle(habitat);
                  // Make yertle draw an 8 with 2 squares
                  yertle.forward();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleDraw8");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                                  + "import java.util.*;\n\n"
                                  + "public class TurtleDraw8\n"
                                  + "{\n"
                                  + "  public static void main(String[] args)\n"
                                  + "  {\n"
                                  + "      World habitat = new World(300,300);\n"
                                  + "      Turtle yertle = new Turtle(habitat);\n"
                                  + "      // Make yertle draw an 8 with 2 squares\n"
                                  + "      yertle.forward();\n\n\n"
                                  + "      habitat.show(true);\n"
                                  + "  }\n"
                                  + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  int numForward = countOccurences(code, "forward(");

                  boolean passed = numForward >= 7;

                  passed = getResults("7 or more", "" + numForward, "Calls to forward()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  int numTurn = countOccurences(code, ".turn");

                  boolean passed = numTurn >= 5;

                  passed =
                          getResults("5 or more", "" + numTurn, "Calls to turnRight() or turnLeft()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>


    <activity label="TurtleTestMethods1">
      <statement>
        <p>
          <ol>
            <li>
              <p>
                Can you make yertle draw a square and change the pen color for
                each side of the square? Try something like:
                yertle.setColor(Color.red); This uses the <url
                href="https://docs.oracle.com/en/java/javase/22/docs/api/java.desktop/java/awt/Color.html">Color</url>
                class in Java which has some colors predefined like red, yellow,
                blue, magenta, cyan. You can also use more specific methods like
                setPenColor, setBodyColor, and setShellColor.
              </p>
            </li>

            <li>
              <p>
                Can you draw a triangle? The turnRight() method always does 90
                degree turns, but you’ll need external angles of 120 degree for
                an equilateral triangle. Use the turn method which has a
                parameter for the angle of the turn in degrees. For example,
                turn(90) is the same as turnRight(). Try drawing a triangle with
                different colors.
              </p>
            </li>
          </ol>
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTestMethods1 {
              public static void main(String[] args) {
                  World world = new World(300, 300);
                  Turtle yertle = new Turtle(world);

                  yertle.forward(100);
                  yertle.turnLeft();
                  yertle.forward(75);

                  world.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTestMethods1");
              }

              @Test
              public void test1() {
                  boolean passed =
                          codeChanged(
                                  "import java.awt.*;\n"
                                          + "import java.util.*;\n"
                                          + "\n"
                                          + "public class TurtleTestMethods1\n"
                                          + "{\n"
                                          + "    public static void main(String[] args)\n"
                                          + "    {\n"
                                          + "        World world = new World(300, 300);\n"
                                          + "        Turtle yertle = new Turtle(world);\n"
                                          + "\n"
                                          + "        yertle.forward(100);\n"
                                          + "        yertle.turnLeft();\n"
                                          + "        yertle.forward(75);\n"
                                          + "\n"
                                          + "        world.show(true);\n"
                                          + "    }\n"
                                          + "}\n");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  int numColors = countOccurences(code, "Color(");

                  boolean passed = numColors >= 3;
                  passed = getResults("3 or more", "" + numColors, "Changes color at least 3 times", passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  int numTurns = countOccurences(code, ".turn");

                  boolean passed = numTurns >= 3;
                  passed = getResults("3 or more", "" + numTurns, "Turns at least 3 times", passed);
                  assertTrue(passed);
              }

              @Test
              public void test4() {
                  String code = getCode();
                  int numTurns = countOccurences(code, ".turn(");

                  boolean passed = numTurns >= 1;
                  passed = getResults("1 or more", "" + numTurns, "Calls to turn(...)", passed);
                  assertTrue(passed);
              }

              @Test
              public void test5() {
                  String code = getCode();
                  int numForward = countOccurences(code, ".forward(");

                  boolean passed = numForward >= 4;
                  passed = getResults("4 or more", "" + numForward, "Calls to forward()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>

    <activity label="DrawAHouse" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following code uses a turtle to draw a simple house, but the lines
          are mixed up. Drag the code blocks to the right and put them in the
          correct order to first draw a square for the house and then a red
          triangle for the roof. Click on the “Check Me” button to check your
          solution. You can type this code in the Active Code window above to
          see it in action.
        </p>

        <image source="Unit1-Using-Objects-and-Methods/Figures/house.png" width="27%">
          <shortdescription>simple house</shortdescription>
        </image>

      </statement>

      <blocks>
        <block order="6">
          <cline>public class TurtleDrawHouse</cline>
          <cline>{</cline>
        </block>

        <block order="2">
          <cline>   public static void main(String[] args)</cline>
          <cline>   {</cline>
          <cline />
        </block>

        <block order="4">
          <cline>      World world = new World(300,300);</cline>
          <cline />
        </block>

        <block order="5">
          <cline>      Turtle builder = new Turtle(world);</cline>
          <cline />
        </block>

        <block order="9">
          <cline>      // Draw a square</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline />
        </block>

        <block order="10">
          <cline>      builder.setColor(Color.red);</cline>
          <cline />
        </block>

        <block order="7">
          <cline>      // Draw a triangle</cline>
          <cline>      builder.turn(30);</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turn(120);</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turn(120);</cline>
          <cline>      builder.forward(100);</cline>
          <cline />
        </block>

        <block order="3">
          <cline>      world.show(true);</cline>
          <cline />
        </block>

        <block order="8">
          <cline>   }</cline>
          <cline />
        </block>

        <block order="1">
          <cline>}</cline>
        </block>
      </blocks>
    </activity>

    <activity label="TurtleTestGetSet">
      <statement>
        <p>
          Try the code below that prints out the turtle’s current position using
          <c>getXPos()</c> and <c>getYPos()</c>. Can you make it go to position
          (0,0) or as close to it as possible?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTestGetSet {
              public static void main(String[] args) {
                  World world = new World(300, 300);
                  Turtle yertle = new Turtle(world);
                  System.out.println("Yertle is starting at: " + yertle.getXPos() + ", " + yertle.getYPos());
                  yertle.forward(100);
                  yertle.turn(90);
                  yertle.forward(50);
                  System.out.println("Yertle has ended up at: " + yertle.getXPos() + ", " + yertle.getYPos());
                  world.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTestGetSet");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                              + "import java.util.*;\n\n"
                              + "public class TurtleTestGetSet\n"
                              + "{\n"
                              + "public static void main(String[] args)\n"
                              + "{\n"
                              + "World world = new World(300,300);\n"
                              + "Turtle yertle = new Turtle(world);\n"
                              + "System.out.println(\"Yertle is starting at: \" + yertle.getXPos() + \", \" +"
                              + " yertle.getYPos());\n"
                              + "yertle.forward(100);\n"
                              + "yertle.turn(90);\n"
                              + "yertle.forward(50);\n"
                              + "System.out.println(\"Yertle has ended up at: \" + yertle.getXPos() + \", \""
                              + " + yertle.getYPos());\n"
                              + "world.show(true);\n"
                              + "}\n"
                              + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="TurtleArea">
      <statement>
        <p>
          Fix the errors in the code below so that it prints out the area of the
          space that the turtle occupies by multiplying its width and height.
          Remember that you have to do something with the values that the get
          methods return.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.lang.Math;
          import java.util.*;

          public class TurtleArea
          {
              public static void main(String[] args)
              {
                  World world = new World(300,300);
                  Turtle yertle = new Turtle(world);

                  int area;
                  yertle.getWidth() * getHeight;
                  System.out.println("Yertle's area is: ");
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleArea");
              }

              @Test
              public void test1() {
                  String actual = getMethodOutput("main");
                  String expected = "Yertle's area is: 270";
                  boolean passed = getResults(expected, actual, "Prints correct answer");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String target = ".getHeight()";

                  int num = countOccurences(code, target);

                  boolean passed = num >= 1;

                  getResults("1+", "" + num, "Calls to " + target, passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  String target = ".getWidth()";

                  int num = countOccurences(code, target);

                  boolean passed = num >= 1;

                  getResults("1+", "" + num, "Calls to " + target, passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-draw-letters">
    <title>Coding Challenge: Draw letters</title>

    <p>
      Working in pairs, use the area below to have your turtle draw simple
      block-style letters for your first or last name initials using just
      straight lines.
    </p>

    <p>
      It may help to act out the code pretending you are the turtle. Remember
      that which way you turn depends on which direction you are facing, and the
      turtle begins facing north (towards the top of the page).
    </p>

    <project label="challenge-Turtle_Letter">
      <statement>
        <p>
          Have your turtle create a block drawing of the initials of your name.
          Use just straight lines.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleLetter {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  // Create a turtle object

                  // have it draw your initials

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleLetter");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                                  + "import java.util.*;\n\n"
                                  + "public class TurtleLetter\n"
                                  + "{\n"
                                  + "  public static void main(String[] args)\n"
                                  + "  {\n"
                                  + "      World habitat = new World(300,300);\n\n\n\n"
                                  + "      habitat.show(true);\n"
                                  + "  }\n"
                                  + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String[] lines = code.split("\n");

                  boolean passed = lines.length >= 20;
                  passed =
                          getResults(
                                  "20 or more lines",
                                  lines.length + " lines",
                                  "Adding a reasonable amount of lines to code",
                                  passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </project>

  </subsection>

  <subsection xml:id="coding-challenge-turtle-house">
    <title>Coding Challenge: Turtle house</title>
    <sidebyside widths="15% 100%" margins="-20% 0%">
      <image source="Unit1-Using-Objects-and-Methods/Figures/houseWithWindows.png" width="36%">
        <shortdescription>simple house</shortdescription>
      </image>

      <stack>
        <p>
          This creative challenge is fun to do collaboratively in pairs. Design a
          house and have the turtle draw it with different colors below. Can you add
          windows and a door? Come up with your own house design as a team.
        </p>

        <p>
          To draw a window, you will need to call <c>penUp</c> and <c>moveTo</c> to
          walk the turtle into position without drawing, for example:
        </p>

        <program>
          t.penUp();
          t.moveTo(120,200);
          t.penDown();
        </program>

        <p>
          It may help to act out the code pretending you are the turtle. Remember
          that the angles you turn depend on which direction you are facing, and the
          turtle begins facing up. When planning your coordinates for the house,
          remember that the turtle starts at the center of the screen (150,150) and
          the top left corner is (0,0).
        </p>
      </stack>
    </sidebyside>

    <project label="challenge-TurtleHouse">
      <statement>
        <p>
          Draw a Turtle House! Make sure you use forward, turn, penUp, penDown,
          moveTo methods as well as different colors. Have fun!
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleHouse {
              public static void main(String[] args) {
                  World world = new World(300, 300);
                  Turtle t = new Turtle(world);
                  // Use t to draw a house

                  // keep this line at the end of your code to show the drawing
                  world.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleHouse");
              }

              @Test
              public void test2() {
                  String code = getCode();
                  int num = countOccurences(code, "moveTo(");

                  boolean passed = num >= 1;
                  passed = getResults("1 or more", "" + num, "Calls moveTo(...)", passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  int num = countOccurences(code, ".penUp()");

                  boolean passed = num >= 1;
                  passed = getResults("1 or more", "" + num, "Calls penUp()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test4() {
                  String code = getCode();
                  int num = countOccurences(code, ".penDown(");

                  boolean passed = num >= 1;
                  passed = getResults("1 or more", "" + num, "Calls penDown()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test5() {
                  String code = getCode();
                  int numTurns = countOccurences(code, ".turn");

                  boolean passed = numTurns >= 6;
                  passed = getResults("6 or more", "" + numTurns, "turns", passed);
                  assertTrue(passed);
              }

              @Test
              public void test6() {
                  String code = getCode();
                  int numForward = countOccurences(code, ".forward(");

                  boolean passed = numForward >= 6;
                  passed = getResults("6 or more", "" + numForward, "Calls to forward()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-3">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 1.12.A.1) A <term>class</term> defines a new data type (a
            classification). It is the formal implementation, or blueprint, of
            the <em>attributes</em> and <em>behaviors</em> of the objects of
            that class.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.1) An <term>object</term> is a specific
            <term>instance</term> of a class with defined attributes. Objects
            are declared as variables of a class type.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.B.1) A variable of a reference type holds an object
            reference, which can be thought of as the memory address of that
            object.
          </p>
        </li>

        <li>
          <p>
            An <term>attribute</term> or <term>instance variable</term> is data
            the object knows about itself. For example a turtle object knows the
            direction it is facing or its color.
          </p>
        </li>

        <li>
          <p>
            A <term>behavior</term> or <term>method</term> is something that an
            object can do. For example a turtle object can go forward 100
            pixels.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.2) A <term>class hierarchy</term> can be developed by
            putting common attributes and behaviors of related classes into a
            single class called a <term>superclass</term>. Classes that
            <term>extend</term> a superclass, called <term>subclasses</term>,
            can draw upon the existing attributes and behaviors of the
            superclass without replacing these in the code. This creates an
            <term>inheritance</term> relationship from the subclasses to the
            superclass. Designing and implementing inheritance relationships are
            outside the scope of the AP Computer Science A course and exam.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.2) All classes in Java are subclasses of the
            <term>Object</term> class.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
