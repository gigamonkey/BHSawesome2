<?xml version="1.0" encoding="utf-8"?>

<section xml:id="turtles">
  <title>Turtles</title>

  <subsection xml:id="turtle-class">
    <title>Turtle Class</title>

    <p>
      The Turtle class (that we’ve written for you and hidden on this page) is a
      blueprint for turtle objects. It defines attributes for graphical turtles
      like their color and position and methods to make the turtles move. Try
      the Java program below that creates a Turtle object called yertle using
      the Turtle class. If the code below does not work or is too slow in your
      browser, you can also see the <c>Turtle</c> code in action on <url
      href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/beca9c16-4004-4a4e-b4b0-11593e140808#f5357602-b60b-44c3-be0e-dfb07de2a778">JuiceMind</url>
      or <url
      href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java">replit</url>
      or download the files <url
      href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip">here</url>
      to use in your own IDE.
    </p>

    <activity label="TurtleTest">
      <statement>
        <p>
          Try clicking the run button below to see what the following program
          does.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();
                  yertle.forward();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest");
              }

              @Test
              public void test1() {
                  boolean passed = getResults("true", "true", "main()");
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <p>
      The following <url
      href="https://www.youtube.com/watch?v=TFmmG4_KK8I&amp;list=PLHqz-wcqDQIEP6p1_0wOb9l9aQ0qFijrP&amp;ab_channel=colleenlewis">video</url>
      shows how the program creates a <c>World</c> object called <c>habitat</c>
      and a <c>Turtle</c> object called <c>yertle</c> in memory.
    </p>

    <figure align="center">
      <caption>Turtle Memory Model</caption>

      <video youtube="TFmmG4_KK8I" label="video-turtle" />
    </figure>

    <p>
      The <term>dot operator</term> (.) is used to run an object’s method. You
      can think of the (.) as asking the object to do something (execute one of
      its methods). For example, <c>yertle.forward()</c> asks the turtle
      <c>yertle</c> to go <c>forward</c>. It doesn’t tell <c>yertle</c> how much
      to go forward, so it goes forward 100 pixels by default. The parentheses
      <c>()</c> after a method name are there in case you need to give the
      method <term>arguments</term> (some data) to do its job, for example to go
      forward 50 pixels instead of 100 in <c>yertle.forward(50);</c> Try
      changing the code above to go forward 50 pixels instead and then run it
      again.
    </p>

    <activity label="TurtleTest2">
      <statement>
        <p>
          In the code below, <c>yertle</c> goes forward and then turns left. Can
          you change the code to make <c>yertle</c> go <c>forward</c> twice and
          then <c>turnRight</c>?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest2 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest2");
              }

              @Test
              public void test1() {
                  String code = getCode();
                  String expect = "yertle.forward";

                  int count = countOccurences(code, expect);

                  boolean passed = getResults("2 time(s)", "" + count + " time(s)", "yertle.forward() twice");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String expect = "yertle.turnRight()";

                  int count = countOccurences(code, expect);

                  boolean passed = count >= 1;
                  passed = getResults("1+ time(s)", "" + count + " time(s)", "yertle.turnRight()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>

    <p>
      A variable like <c>yertle</c> of a <term>reference</term> type like
      <c>Turtle</c> holds an object reference, which can be thought of as the
      memory address of that object. Variables that are of a primitive types
      like <c>int</c> hold just a single number value. But objects are complex
      and contain a collection of values called <term>attributes</term>, for
      example the color and the size of the turtle.
    </p>
  </subsection>

  <subsection xml:id="creating-turtle-objects">
    <title>Creating Turtle Objects</title>

    <p>
      When you write a class like the <c>Turtle</c> class, you can create many
      objects of that class type. In the code below, two turtle objects are
      created: <c>yertle</c> and <c>myrtle</c>. You can name your turtle and add
      in a line like the following in the main method to make it move:
    </p>

    <program>
      // To create or declare a new object, write:
      // ClassName variableName = new ClassName(arguments);
      Turtle yourTurtleName = new Turtle(habitat);
      yourTurtlename.forward();
    </program>

    <activity label="TurtleTest3">
      <statement>
        <p>Can you add another turtle object to the code below?</p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTest3 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);
                  Turtle myrtle = new Turtle(habitat);

                  yertle.forward();
                  yertle.turnLeft();
                  yertle.forward();

                  myrtle.turnRight();
                  myrtle.forward();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTest3");
              }

              @Test
              public void test1() {
                  String code = getCode();
                  String expect = "new Turtle(habitat)";

                  int count = countOccurences(code, expect);

                  boolean passed = count >= 3;
                  passed = getResults("3+ Turtles", "" + count + " Turtles", "Add a new Turtle(s)", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="turtle-methods">
    <title>Turtle Methods</title>

    <p>
      Let’s practice more with the <c>Turtle</c> class and its methods. Here is
      a class diagram that shows some of the attributes and methods in the class
      <c>Turtle</c>.
    </p>

    <figure align="center">
      <caption>Turtle Class Diagram</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleUMLClassDiagram.png" width="71%">
        <shortdescription>Turtle class diagram</shortdescription>
      </image>
    </figure>

    <p>
      The Turtle world does not use the Cartesian coordinate system with (0,0)
      in the middle the screen. Instead, (0,0) is at the top left corner of the
      screen and x increases to the right and y increases towards the bottom of
      the screen. Most computer graphics systems use this coordinate system
      which is a carry over from before computers could display graphics and had
      to approximate the graphics with text print outs.
    </p>

    <figure align="center">
      <caption>
        The coordinate (0,0) is at the top left of the Turtle world.
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/coords.png" width="36%" />
    </figure>

    <activity label="ParsonsDraw7" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following code uses a turtle to draw the digital number 7 (with
          just straight lines), but the code is mixed up. Drag the code blocks
          to the right and put them in the correct order to first draw the line
          going up (towards the top of the page) and then turn and draw a line
          to the left to make a 7. Remember that the turtle is facing the top of
          the page when it is first created. Click on the “Check Me” button to
          check your solution.
        </p>
      </statement>

      <blocks>
        <block order="2">
          <cline>public class Draw7</cline>
          <cline>{</cline>
        </block>

        <block order="7">
          <cline>    public static void main(String[] args)</cline>
          <cline>    {</cline>
        </block>

        <block order="6">
          <cline>        World habitat = new World(300,300);</cline>
        </block>

        <block order="8">
          <cline>        Turtle yertle = new Turtle(habitat);</cline>
        </block>

        <block order="1">
          <cline>        yertle.forward();</cline>
        </block>

        <block order="4">
          <cline>        yertle.turnLeft();</cline>
          <cline>        yertle.forward();</cline>
        </block>

        <block order="9">
          <cline>        habitat.show(true);</cline>
        </block>

        <block order="5">
          <cline>    } // end main</cline>
        </block>

        <block order="3">
          <cline>} // end class</cline>
        </block>
      </blocks>
    </activity>

    <p>
      After you put the mixed up code in order above, type in the same code
      below to make the turtle draw a 7.
    </p>

    <activity label="TurtleDrawSeven">
      <statement>
        <p>
          Can you make yertle draw a 7 by going forward to go up and then left?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDraw7 {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  Turtle yertle = new Turtle(habitat);
                  // Make yertle draw a 7 using the code above

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleDraw7");
              }

              @Test
              public void test1() {
                  String orig = "yertle.forward();\nyertle.turnLeft();\nyertle.forward();";
                  boolean passed = checkCodeContains(orig);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="TurtleDrawEight">
      <statement>
        <p>
          Can you make yertle draw the digital number 8, as 2 squares on top of
          each other?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleDraw8 {
              public static void main(String[] args) {
                  World habitat = new World(500, 500);
                  Turtle yertle = new Turtle(habitat);
                  // Make yertle draw an 8 with 2 squares
                  yertle.forward();

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleDraw8");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                                  + "import java.util.*;\n\n"
                                  + "public class TurtleDraw8\n"
                                  + "{\n"
                                  + "  public static void main(String[] args)\n"
                                  + "  {\n"
                                  + "      World habitat = new World(300,300);\n"
                                  + "      Turtle yertle = new Turtle(habitat);\n"
                                  + "      // Make yertle draw an 8 with 2 squares\n"
                                  + "      yertle.forward();\n\n\n"
                                  + "      habitat.show(true);\n"
                                  + "  }\n"
                                  + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  int numForward = countOccurences(code, "forward(");

                  boolean passed = numForward >= 7;

                  passed = getResults("7 or more", "" + numForward, "Calls to forward()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  int numTurn = countOccurences(code, ".turn");

                  boolean passed = numTurn >= 5;

                  passed =
                          getResults("5 or more", "" + numTurn, "Calls to turnRight() or turnLeft()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-draw-letters">
    <title>Coding Challenge: Draw Letters</title>

    <p>
      Working in pairs, use the area below to have your turtle draw simple
      block-style letters for your first or last name initials using just
      straight lines (no curves or diagonals).
    </p>

    <p>
      It may help to act out the code pretending you are the turtle. Remember
      that which way you turn depends on which direction you are facing, and the
      turtle begins facing north (towards the top of the page).
    </p>

    <p>Here are some simple turtle methods that you can use:</p>

    <p>
      <ul>
        <li>
          <p><c>forward()</c></p>
        </li>

        <li>
          <p><c>turnLeft()</c></p>
        </li>

        <li>
          <p><c>turnRight()</c></p>
        </li>

        <li>
          <p><c>backward()</c></p>
        </li>

        <li>
          <p><c>penUp()</c></p>
        </li>

        <li>
          <p><c>penDown()</c></p>
        </li>
      </ul>
    </p>

    <p>
      You may notice that it is challenging to have your turtle draw with these
      simple methods. In the next lessons, we will use more complex
      <c>Turtle</c> methods where you can indicate how many steps to take or
      what angle to turn that will make drawing a lot easier!
    </p>

    <project label="challenge-Turtle_Letter">
      <statement>
        <p>
          Have your turtle create a block drawing of the initials of your name.
          Use straight lines (no curves or diagonals unless you want to try
          adding arguments to the turtle methods).
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleLetter {
              public static void main(String[] args) {
                  World habitat = new World(300, 300);
                  // Create a turtle object

                  // have it draw your initials

                  habitat.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleLetter");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                                  + "import java.util.*;\n\n"
                                  + "public class TurtleLetter\n"
                                  + "{\n"
                                  + "  public static void main(String[] args)\n"
                                  + "  {\n"
                                  + "      World habitat = new World(300,300);\n\n\n\n"
                                  + "      habitat.show(true);\n"
                                  + "  }\n"
                                  + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String[] lines = code.split("\n");

                  boolean passed = lines.length >= 20;
                  passed =
                          getResults(
                                  "20 or more lines",
                                  lines.length + " lines",
                                  "Adding a reasonable amount of lines to code",
                                  passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-3">
    <title>Summary</title>

    <p>
      <ul>
        <li>
          <p>
            (AP 1.12.A.1) A <term>class</term> defines a new data type (a
            classification). It is the formal implementation, or blueprint, of
            the <em>attributes</em> and <em>behaviors</em> of the objects of
            that class.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.1) An <term>object</term> is a specific
            <term>instance</term> of a class with defined attributes. Objects
            are declared as variables of a class type.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.B.1) A variable of a reference type holds an object
            reference, which can be thought of as the memory address of that
            object.
          </p>
        </li>

        <li>
          <p>
            An <term>attribute</term> or <term>instance variable</term> is data
            the object knows about itself. For example a turtle object knows the
            direction it is facing or its color.
          </p>
        </li>

        <li>
          <p>
            A <term>behavior</term> or <term>method</term> is something that an
            object can do. For example a turtle object can go forward 100
            pixels.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.2) A <term>class hierarchy</term> can be developed by
            putting common attributes and behaviors of related classes into a
            single class called a <term>superclass</term>. Classes that
            <term>extend</term> a superclass, called <term>subclasses</term>,
            can draw upon the existing attributes and behaviors of the
            superclass without replacing these in the code. This creates an
            <term>inheritance</term> relationship from the subclasses to the
            superclass. Designing and implementing inheritance relationships are
            outside the scope of the AP Computer Science A course and exam.
          </p>
        </li>

        <li>
          <p>
            (AP 1.12.A.2) All classes in Java are subclasses of the
            <term>Object</term> class.
          </p>
        </li>
      </ul>
    </p>
  </subsection>

  <subsection xml:id="ap-practice-2">
    <title>AP Practice</title>

    <p>
      Try these AP practice questions that will help to prepare you for the AP
      Classroom progress checks.
    </p>

    <activity label="AP-attributes">
      <statement>
        <p>
          A student has created a <c>Dog</c> class. The class contains variables
          to represent the following.
        </p>

        <p>
          <ul>
            <li>
              <p>
                A String variable called <c>breed</c> to represent the breed of
                the dog
              </p>
            </li>

            <li>
              <p>
                An int variable called <c>age</c> to represent the age of the
                dog
              </p>
            </li>

            <li>
              <p>
                A String variable called <c>name</c> to represent the name of
                the dog
              </p>
            </li>
          </ul>
        </p>

        <p>
          The object <c>pet</c> is declared as type Dog. Which of the following
          descriptions is accurate?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>An attribute of the name object is String.</p>
          </statement>

          <feedback>
            <p>name is an attribute of the pet object or Dog class.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>An attribute of the pet object is name.</p>
          </statement>

          <feedback>
            <p>name is an attribute of the pet object or Dog class.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>An instance of the pet class is Dog.</p>
          </statement>

          <feedback>
            <p>An instance of the Dog class is pet.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>An attribute of the Dog instance is pet.</p>
          </statement>

          <feedback>
            <p>An attribute of the Dog class is name.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>An instance of the Dog object is pet.</p>
          </statement>

          <feedback>
            <p>An instance of the Dog class is pet.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="AP-objects">
      <statement>
        <p>
          A student has created a <c>Party</c> class. The class contains
          variables to represent the following.
        </p>

        <p>
          <ul>
            <li>
              <p>
                An int variable called <c>numOfPeople</c> to represent the
                number of people at the party.
              </p>
            </li>

            <li>
              <p>
                A boolean variable called <c>discoLightsOn</c> to represent
                whether the disco ball is on.
              </p>
            </li>

            <li>
              <p>
                A boolean variable called <c>partyStarted</c> to represent
                whether the party has started.
              </p>
            </li>
          </ul>
        </p>

        <p>
          The object <c>myParty</c> is declared as type Party. Which of the
          following descriptions is accurate?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>boolean is an attribute of the myParty object.</p>
          </statement>

          <feedback>
            <p>boolean is the type of an attribute, but not an attribute.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>myParty is an attribute of the Party class.</p>
          </statement>

          <feedback>
            <p>myParty is an instance of the Party class.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>myParty is an instance of the Party class.</p>
          </statement>

          <feedback>
            <p>myParty is an object that is an instance of the Party class.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>myParty is an attribute of the Party instance.</p>
          </statement>

          <feedback>
            <p>An attribute of the Party class is numOfPeople.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>numOfPeople is an instance of the Party object.</p>
          </statement>

          <feedback>
            <p>An attribute of the Party class is numOfPeople.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="the-world-class-constructors">
    <title>The World Class Constructors</title>

    <p>
      There can be more than one constructor defined in a class. This is called
      <term>overloading</term> the constructor. The <c>World</c> class has the 2
      constructors seen below. One doesn’t take any arguments and creates a
      default sized world and one takes the world’s width and height arguments
      to create a world of a specific size. An <term>argument</term> is a value
      that is passed into a constructor. Arguments are used to initialize the
      attributes of an object, in this case, the size of the world.
    </p>

    <figure align="center">
      <caption>Two World constructors</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/worldConstructors.png" width="63%">
        <shortdescription>Two World constructors</shortdescription>
      </image>
    </figure>

    <p>
      The <term>no-argument constructor</term> <c>World()</c>, with no arguments
      inside the parentheses following the name of the constructor, creates a
      graphical window with a default size of 640x480 pixels. No-argument
      constructors usually set the attributes of the object to default values.
      The second <c>World(int width, int height)</c> constructor takes two
      integer arguments, and initializes the <c>World</c> object’s width and
      height to them, for example <c>new World(300,400)</c> creates a 300x400
      pixel world.
    </p>

    <program>
      World world1 = new World(); // creates a default size 640x480 world
      World world2 = new World(300,400); // creates a 300x400 world
    </program>

    <activity label="mcq_world_constructor">
      <statement>
        <p>
          Which of these is valid syntax for creating and initializing a World
          object?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>World w = null;</p>
          </statement>

          <feedback>
            <p>
              This declares a variable w that refers to a World object, but it
              doesn't create a World object or initialize it.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = new World;</p>
          </statement>

          <feedback>
            <p>You must include parentheses () to call a constructor.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World();</p>
          </statement>

          <feedback>
            <p>
              Correct, use the new keyword followed by the classname and
              parentheses to create a new object and call the constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>World w = World();</p>
          </statement>

          <feedback>
            <p>You must use the new keyword to create a new object.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>World w = new World(300,500);</p>
          </statement>

          <feedback>
            <p>
              Correct, this constructor call creates a new World object with the
              size 300x500 pixels.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq_overload_constructor">
      <statement>
        <p>Which of these is overloading the constructor?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>When a constructor takes one argument.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>When a constructor takes more than one argument.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>When one constructor is defined in a class.</p>
          </statement>

          <feedback>
            <p>
              For a constructor to be overloaded there must be more than one
              constructor.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>When more than one constructor is defined in a class.</p>
          </statement>

          <feedback>
            <p>
              Overloading means that there is more than one constructor. The
              parameter lists must differ in either number, order, or type of
              parameters.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="the-turtle-class-constructors">
    <title>The Turtle Class Constructors</title>

    <p>
      The <c>Turtle</c> class also has multiple constructors, although it always
      requires a world as an argument in order to have a place to draw the
      turtle. The default location for the turtle is right in the middle of the
      world.
    </p>

    <p>
      There is another <c>Turtle</c> constructor that places the turtle at a
      certain (x,y) location in the world, for example at the coordinate (50,
      100) below.
    </p>

    <program>
      Turtle t1 = new Turtle(world1);
      Turtle t2 = new Turtle(50, 100, world1);
    </program>

    <note>
      <p>
        Notice that the order of the arguments matter. The <c>Turtle</c>
        constructor takes <c>(x,y,world)</c> as arguments in that order. If you
        mix up the order of the arguments it will cause an error, because the
        arguments will not be the data types that it expects. This is one reason
        why programming languages have data types – to allow for error-checking.
      </p>
    </note>

    <activity label="const_turtle">
      <statement>
        <p>
          Which of these is valid syntax for creating and initializing a Turtle
          object in world1?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Turtle t = Turtle(world1);</p>
          </statement>

          <feedback>
            <p>You must use the new keyword to create a new Turtle.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle();</p>
          </statement>

          <feedback>
            <p>All turtle constructors take a world as an argument.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Turtle t = new Turtle(world1, 100, 100);</p>
          </statement>

          <feedback>
            <p>
              The order of the parameters matter, so this would cause a syntax
              error.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Turtle t = new Turtle(100, 100, world1);</p>
          </statement>

          <feedback>
            <p>
              This creates a new Turtle object in the passed world at location
              (100,100)
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="TurtleConstructorTest">
      <statement>
        <p>
          Try changing the code below to create a <c>World</c> object with
          300x400 pixels. Where is the turtle placed by default? What arguments
          do you need to pass to the <c>Turtle</c> constructor to put the turtle
          at the top right corner? Experiment and find out. What happens if you
          mix up the order of the arguments?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleConstructorTest {
              public static void main(String[] args) {
                  // Change the World constructor to 300x400
                  World world1 = new World(300, 300);

                  // Change the Turtle constructor to put the turtle in the top right
                  // corner
                  Turtle t1 = new Turtle(world1);

                  t1.turnLeft();
                  world1.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleConstructorTest");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                              + "import java.util.*;\n\n"
                              + "public class TurtleConstructorTest\n"
                              + "{\n"
                              + "  public static void main(String[] args)\n"
                              + "  {\n"
                              + "      // Change the World constructor to 300x400\n"
                              + "      World world1 = new World(300,300);\n\n"
                              + "      // Change the Turtle constructor to put the turtle in the top right"
                              + " corner\n"
                              + "      Turtle t1 = new Turtle(world1);\n\n"
                              + "      t1.turnLeft();\n"
                              + "      world1.show(true);\n"
                              + "  }\n"
                              + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-custom-turtles">
    <title>Coding Challenge: Custom Turtles</title>

    <p>
      Working in pairs, you will now look at a new class called CustomTurtle and
      design some colorful turtles with its constructors. The CustomTurtle class
      in the ActiveCode below inherits many of its attributes and methods from
      the Turtle class. However, it has some new constructors with more
      parameters to customize a turtle with its body color, shell color, width,
      and height. CustomTurtle has 3 constructors:
    </p>

    <program>
      /** Constructs a CustomTurtle in the middle of the world */
      public CustomTurtle(World w)

      /** Constructs a CustomTurtle with a specific body color,
          shell color, and width and height in the middle of the world */
      public CustomTurtle(World w, Color body, Color shell, int w, int h)

      /** Constructs a CustomTurtle with a specific body color,
          shell color, and width and height at position (x,y) in the world */
      public CustomTurtle(int x, int y, World w, Color body, Color shell, int w, int h)
    </program>

    <p>
      You will use the constructor(s) to create the CustomTurtles below. You can
      specify colors like Color.red by using the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.desktop/java/awt/Color.html">Color</url>
      class in Java.
    </p>

    <p>
      <ol>
        <li>
          <p>
            Create a large 150x200 (width 150 and height 200) CustomTurtle with
            a green body (Color.green) and a blue shell (Color.blue) at position
            (150,300)
          </p>
        </li>

        <li>
          <p>
            Create a small 25x50 CustomTurtle with a red body and a yellow shell
            at position (350,200)
          </p>
        </li>

        <li>
          <p>Create a CustomTurtle of your own design.</p>
        </li>
      </ol>
    </p>

    <project label="challenge-CustomTurtles">
      <statement>
        <p>
          Use the CustomTurtle constructors with the signatures below to create
          the turtles with the colors and positions described in the comments of
          the program.
        </p>

        <program>
          /** Constructs a CustomTurtle in the middle of the world */
          public CustomTurtle(World w)

          /** Constructs a CustomTurtle with a specific body color,
              shell color, and width and height in the middle of the world */
          public CustomTurtle(World w, Color body, Color shell, int w, int h)

          /** Constructs a CustomTurtle with a specific body color, shell color,
              and width and height at position (x,y) in the world */
          public CustomTurtle(int x, int y, World w, Color body, Color shell, int w, int h)
        </program>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class CustomTurtleRunner {
              public static void main(String[] args) {
                  World world1 = new World(400, 400);

                  // 1. Change the constructor call below to create a large
                  // 150x200 CustomTurtle with a green body (Color.green)
                  // and a blue shell (Color.blue) at position (150,300).
                  // Move it forward to see it.
                  CustomTurtle turtle1 = new CustomTurtle(world1);
                  turtle1.forward();

                  // 2. Create a small 25x50 CustomTurtle with a red body
                  // and a yellow shell at position (350,200)
                  // Move it forward to see it.

                  // 3. Create a CustomTurtle of your own design

                  world1.show(true);
              }
          }

          class CustomTurtle extends Turtle {
              private int x;
              private int y;
              private World w;
              private Color bodycolor;
              private Color shellcolor;
              private int width;
              private int height;

              /**
               * Constructor that takes the model display
               *
               * @param modelDisplay the thing that displays the model or world
               */
              public CustomTurtle(ModelDisplay modelDisplay) {
                  // let the parent constructor handle it
                  super(modelDisplay);
              }

              /**
               * Constructor that takes the model display to draw it on and custom colors and size
               *
               * @param m the world
               * @param body : the body color
               * @param shell : the shell color
               * @param w: width
               * @param h: height
               */
              public CustomTurtle(ModelDisplay m, Color body, Color shell, int w, int h) {
                  // let the parent constructor handle it
                  super(m);
                  bodycolor = body;
                  setBodyColor(body);
                  shellcolor = shell;
                  setShellColor(shell);
                  height = h;
                  width = w;
                  setHeight(h);
                  setWidth(w);
              }

              /**
               * Constructor that takes the x and y and a model display to draw it on and custom colors and
               * size
               *
               * @param x the starting x position
               * @param y the starting y position
               * @param m the world
               * @param body : the body color
               * @param shell : the shell color
               * @param w: width
               * @param h: height
               */
              public CustomTurtle(int x, int y, ModelDisplay m, Color body, Color shell, int w, int h) {
                  // let the parent constructor handle it
                  super(x, y, m);
                  bodycolor = body;
                  setBodyColor(body);
                  shellcolor = shell;
                  setShellColor(shell);
                  height = h;
                  width = w;
                  setHeight(h);
                  setWidth(w);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("CustomTurtleRunner");
              }

              @Test
              public void test1() {
                  String target = "new CustomTurtle(150,300,world1, Color.green, Color.blue, 150, 200)";
                  boolean passed =
                          checkCodeContains(
                                  "constructor for a large 150x200 CustomTurtle with a green body and a blue"
                                          + " shell at position (150,300) in world1",
                                  target);
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String target = "new CustomTurtle(350,200,world1, Color.red, Color.yellow, 25, 50)";
                  boolean passed =
                          checkCodeContains(
                                  "constructor for a small 25x50 CustomTurtle with a red body and a yellow"
                                          + " shell at position (350,200) in world1",
                                  target);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </project>
  </subsection>

  <subsection>
    <title>Turtle exercises</title>

    <p>
      Here is the Turtle class diagram again that shows some of the variables
      and methods inherited from the SimpleTurtle class in the class Turtle that
      are written for you.
    </p>

    <figure align="center">
      <caption>Turtle Class Diagram</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleUMLClassDiagram.png" width="71%">
        <shortdescription>Turtle class diagram</shortdescription>
      </image>
    </figure>

    <p>
      Methods are said to be <term>overloaded</term> when there are multiple
      methods with the same name but a different <term>method signature</term>,
      where it requires a different number or type of parameters. For example,
      we have two different forward methods, <c>forward()</c> with no arguments
      and <c>forward(100)</c> which has an argument that tells it how much to
      move forward. The arguments given to the method need to correspond to the
      order and types of the parameters in the method signature.
    </p>

    <activity label="TurtleTestMethods1">
      <statement>
        <p>
          <ol>
            <li>
              <p>
                Can you make yertle draw a square and change the pen color for
                each side of the square? Try something like:
                yertle.setColor(Color.red); This uses the <url
                href="https://docs.oracle.com/en/java/javase/22/docs/api/java.desktop/java/awt/Color.html">Color</url>
                class in Java which has some colors predefined like red, yellow,
                blue, magenta, cyan. You can also use more specific methods like
                setPenColor, setBodyColor, and setShellColor.
              </p>
            </li>

            <li>
              <p>
                Can you draw a triangle? The turnRight() method always does 90
                degree turns, but you’ll need external angles of 120 degree for
                an equilateral triangle. Use the turn method which has a
                parameter for the angle of the turn in degrees. For example,
                turn(90) is the same as turnRight(). Try drawing a triangle with
                different colors.
              </p>
            </li>
          </ol>
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTestMethods1 {
              public static void main(String[] args) {
                  World world = new World(300, 300);
                  Turtle yertle = new Turtle(world);

                  yertle.forward(100);
                  yertle.turnLeft();
                  yertle.forward(75);

                  world.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTestMethods1");
              }

              @Test
              public void test1() {
                  boolean passed =
                          codeChanged(
                                  "import java.awt.*;\n"
                                          + "import java.util.*;\n"
                                          + "\n"
                                          + "public class TurtleTestMethods1\n"
                                          + "{\n"
                                          + "    public static void main(String[] args)\n"
                                          + "    {\n"
                                          + "        World world = new World(300, 300);\n"
                                          + "        Turtle yertle = new Turtle(world);\n"
                                          + "\n"
                                          + "        yertle.forward(100);\n"
                                          + "        yertle.turnLeft();\n"
                                          + "        yertle.forward(75);\n"
                                          + "\n"
                                          + "        world.show(true);\n"
                                          + "    }\n"
                                          + "}\n");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  int numColors = countOccurences(code, "Color(");

                  boolean passed = numColors >= 3;
                  passed = getResults("3 or more", "" + numColors, "Changes color at least 3 times", passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  int numTurns = countOccurences(code, ".turn");

                  boolean passed = numTurns >= 3;
                  passed = getResults("3 or more", "" + numTurns, "Turns at least 3 times", passed);
                  assertTrue(passed);
              }

              @Test
              public void test4() {
                  String code = getCode();
                  int numTurns = countOccurences(code, ".turn(");

                  boolean passed = numTurns >= 1;
                  passed = getResults("1 or more", "" + numTurns, "Calls to turn(...)", passed);
                  assertTrue(passed);
              }

              @Test
              public void test5() {
                  String code = getCode();
                  int numForward = countOccurences(code, ".forward(");

                  boolean passed = numForward >= 4;
                  passed = getResults("4 or more", "" + numForward, "Calls to forward()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>

    <image source="Unit1-Using-Objects-and-Methods/Figures/house.png" width="27%">
      <shortdescription>simple house</shortdescription>
    </image>

    <p>
      Try the following mixed up code to draw a simple house made of a square
      and a triangle roof.
    </p>

    <activity label="DrawAHouse" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following code uses a turtle to draw a simple house, but the lines
          are mixed up. Drag the code blocks to the right and put them in the
          correct order to first draw a square for the house and then a red
          triangle for the roof. Click on the “Check Me” button to check your
          solution. You can type this code in the Active Code window above to
          see it in action.
        </p>
      </statement>

      <blocks>
        <block order="6">
          <cline>public class TurtleDrawHouse</cline>
          <cline>{</cline>
        </block>

        <block order="2">
          <cline>   public static void main(String[] args)</cline>
          <cline>   {</cline>
          <cline />
        </block>

        <block order="4">
          <cline>      World world = new World(300,300);</cline>
          <cline />
        </block>

        <block order="5">
          <cline>      Turtle builder = new Turtle(world);</cline>
          <cline />
        </block>

        <block order="9">
          <cline>      // Draw a square</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turnRight();</cline>
          <cline>      builder.forward(100);</cline>
          <cline />
        </block>

        <block order="10">
          <cline>      builder.setColor(Color.red);</cline>
          <cline />
        </block>

        <block order="7">
          <cline>      // Draw a triangle</cline>
          <cline>      builder.turn(30);</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turn(120);</cline>
          <cline>      builder.forward(100);</cline>
          <cline>      builder.turn(120);</cline>
          <cline>      builder.forward(100);</cline>
          <cline />
        </block>

        <block order="3">
          <cline>      world.show(true);</cline>
          <cline />
        </block>

        <block order="8">
          <cline>   }</cline>
          <cline />
        </block>

        <block order="1">
          <cline>}</cline>
        </block>
      </blocks>
    </activity>

    <activity label="TurtleTestGetSet">
      <statement>
        <p>
          Try the code below that prints out the turtle’s current position using
          <c>getXPos()</c> and <c>getYPos()</c>. Can you make it go to position
          (0,0) or as close to it as possible?
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleTestGetSet {
              public static void main(String[] args) {
                  World world = new World(300, 300);
                  Turtle yertle = new Turtle(world);
                  System.out.println("Yertle is starting at: " + yertle.getXPos() + ", " + yertle.getYPos());
                  yertle.forward(100);
                  yertle.turn(90);
                  yertle.forward(50);
                  System.out.println("Yertle has ended up at: " + yertle.getXPos() + ", " + yertle.getYPos());
                  world.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleTestGetSet");
              }

              @Test
              public void test1() {
                  String orig =
                          "import java.awt.*;\n"
                              + "import java.util.*;\n\n"
                              + "public class TurtleTestGetSet\n"
                              + "{\n"
                              + "public static void main(String[] args)\n"
                              + "{\n"
                              + "World world = new World(300,300);\n"
                              + "Turtle yertle = new Turtle(world);\n"
                              + "System.out.println(\"Yertle is starting at: \" + yertle.getXPos() + \", \" +"
                              + " yertle.getYPos());\n"
                              + "yertle.forward(100);\n"
                              + "yertle.turn(90);\n"
                              + "yertle.forward(50);\n"
                              + "System.out.println(\"Yertle has ended up at: \" + yertle.getXPos() + \", \""
                              + " + yertle.getYPos());\n"
                              + "world.show(true);\n"
                              + "}\n"
                              + "}\n";
                  boolean passed = codeChanged(orig);
                  assertTrue(passed);
              }
          }
        </tests>

      </program>
    </activity>

    <activity label="TurtleArea">
      <statement>
        <p>
          Fix the errors in the code below so that it prints out the area of the
          space that the turtle occupies by multiplying its width and height.
          Remember that you have to do something with the values that the get
          methods return.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.lang.Math;
          import java.util.*;

          public class TurtleArea
          {
              public static void main(String[] args)
              {
                  World world = new World(300,300);
                  Turtle yertle = new Turtle(world);

                  int area;
                  yertle.getWidth() * getHeight;
                  System.out.println("Yertle's area is: ");
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleArea");
              }

              @Test
              public void test1() {
                  String actual = getMethodOutput("main");
                  String expected = "Yertle's area is: 270";
                  boolean passed = getResults(expected, actual, "Prints correct answer");
                  assertTrue(passed);
              }

              @Test
              public void test2() {
                  String code = getCode();
                  String target = ".getHeight()";

                  int num = countOccurences(code, target);

                  boolean passed = num >= 1;

                  getResults("1+", "" + num, "Calls to " + target, passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  String target = ".getWidth()";

                  int num = countOccurences(code, target);

                  boolean passed = num >= 1;

                  getResults("1+", "" + num, "Calls to " + target, passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-turtle-house">
    <title>Coding Challenge: Turtle House</title>

    <image source="Unit1-Using-Objects-and-Methods/Figures/houseWithWindows.png" width="36%">
      <shortdescription>simple house</shortdescription>
    </image>

    <p>
      This creative challenge is fun to do collaboratively in pairs. Design a
      house and have the turtle draw it with different colors below. Can you add
      windows and a door? Come up with your own house design as a team.
    </p>

    <p>
      To draw a window, you will need to call <c>penUp</c> and <c>moveTo</c> to
      walk the turtle into position without drawing, for example:
    </p>

    <program>
      t.penUp();
      t.moveTo(120,200);
      t.penDown();
    </program>

    <p>
      It may help to act out the code pretending you are the turtle. Remember
      that the angles you turn depend on which direction you are facing, and the
      turtle begins facing up. When planning your coordinates for the house,
      remember that the turtle starts at the center of the screen (150,150) and
      the top left corner is (0,0).
    </p>

    <project label="challenge-TurtleHouse">
      <statement>
        <p>
          Draw a Turtle House! Make sure you use forward, turn, penUp, penDown,
          moveTo methods as well as different colors. Have fun!
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">

        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleHouse {
              public static void main(String[] args) {
                  World world = new World(300, 300);
                  Turtle t = new Turtle(world);
                  // Use t to draw a house

                  // keep this line at the end of your code to show the drawing
                  world.show(true);
              }
          }
        </code>

        <tests>
          <![CDATA[
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper {
              public RunestoneTests() {
                  super("TurtleHouse");
              }

              @Test
              public void test2() {
                  String code = getCode();
                  int num = countOccurences(code, "moveTo(");

                  boolean passed = num >= 1;
                  passed = getResults("1 or more", "" + num, "Calls moveTo(...)", passed);
                  assertTrue(passed);
              }

              @Test
              public void test3() {
                  String code = getCode();
                  int num = countOccurences(code, ".penUp()");

                  boolean passed = num >= 1;
                  passed = getResults("1 or more", "" + num, "Calls penUp()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test4() {
                  String code = getCode();
                  int num = countOccurences(code, ".penDown(");

                  boolean passed = num >= 1;
                  passed = getResults("1 or more", "" + num, "Calls penDown()", passed);
                  assertTrue(passed);
              }

              @Test
              public void test5() {
                  String code = getCode();
                  int numTurns = countOccurences(code, ".turn");

                  boolean passed = numTurns >= 6;
                  passed = getResults("6 or more", "" + numTurns, "turns", passed);
                  assertTrue(passed);
              }

              @Test
              public void test6() {
                  String code = getCode();
                  int numForward = countOccurences(code, ".forward(");

                  boolean passed = numForward >= 6;
                  passed = getResults("6 or more", "" + numForward, "Calls to forward()", passed);
                  assertTrue(passed);
              }
          }
          ]]>
        </tests>

      </program>
    </project>
  </subsection>
</section>
