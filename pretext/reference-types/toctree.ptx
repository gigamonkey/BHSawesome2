<?xml version="1.0" encoding="utf-8"?>

<chapter xml:id="reference-types" xml:lang="en-US" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Reference types</title>

  <idx>reference type</idx>
  <introduction>
    <p>
      So far the data types we’ve focused on have been the three primitive data
      types <c>int</c>, <c>double</c>, and <c>boolean</c>. We’ve made a little
      bit of use of <c>String</c> for generating output and mentioned that it is
      <em>not</em> a primitive type but rather a <term>reference type</term>.
    </p>

    <p>
      But what is the difference between primitive and reference types? One way
      to describe the distinction is that primitive types are the things the
      computer actually knows about and reference types are defined by Java.
    </p>

    <p>
      For example, modern CPUs have instructions for doing arithmetic with
      thirty-two-bit integers and sixty-four-bit floating point numbers.
      Completely independent of Java or any other programming language, they
      have circuitry devoted to interpreting sets of thirty-two or sixty-four
      bits in a certain way so we can do math with them. (They also know about
      sixty-four-bit integers and thirty-two-bit floating point numbers. Java
      has types for those, <c>long</c> and <c>float</c>, but they are used less
      frequently than <c>int</c> and <c>double</c> and they aren’t on the AP
      exam.) Similarly, the CPU has instructions that map very directly to the
      logical notion of true and false represented by the <c>boolean</c> type.
    </p>

    <p>
      But anything beyond the handful of primitive types the computer inherently
      understands are represented in Java by reference types. Typically
      reference types represent more data than can fit in thirty-two or
      sixty-four bits; many can require an arbitrary amount of memory. For
      instance, a <c>String</c> can be short like <c>"foo"</c> but it can also
      be millions characters long, such as the complete text of <pubtitle>War
      and Peace</pubtitle>.
    </p>

    <p>
      To represent such arbitrarily large values we need to split the value into
      two parts which together make up an <term>object</term>. The actual
      data—the text of <pubtitle>War and Peace</pubtitle>—is called the
      <term>object data</term> and it lives somewhere in the computers memory.
      To get at the object data we need a special number, called a
      <term>reference</term>, that tells the CPU where in memory the object data
      lives. References fit into the thirty-two or sixty-four bit quantities the
      CPU can deal with and so they are what are assigned to variables and
      passed as arguments to methods.
    </p>

    <p>
      Most of the time we don’t have to distinguish between the “actual” object
      that lives in memory and the reference to it since in Java there’s no way
      to get at the object data except through the object’s reference. But there
      are some consequences of this split that we’ll explore in this unit. We’ll
      start with a deeper dive into the one reference type we’ve already used:
      <c>String</c>. Then Then we’ll look at writing classes to define own own
      reference types. And finally we’ll close out the unit with a discussion of
      what equality means when dealing with reference types.
    </p>
  </introduction>

  <xi:include href="./topic-3-3-anatomy-of-class.ptx" />
  <xi:include href="./topic-3-4-constructors.ptx" />
  <xi:include href="./topic-3-5-methods.ptx" />
  <xi:include href="./topic-1-14-calling-instance-methods.ptx" />
  <xi:include href="./equality.ptx" />
</chapter>
