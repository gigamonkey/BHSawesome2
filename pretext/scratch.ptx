<?xml version="1.0" encoding="UTF-8"?>

<section>
  <title>Cut from text elsewhere</title>

  <introduction>
    <p>
      Most of the methods we have used so far are <term>static methods</term>,
      which are also called <term>class methods</term>. These methods are
      associated with the class and include the keyword static in the method
      header. The main method is always static, which also means that there is
      only one copy of the method.
    </p>

    <p>
      Here is a template for a static method. In the <term>method header</term>,
      the keyword <term>static</term> is used before the <term>return
      type</term>. Up until now, we have used the keyword <term>void</term> as
      the return type for methods that do not return a value. We will now look
      at methods that calculate and return a value of a specific type.
    </p>

    <program language="java">
      <code>
        // static method header
        public static return-type method-name(parameters)
        {
            // method body
        }
      </code>
    </program>
  </introduction>

  <subsection>
    <title>Methods Outside the Class</title>
    <p>
      In the examples above, we called the methods by using the method name.
      However, if we call a method from a different class, we need to include
      its class name. For example, if the <c>square</c> method is in a class
      called <c>MathFunctions</c>, we would call it as
      <c>MathFunctions.square(3)</c>. Class methods are typically called using
      the class name along with the <term>dot operator (.)</term>. When the
      method call occurs in the defining class, the use of the class name is
      optional in the call.
    </p>

    <image source="Unit1-Using-Objects-and-Methods/Figures/pow.png" width="18%" alt="Pow!" />
    <p>
      In the next lesson, we will learn to use the methods in the <c>Math</c>
      class in Java and will need to call them with the class name <c>Math</c>.
      There is a method to compute the square of a number in the <c>Math</c>
      library, but it is called <c>pow</c> instead of square, and it takes 2
      arguments to return a number raised to the power of an exponent number.
      Here’s a quick preview of two of the methods in the Math class:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>Math.sqrt(double number)</c> : returns the square root of a given
            number
          </p>
        </li>

        <li>
          <p>
            <c>Math.pow(double base, double exponent)</c> : returns
            <m>base^{exponent}</m>, the value of base, the first argument,
            raised to the power of exponent, the second argument.
          </p>
        </li>
      </ul>
    </p>

    <p>Here is an example of how to use these methods:</p>
    <program language="java">
      <code>
double x = Math.pow(3, 2); // 3^2 is 9.0
double y = Math.sqrt(9); // the square root of 9 is 3.0
      </code>
    </program>
  </subsection>

  <subsection>
    <p>
      We can also use methods that we didn’t write. In fact we already have.
      <c>System.out.println</c> is a method provided by Java for emitting output
      to the screen. To use methods we didn’t write we just need to know the
      method signature and what they do.
    </p>

    <p>
      For example, the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
      class’s Javadocs</url> document the following method signatures for
      <c>println</c> that we use in <c>System.out.println()</c>:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>void println()</c> which has an empty parameter list with no
            parameters
          </p>
        </li>

        <li>
          <p>
            <c>void println(String x)</c> which will print out a <c>String</c>
            value
          </p>
        </li>

        <li>
          <p>
            <c>void println(int x)</c> which will print out an <c>int</c> value
          </p>
        </li>
      </ul>
    </p>

    <p>
      We can see from the <c>void</c> return type in these method signatures
      that these methods don’t return any value. That means we can’t use them in
      expressions to compute values. Instead they are called purely for their
      <term>side effects</term>, in this case printing something to the screen.
    </p>

    <p>
      We can call these methods with the appropriate arguments to print out the
      value we want. The <term>argument</term> is the actual value that is
      passed to the method when it is called. Here are the method calls that
      correspond to the method signatures above (We’ll discuss later what the
      <c>System.out</c> part of the call is for):
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>System.out.println();</c> // prints a newline
          </p>
        </li>

        <li>
          <p>
            <c>System.out.println("Hello World");</c> // prints a String
          </p>
        </li>

        <li>
          <p>
            <c>System.out.println(42);</c> // prints an int
          </p>
        </li>
      </ul>
    </p>

    <p>
      Compare the method signature of <c>println(String x)</c> with the method
      call <c>println("Hello World");</c> below. The method signature contains
      the method name and the parameter type and variable. The method call
      contains only the method name and the argument value. The argument must be
      compatible with the data type of the parameter in the method signature and
      is saved in the parameter variable when the method is called. If you want
      to be very precise the argument is the value and the parameter is the
      variable but many people use the terms interchangeably.
    </p>

    <figure align="center">
      <caption>Method Signature and Method Call</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/method-parts.png" width="89%" alt="Method Signature and Method Call" />
    </figure>

    <p>
      The <c>println</c> methods are also an example of something called
      <term>overloading</term> which is when multiple methods have the same name
      but different method signatures because their parameter lists are
      different. Java matches each method call with the complete signature of
      the method so it can tell which method to call based on the number and
      types of the argument. A call to <c>println()</c> calls the version with
      no parameters which just prints a newline; a call to
      <c>println("hello")</c> calls the version with a <c>String</c> parameter
      that prints string followed by a newline; and a call to <c>println(42)</c>
      calls the version that takes an <c>int</c> and prints it, also followed by
      a newline.
    </p>
  </subsection>

  <subsection>
    <p>
      If you took AP CSP or that used a block programming language like Snap!,
      you almost certainly learned about if blocks. Here’s a comparison of ifs
      in App Inventor blocks, AP CSP’s block code and pseudocode, and Java ifs.
    </p>

    <figure align="center">
      <caption>
        Comparison of App Inventor if block, AP CSP ifs, and Java if statements
      </caption>

      <image source="Unit2-Selection-and-Iteration/Figures/BlocksIfComparison.png" width="100%" />
    </figure>
  </subsection>

  <subsection xml:id="coding-challenge-adventure">
    <title>Coding Challenge: Adventure</title>
    <image source="Unit2-Selection-and-Iteration/Figures/adventure.jpg" width="36%" alt="Adventure map" />
    <p>
      One of the first games coded for early computers in the 1970s was called
      <url href="https://en.wikipedia.org/wiki/Colossal_Cave_Adventure"
      visual="https://en.wikipedia.org/wiki/Colossal_Cave_Adventure">Colossal
      Cave Adventure</url>. It was a text-based interactive fiction game where
      you had to make your way through an elaborate cave. The program only
      understood one word or phrase commands like north, south, enter, take,
      etc. You can try <url
      href="http://www.web-adventures.org/cgi-bin/webfrotz?s=Adventure"
      visual="http://www.web-adventures.org/cgi-bin/webfrotz?s=Adventure">playing
      adventure</url> recreated online following some of the commands in this
      <url href="https://adventuregamers.com/walkthrough/full/colossal-cave"
      visual="https://adventuregamers.com/walkthrough/full/colossal-cave">walkthrough</url>.
      Part of the challenge is finding the commands that the code will
      understand.
    </p>

    <p>
      In a game like Adventure, else if statements can be used to respond to
      commands from the user like n, s, e, w. Try the program below (or in an
      interactive input IDE like <url
      href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/54bfe3f4-f112-4062-8d7d-a033b2bf09b6#079f4341-137a-497f-b874-553ababd627a"
      visual="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/54bfe3f4-f112-4062-8d7d-a033b2bf09b6#079f4341-137a-497f-b874-553ababd627a">JuiceMind</url>
      or <url href="https://replit.com/@BerylHoffman/Adventure#Main.java"
      visual="https://replit.com/@BerylHoffman/Adventure#Main.java">replit</url>).
      This current adventure game asks the user whether they want to move n, s,
      e, or w, but right now only the north direction is coded. It leads to a
      new method called <c>forest()</c>.
    </p>

    <p>
      In the main method, add in <term>else if</term> statements to go in the
      directions of “s” for south, “e” for east, “w” for west, and an else
      statement that says “You can’t go in that direction”. Be creative and come
      up with different locations in each direction. Have each direction call a
      static method that you will write. The <c>forest()</c> and <c>sea()</c>
      methods are shown as examples for two of the diretions. You will need to
      change the input below the code to s or e or w and then run to test these
      branches. How many test-cases are needed to test all branches of your
      code? You can also connect locations to one another by calling their
      methods. If you have time, you can expand this game further with more
      nested if/else statements and come up with a different adventure location.
    </p>

    <project label="challenge-ElseIf-Adventure">
      <statement>
        <p>
          This is a text adventure game that lets the user move in 4 different
          directions. Right now, it only lets the user move north. Add in
          <term>else if</term> statements to go in the directions of "s" for
          south, "e" for east, "w" for west, and an else statement that says
          "You can't go in that direction". Be creative and come up with
          different locations in static methods below main for each direction.
          There are 5 TODO steps below.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
  import java.util.Scanner;

  public class Adventure
  {
      private static Scanner scan = new Scanner(System.in);

      public static void main(String[] args)
      {
          // TODO #1. Change the adventure text below, especially the ?'s.
          // Be creative!
          System.out.println("You are on an island surrounded by water.");
          System.out.println("There is a path to the forest to the north, "
                           + "the sea to the south, ? to the east, and ? to the west.");
          System.out.println("Which way do you want to go (n,e,s,w)?");
          String command = scan.next(); // use nextLine() in your own IDE
          if (command.equals("n"))
          {
              System.out.println("You go north.");
              forest();
          }
          // TODO #2: Add else-ifs for command equals s, e, or w,
          // calling a method you will write below for each location.
          // Add an else error message "You can't go in that direction!"
          // Change the input below the coding area to test these.




          System.out.println("End of adventure!");
          scan.close();
     }

    // TODO #3: Complete this method
    // north from main goes to the forest
    public static void forest()
    {
        System.out.println("You enter a dark forest and see ?");
        System.out.println("Do you want to walk e or w?");

        // Add more if/else-if statements for the next action
        //  and call your other methods to move to other locations
        String command = scan.next(); // use nextLine() in your own IDE
        if (command.equals("e"))
        {
            System.out.println("You move east and reach the sea");
            sea();
        }
    }

    // TODO #4: Complete this method
    // south from main or east from forest goes to the sea
    // (feel free to rename to another location of your choice)
    public static void sea()
    {
        // Print a description
        // Ask for input
        // Add more if/else-if statements for the next action
        // Move to different locations

    }

    // TODO #5:  Add at least 2 more static methods for 2 more locations

  }
        </code>
        <stdin>n e</stdin>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("Adventure");
    }

    @Test
    public void testIf()
    {
        String code = getCode();
        int num = countOccurences(code, "if");
        boolean passed = num &gt;= 5;

        getResults("5", "" + num, "Number of if statements", passed);
        assertTrue(passed);
    }

    @Test
    public void testElseIf()
    {
        String code = getCode();
        int elseif = countOccurences(code, "else if");
        boolean passed = elseif &gt;= 3;

        getResults("" + 3, "" + elseif, "Number of else if statements", passed);
        assertTrue(passed);
    }

    @Test
    public void testElse()
    {
        String code = getCode();
        int num = countOccurences(code, "else") - countOccurences(code, "else if");
        boolean passed = num &gt;= 1;

        getResults("1", "" + num, "Ending else statement", passed);
        assertTrue(passed);
    }
     @Test
      public void testMoreMethods()
      {
          String code = getCode();
          int num = countOccurences(code, "public static");
          boolean passed = num &gt;= 5;

          getResults("5", "" + num, "Number of public static methods", passed);
          assertTrue(passed);
      }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="relational-operators-practice-game">
    <title>Relational Operators Practice Game</title>
    <p>
      Try the game below to practice. Click on <term>Relationals</term>,
      evaluate the relational expression and click on None, All, or the numbers
      that make the expression true. Check on Compound for an added challenge.
      We encourage you to work in pairs and see how high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="boolean-game">
    <title>Boolean Game</title>
    <p>
      Try the game below written to practice Booleans. Click on
      <term>Booleans</term>, look at the color and number in the block and
      evaluate the boolean expression to choose true or false. Then, check on
      Compound for an added challenge. We encourage you to work in pairs and see
      how high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="review-practice-for-selection">
    <title>Review/Practice for Selection</title>
    <p>
      This lesson ends the section on selection. You can now do the following
      review and practice lessons at the end of the unit and College Board
      Progress Checks in the AP Classroom.
    </p>

    <p>
      <ul>
        <li>
          <url href="selection-summary.html" visual="selection-summary.html">Selection Summary</url>
        </li>

        <li>
          <url href="selection-practice-mixed-code.html" visual="selection-practice-mixed-code.html">Selection Practice Mixed Code</url>
        </li>

        <li>
          <url href="selection-practice-coding.html" visual="selection-practice-coding.html">Selection Practice Coding</url>
        </li>

        <li>
          <url href="Exercises-selection.html" visual="Exercises-selection.html">Exercises Selection</url>
        </li>

        <li>
          <url href="frq-game-score.html" visual="frq-game-score.html">FRQ Game Score</url>
        </li>

        <li>
          <url href="selection-more-practice-coding.html" visual="selection-more-practice-coding.html">Selection More Practice Coding</url>
        </li>

        <li>
          <url href="group-mod-practice.html" visual="group-mod-practice.html">Group Mod Practice</url>
        </li>

        <li>
          <url href="magpieindex.html" visual="magpieindex.html">Magpie Lab</url>
        </li>
      </ul>
    </p>
  </subsection>

  <introduction>
    <idx>De Morgan's Laws</idx>
    <idx>negation</idx>
    <idx>truth table</idx>
    <p>
      What if you heard a rumor about a senior at your high school? And then you
      heard that the rumor wasn’t true - it wasn’t a senior at your high school.
      Which part of “a senior at your high school” wasn’t true? Maybe they
      weren’t a senior? Or maybe they didn’t go to your high school? You could
      write this as a logic statement like below using negation (<c>!</c>) and
      the <term>and</term> (<c>&amp;&amp;</c>) operator since both parts have to
      be true for the whole statement to be true. (Thank you to Kevin Saxton
      from Kent School, CT for this example.)
    </p>

    <program language="java">
      <code>
!(a &amp;&amp; b)

a = "senior"
b = "at our high school"

// This means it is not true that (a) it is a senior
// and (b) someone at our high school.
      </code>
    </program>

    <p>
      In this lesson, you will learn about De Morgan’s Laws which simplify
      statements like this. We know that !(a senior at our high school) could
      mean !(a senior) or !(at our high school). Let’s learn more about De
      Morgan’s Laws.
    </p>
  </introduction>

  <subsection>
    <p>
      Often, you can simplify boolean expressions to create equivalent
      expressions. For example, applying De Morgan’s Laws to <c>!(x &lt; 3
      &amp;&amp; y &gt; 2)</c> yields <c>!(x &lt; 3) || !(y &gt; 2)</c> as seen
      in the figure below. This can then be simplified further by flipping the
      relational operators to remove the not. So, <c>!(x &lt; 3) || !(y &gt;
      2)</c> is simplified to <c>(x &gt;= 3 || y &lt;= 2)</c> where the
      relational operators are flipped and the negation is removed. These two
      simplification steps are seen below.
    </p>

    <figure align="center">
      <caption>An example boolean expression simplified</caption>
      <image source="Unit2-Selection-and-Iteration/Figures/demorganex.png" width="71%" />
    </figure>
  </subsection>

  <subsection label="from-loops">
    <image source="Unit2-Selection-and-Iteration/Figures/loops.png" width="22%" />

    <p>
      When you play a song, you can set it to loop, which means that when it
      reaches the end it starts over at the beginning. A <term>loop</term> in
      programming, also called <term>iteration</term> or
      <term>repetition</term>, is a way to repeat one or more statements. If you
      didn’t have loops to allow you to repeat code, your programs would get
      very long very quickly! Using a sequence of code, selection (ifs), and
      repetition (loops), the <term>control structures</term> in programming,
      you can construct an algorithm to solve almost any programming problem!
    </p>

    <p>
      Java doesn’t require your code to be correctly indented (code moved to the
      right a few spaces) to make it clear what statements are part of the body
      of the loop, but it is standard practice to do so.
    </p>

    <note>
      <p>
        On the free response part of the AP exam, the reader will use the
        indention when determining the meaning of your code, even if you forget
        the open or close curly brace.
      </p>
    </note>

    <figure align="center">
      <caption>Comparing App Inventor and Java for loops</caption>

      <image source="Unit2-Selection-and-Iteration/Figures/loopAppInv.png" width="100%" />
    </figure>
    <p>
      If you took AP CSP with a block programming language like App Inventor,
      you may have used a loop block like below that looks very similar to Java
      <c>while</c> loops (or you may have used a <c>for</c> loop which will be
      covered in the next lesson). Almost every programming language has a
      <c>while</c> loop.
    </p>

    <figure>
      <caption>
        Comparing App Inventor while block and Java <c>while</c> loops
      </caption>

      <image source="Unit2-Selection-and-Iteration/Figures/whileInAppInventor.png" width="100%" />
    </figure>


  </subsection>

  <!-- moved out because I have the whole set of primes bootups. -->

  <subsection xml:id="divisibility">
    <title>Divisibility</title>

    <p>
      To determine if an integer is evenly divisible by another integer, you can
      use the remainder operator <c>%</c>. If you divide two numbers and there
      is no remainder, then the first number is evenly divisible by the second
      number. The remainder operator is often used to check if a number is even
      or odd: if <c>num % 2 == 0</c> is true, then <c>num</c> is even. But it
      can be used to check if any number is divisible by another. For example,
      10 is evenly divisible by 5 because 10 divided by 5 is 2 with no (0)
      remainder.
    </p>

    <program language="java">
      <code>
        int num1 = 10;
        int num2 = 5;
        if (num1 % num2 == 0)
        {
            System.out.println(num1 + " is evenly divisible by " + num2);
        }
        else
        {
            System.out.println(num1 + " is not evenly divisible by " + num2);
        }
      </code>
    </program>

    <p>
      The selection statement above can be put in a loop to determine if a
      number is divisible by a range of numbers. For example, you can determine
      if a number is prime by checking if it is divisible by any number between
      2 and n-1 (or even the square root of the number since multiples of
      numbers repeat after the square root). Remember that a prime number is a
      number that is only divisible by 1 and itself, so if you find any other
      divisor, the number is not prime.
    </p>

    <activity label="isPrimeLoop">
      <statement>
        <p>
          Complete the isPrime method below to determine if a number n is prime
          by checking if it is evenly divisible by any number between 2 and n-1
          or the square root of n.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class PrimeNumbers
          {
              // isPrime checks whether n is a prime number
              public static boolean isPrime(int n)
              {
                  // Add a loop from 2 to n-1 or Math.sqrt(n)
                  //   if n is divisible by the loop variable i
                  //        return false



                  // if no divisor found after loop, return true
                  return true;
              }


              public static void main(String[] args)
              {
                  System.out.println("Is 4 prime? " + isPrime(4));
                  System.out.println("Is 5 prime? " + isPrime(5));
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("PrimeNumbers");
              }

              @Test
              public void test1() throws IOException
              {
                  String target = "for";
                  boolean passed = checkCodeContains("for loop", target);
                  assertTrue(passed);
              }

               @Test
              public void testMain() throws IOException
              {
                  String expected = "Is 4 prime? false\nIs 5 prime? true";
                  String output = getMethodOutput("main");
                  boolean passed = getResults(expected, output, "Checking main output");
                  assertTrue(passed);
              }

             @Test
             public void testCall() throws IOException
             {
                 Object[] args = {9};
                 String output = getMethodOutput("isPrime", args);
                 String expect = "false";

                 boolean passed =
                         getResults(
                                 expect,
                                 output,
                                 "isPrime(9)"
                                 );
                 assertTrue(passed);
             }

              @Test
             public void testBool() throws IOException
             {
                 String target = "n % i == 0";
                 boolean passed = checkCodeContains(target + " test", target);
                 assertTrue(passed);
             }
          }
        </tests>
      </program>
    </activity>
  </subsection>

    <subsection xml:id="coding-challenge-prime-number-finder">
    <title>Coding Challenge: Prime Number Finder</title>

    <p>
      Prime numbers (numbers that are only divisible by 1 and themselves) are
      used every day in encryption algorithms that safely transmit your username
      and password whenever you login on the internet. Two large prime numbers
      are multiplied together to generate partial keys for encoding and decoding
      in encryption algorithms. If you have the key, you can use it to divide a
      large number that represents something encrypted to decode it, but if you
      don’t have the key, it’s very hard to guess the prime factors of a large
      number to decode it. Small prime numbers can be easily guessed, so
      encryption only uses very large prime numbers with hundreds of digits.
      Finding these large prime numbers is a very hard problem. As numbers grow,
      primes become less frequent, due to the increasing likelihood of
      divisibility by smaller primes. If you’re curious about the use of prime
      numbers in encryption, watch this <url
      href="https://www.youtube.com/watch?v=M7kEpw1tn50"
      visual="https://www.youtube.com/watch?v=M7kEpw1tn50">Numberphile
      video</url>.
    </p>

    <p>In the challenge below,</p>

    <p>
      <ol marker="1">
        <li>
          <p>
            First, copy your <c>isPrime</c> method from the exercise above to
            check if a number is prime.
          </p>
        </li>

        <li>
          <p>
            Then, write a method <c>findPrimes</c> that takes two integers as
            arguments and prints the prime numbers between them. It should
            return a count of the prime numbers found.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-find-primes">
      <statement>
        <p>
          Copy your isPrime method from the previous exercise and write a method
          findPrimes that takes two integers as arguments and prints the prime
          numbers between them. It should return a count of the prime numbers
          found.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
          public class FindPrimeNumbers
          {
              // isPrime checks whether n is a prime number
              public static boolean isPrime(int n)
              {
                  // 1. Copy your isPrime method here
                  // It should have a loop from 2 to n-1 or Math.sqrt(n)
                  //   if n is divisible by the loop variable i
                  //        return false



                  // if no divisor found after loop, return true
                  return true;
              }

              // 2. Complete findPrimes to print and return
              // the number of prime numbers between num1 and num2
              public static int findPrimes(int num1, int num2)
              {
                  int count = 0;
                  // Add a loop from num1 to num2 to check
                  // if each number is prime using isPrime
                  // If it is prime, print it and increment count


                  return count;
              }

              public static void main(String[] args)
              {
                  System.out.println("There are " + findPrimes(2, 100) + " prime numbers between 2 and 100.");
                  // You may see the grader's test runs in the output.
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("FindPrimeNumbers");
              }

              @Test
              public void test1() throws IOException
              {
                  String code = getCode();
                  String target = "for (int * = #; * ? *; *~)";

                  int num = countOccurencesRegex(code, target);

                  boolean passed = num == 2;

                  getResults("2", "" + num, "Each method should have a for loop", passed);
                  assertTrue(passed);
              }

              @Test
              public void testMain() throws IOException
              {
                  String expected = "There are 25 prime numbers between 2 and 100.";
                  String output = getMethodOutput("main");
                  boolean passed = getResults(expected, output, "Checking main output");
                  assertTrue(passed);
              }

             @Test
             public void testCall() throws IOException
             {
                 Object[] args = {10000,10100};
                 String output = getMethodOutput("findPrimes", args);
                 String expect = "11";

                 boolean passed =
                         getResults(
                                 expect,
                                 output,
                                 "findPrimes(10000,10100)"
                                 );
                 assertTrue(passed);
             }

              @Test
             public void testBool() throws IOException
             {
                 String target = "(isPrime(";
                 boolean passed = checkCodeContains("call to isPrime", target);
                 assertTrue(passed);
             }
          }
        </tests>
      </program>
    </project>
  </subsection>

    <subsection xml:id="frequency">
    <title>Frequency</title>

    <p>
      You can use a counter variable inside a loop to determine the frequency
      with which a specific criteria is met. For example, you can count the
      number of even numbers in a sequence of numbers. You can use a loop and
      increment the counter each time an even number is found like below:
    </p>

    <program language="java">
      <code>
        <![CDATA[

        int count = 0;
        for (int i = 0; i < 100; i++)
        {
            if (i % 2 == 0)
            {
                count++;
            }
        }
        System.out.println("There are " + count + " even numbers from 1 to 100.");

        ]]>
      </code>
    </program>

    </subsection>

    <subsection>
          <activity label="chooseType3">
      <statement>
        <p>What type should you use to hold the first name of a person?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int</p>
          </statement>

          <feedback>
            <p>
              People don't usually have whole numbers like 7 as their first
              name.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>double</p>
          </statement>

          <feedback>
            <p>
              People don't usually have decimal numbers like 3.5 as their first
              name.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>boolean</p>
          </statement>

          <feedback>
            <p>
              This could only be used if the name was true or false. People
              don't usually have those as first names.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>String</p>
          </statement>

          <feedback>
            <p>
              Strings hold sequences of characters like you have in a person's
              name.
            </p>
          </feedback>
        </choice>
      </choices>
          </activity>
    </subsection>

    <subsection>
      <title>String stuff</title>
      <idx>toString</idx>
      <idx><h>Object</h><h>toString</h></idx>
      <p>
        You can even add other items to a <c>String</c> using the <c>+</c>
        operator. Primitive values like <c>int</c> and <c>boolean</c> will be
        converted to a <c>String</c> automatically when concatenated with a
        <c>String</c>. Any other objects concatenated with a <c>String</c> will
        be converted to <c>String</c> using their <c>toString</c> method. All
        objects inherit a <c>toString</c> method from the <c>Object</c> class
        that returns a <c>String</c> representation of the object and many
        classes <term>override</term> it to produce a useful human-readable
        value. Method overriding occurs when a public method in a subclass has
        the same method signature as a public method in the superclass, but the
        behavior of the method is specific to the subclass (overriding toString
        is no longer covered on the AP CSA exam).
      </p>
    </subsection>

  <subsection>
    <title>String Methods Game</title>

    <p>
      Try the game below written by AP CSA teacher Chandan Sarkar. Click on
      <term>Strings</term> and then on the letters that would be the result of
      the string method calls. We encourage you to work in pairs and see how
      high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="progresscheck-u1-part3">
    <title>Review/Practice for Unit 1 Part 3 on Using Objects</title>

    <p>
      This lesson ends the section on Unit 1 part 3 on Using Objects. You can
      now do the following review and practice lessons at the end of the unit
      and College Board Progress Check for Unit 1 Part 3 in the AP Classroom.
      Please do the practice test on objects and the FRQ practice below before
      you do the AP Classroom Progress Check for part 3.
    </p>

    <p>
      <ul>
        <li>
          <url href="unit1b-summary.html" visual="unit1b-summary.html">Unit 1b Summary</url>
        </li>

        <li>
          <url href="unit1b-practice-mixed-code.html" visual="unit1b-practice-mixed-code.html">Unit 1b Practice Mixed Code</url>
        </li>

        <li>
          <url href="unit1b-practice-coding.html" visual="unit1b-practice-coding.html">Unit 1b Practice Coding</url>
        </li>

        <li>
          <url href="Exercises-objects.html" visual="Exercises-objects.html">Exercises on Objects</url>
        </li>

        <li>
          <url href="practice-test-objects.html" visual="practice-test-objects.html">Practice Test on Objects</url>
        </li>

        <li>
          <url href="JavaSwingGUIs.html" visual="JavaSwingGUIs.html">Optional Java Swing GUIs</url>
        </li>

        <li>
          <url href="frq-practice.html" visual="frq-practice.html">Unit 1 FRQ Practice</url>
        </li>
      </ul>
    </p>
  </subsection>


</section>
