<?xml version="1.0" encoding="utf-8"?>

<section>
  <title>Cut from text elsewhere</title>

  <introduction>
    <p>
      Most of the methods we have used so far are <term>static methods</term>,
      which are also called <term>class methods</term>. These methods are
      associated with the class and include the keyword static in the method
      header. The main method is always static, which also means that there is
      only one copy of the method.
    </p>

    <p>
      Here is a template for a static method. In the <term>method header</term>,
      the keyword <term>static</term> is used before the <term>return
      type</term>. Up until now, we have used the keyword <term>void</term> as
      the return type for methods that do not return a value. We will now look
      at methods that calculate and return a value of a specific type.
    </p>

    <program>
      // static method header
      public static return-type method-name(parameters)
      {
          // method body
      }
    </program>
  </introduction>

  <subsection>
    <title>Methods Outside the Class</title>

    <p>
      In the examples above, we called the methods by using the method name.
      However, if we call a method from a different class, we need to include
      its class name. For example, if the <c>square</c> method is in a class
      called <c>MathFunctions</c>, we would call it as
      <c>MathFunctions.square(3)</c>. Class methods are typically called using
      the class name along with the <term>dot operator (.)</term>. When the
      method call occurs in the defining class, the use of the class name is
      optional in the call.
    </p>

    <image source="Unit1-Using-Objects-and-Methods/Figures/pow.png" width="18%" alt="Pow!" />
    <p>
      In the next lesson, we will learn to use the methods in the <c>Math</c>
      class in Java and will need to call them with the class name <c>Math</c>.
      There is a method to compute the square of a number in the <c>Math</c>
      library, but it is called <c>pow</c> instead of square, and it takes 2
      arguments to return a number raised to the power of an exponent number.
      Here’s a quick preview of two of the methods in the Math class:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>Math.sqrt(double number)</c> : returns the square root of a given
            number
          </p>
        </li>

        <li>
          <p>
            <c>Math.pow(double base, double exponent)</c> : returns
            <m>base^{exponent}</m>, the value of base, the first argument,
            raised to the power of exponent, the second argument.
          </p>
        </li>
      </ul>
    </p>

    <p>Here is an example of how to use these methods:</p>

    <program>
      double x = Math.pow(3, 2); // 3^2 is 9.0
      double y = Math.sqrt(9); // the square root of 9 is 3.0
    </program>
  </subsection>

  <subsection>
    <p>
      We can also use methods that we didn’t write. In fact we already have.
      <c>System.out.println</c> is a method provided by Java for emitting output
      to the screen. To use methods we didn’t write we just need to know the
      method signature and what they do.
    </p>

    <p>
      For example, the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
      class’s Javadocs</url> document the following method signatures for
      <c>println</c> that we use in <c>System.out.println()</c>:
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>void println()</c> which has an empty parameter list with no
            parameters
          </p>
        </li>

        <li>
          <p>
            <c>void println(String x)</c> which will print out a <c>String</c>
            value
          </p>
        </li>

        <li>
          <p>
            <c>void println(int x)</c> which will print out an <c>int</c> value
          </p>
        </li>
      </ul>
    </p>

    <p>
      We can see from the <c>void</c> return type in these method signatures
      that these methods don’t return any value. That means we can’t use them in
      expressions to compute values. Instead they are called purely for their
      <term>side effects</term>, in this case printing something to the screen.
    </p>

    <p>
      We can call these methods with the appropriate arguments to print out the
      value we want. The <term>argument</term> is the actual value that is
      passed to the method when it is called. Here are the method calls that
      correspond to the method signatures above (We’ll discuss later what the
      <c>System.out</c> part of the call is for):
    </p>

    <p>
      <ul>
        <li>
          <p><c>System.out.println();</c> // prints a newline</p>
        </li>

        <li>
          <p><c>System.out.println("Hello World");</c> // prints a String</p>
        </li>

        <li>
          <p><c>System.out.println(42);</c> // prints an int</p>
        </li>
      </ul>
    </p>

    <p>
      Compare the method signature of <c>println(String x)</c> with the method
      call <c>println("Hello World");</c> below. The method signature contains
      the method name and the parameter type and variable. The method call
      contains only the method name and the argument value. The argument must be
      compatible with the data type of the parameter in the method signature and
      is saved in the parameter variable when the method is called. If you want
      to be very precise the argument is the value and the parameter is the
      variable but many people use the terms interchangeably.
    </p>

    <figure align="center">
      <caption>Method Signature and Method Call</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/method-parts.png" width="89%" alt="Method Signature and Method Call" />
    </figure>

    <p>
      The <c>println</c> methods are also an example of something called
      <term>overloading</term> which is when multiple methods have the same name
      but different method signatures because their parameter lists are
      different. Java matches each method call with the complete signature of
      the method so it can tell which method to call based on the number and
      types of the argument. A call to <c>println()</c> calls the version with
      no parameters which just prints a newline; a call to
      <c>println("hello")</c> calls the version with a <c>String</c> parameter
      that prints string followed by a newline; and a call to <c>println(42)</c>
      calls the version that takes an <c>int</c> and prints it, also followed by
      a newline.
    </p>
  </subsection>

  <subsection>
    <p>
      If you took AP CSP or that used a block programming language like Snap!,
      you almost certainly learned about if blocks. Here’s a comparison of ifs
      in App Inventor blocks, AP CSP’s block code and pseudocode, and Java ifs.
    </p>

    <figure align="center">
      <caption>
        Comparison of App Inventor if block, AP CSP ifs, and Java if statements
      </caption>

      <image source="Unit2-Selection-and-Iteration/Figures/BlocksIfComparison.png" width="100%" />
    </figure>
  </subsection>

  <subsection xml:id="coding-challenge-adventure">
    <title>Coding Challenge: Adventure</title>

    <image source="Unit2-Selection-and-Iteration/Figures/adventure.jpg" width="36%" alt="Adventure map" />
    <p>
      One of the first games coded for early computers in the 1970s was called
      <url href="https://en.wikipedia.org/wiki/Colossal_Cave_Adventure">Colossal
      Cave Adventure</url>. It was a text-based interactive fiction game where
      you had to make your way through an elaborate cave. The program only
      understood one word or phrase commands like north, south, enter, take,
      etc. You can try <url
      href="http://www.web-adventures.org/cgi-bin/webfrotz?s=Adventure">playing
      adventure</url> recreated online following some of the commands in this
      <url
      href="https://adventuregamers.com/walkthrough/full/colossal-cave">walkthrough</url>.
      Part of the challenge is finding the commands that the code will
      understand.
    </p>

    <p>
      In a game like Adventure, else if statements can be used to respond to
      commands from the user like n, s, e, w. Try the program below (or in an
      interactive input IDE like <url
      href="https://play.juicemind.com/dashboard/teams/Mk2wWMTqPkekcxTDWqRn/item/54bfe3f4-f112-4062-8d7d-a033b2bf09b6#079f4341-137a-497f-b874-553ababd627a">JuiceMind</url>
      or <url
      href="https://replit.com/@BerylHoffman/Adventure#Main.java">replit</url>).
      This current adventure game asks the user whether they want to move n, s,
      e, or w, but right now only the north direction is coded. It leads to a
      new method called <c>forest()</c>.
    </p>

    <p>
      In the main method, add in <term>else if</term> statements to go in the
      directions of “s” for south, “e” for east, “w” for west, and an else
      statement that says “You can’t go in that direction”. Be creative and come
      up with different locations in each direction. Have each direction call a
      static method that you will write. The <c>forest()</c> and <c>sea()</c>
      methods are shown as examples for two of the diretions. You will need to
      change the input below the code to s or e or w and then run to test these
      branches. How many test-cases are needed to test all branches of your
      code? You can also connect locations to one another by calling their
      methods. If you have time, you can expand this game further with more
      nested if/else statements and come up with a different adventure location.
    </p>

    <project label="challenge-ElseIf-Adventure">
      <statement>
        <p>
          This is a text adventure game that lets the user move in 4 different
          directions. Right now, it only lets the user move north. Add in
          <term>else if</term> statements to go in the directions of "s" for
          south, "e" for east, "w" for west, and an else statement that says
          "You can't go in that direction". Be creative and come up with
          different locations in static methods below main for each direction.
          There are 5 TODO steps below.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          import java.util.Scanner;

          public class Adventure
          {
              private static Scanner scan = new Scanner(System.in);

              public static void main(String[] args)
              {
                  // TODO #1. Change the adventure text below, especially the ?'s.
                  // Be creative!
                  System.out.println("You are on an island surrounded by water.");
                  System.out.println("There is a path to the forest to the north, "
                                   + "the sea to the south, ? to the east, and ? to the west.");
                  System.out.println("Which way do you want to go (n,e,s,w)?");
                  String command = scan.next(); // use nextLine() in your own IDE
                  if (command.equals("n"))
                  {
                      System.out.println("You go north.");
                      forest();
                  }
                  // TODO #2: Add else-ifs for command equals s, e, or w,
                  // calling a method you will write below for each location.
                  // Add an else error message "You can't go in that direction!"
                  // Change the input below the coding area to test these.




                  System.out.println("End of adventure!");
                  scan.close();
             }

            // TODO #3: Complete this method
            // north from main goes to the forest
            public static void forest()
            {
                System.out.println("You enter a dark forest and see ?");
                System.out.println("Do you want to walk e or w?");

                // Add more if/else-if statements for the next action
                //  and call your other methods to move to other locations
                String command = scan.next(); // use nextLine() in your own IDE
                if (command.equals("e"))
                {
                    System.out.println("You move east and reach the sea");
                    sea();
                }
            }

            // TODO #4: Complete this method
            // south from main or east from forest goes to the sea
            // (feel free to rename to another location of your choice)
            public static void sea()
            {
                // Print a description
                // Ask for input
                // Add more if/else-if statements for the next action
                // Move to different locations

            }

            // TODO #5:  Add at least 2 more static methods for 2 more locations

          }
        </code>

        <stdin>
          n e
        </stdin>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("Adventure");
              }

              @Test
              public void testIf()
              {
                  String code = getCode();
                  int num = countOccurences(code, "if");
                  boolean passed = num >= 5;

                  getResults("5", "" + num, "Number of if statements", passed);
                  assertTrue(passed);
              }

              @Test
              public void testElseIf()
              {
                  String code = getCode();
                  int elseif = countOccurences(code, "else if");
                  boolean passed = elseif >= 3;

                  getResults("" + 3, "" + elseif, "Number of else if statements", passed);
                  assertTrue(passed);
              }

              @Test
              public void testElse()
              {
                  String code = getCode();
                  int num = countOccurences(code, "else") - countOccurences(code, "else if");
                  boolean passed = num >= 1;

                  getResults("1", "" + num, "Ending else statement", passed);
                  assertTrue(passed);
              }
               @Test
                public void testMoreMethods()
                {
                    String code = getCode();
                    int num = countOccurences(code, "public static");
                    boolean passed = num >= 5;

                    getResults("5", "" + num, "Number of public static methods", passed);
                    assertTrue(passed);
                }
          }

          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="relational-operators-practice-game">
    <title>Relational Operators Practice Game</title>

    <p>
      Try the game below to practice. Click on <term>Relationals</term>,
      evaluate the relational expression and click on None, All, or the numbers
      that make the expression true. Check on Compound for an added challenge.
      We encourage you to work in pairs and see how high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="boolean-game">
    <title>Boolean Game</title>

    <p>
      Try the game below written to practice Booleans. Click on
      <term>Booleans</term>, look at the color and number in the block and
      evaluate the boolean expression to choose true or false. Then, check on
      Compound for an added challenge. We encourage you to work in pairs and see
      how high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="review-practice-for-selection">
    <title>Review/Practice for Selection</title>

    <p>
      This lesson ends the section on selection. You can now do the following
      review and practice lessons at the end of the unit and College Board
      Progress Checks in the AP Classroom.
    </p>

    <p>
      <ul>
        <li><url href="selection-summary.html">Selection Summary</url></li>

        <li>
          <url href="selection-practice-mixed-code.html">Selection Practice Mixed Code</url>
        </li>

        <li>
          <url href="selection-practice-coding.html">Selection Practice Coding</url>
        </li>

        <li><url href="Exercises-selection.html">Exercises Selection</url></li>

        <li><url href="frq-game-score.html">FRQ Game Score</url></li>

        <li>
          <url href="selection-more-practice-coding.html">Selection More Practice Coding</url>
        </li>

        <li><url href="group-mod-practice.html">Group Mod Practice</url></li>

        <li><url href="magpieindex.html">Magpie Lab</url></li>
      </ul>
    </p>
  </subsection>

  <introduction>
    <idx>De Morgan's Laws</idx>
    <idx>negation</idx>
    <idx>truth table</idx>
    <p>
      What if you heard a rumor about a senior at your high school? And then you
      heard that the rumor wasn’t true - it wasn’t a senior at your high school.
      Which part of “a senior at your high school” wasn’t true? Maybe they
      weren’t a senior? Or maybe they didn’t go to your high school? You could
      write this as a logic statement like below using negation (<c>!</c>) and
      the <term>and</term> (<c>&amp;&amp;</c>) operator since both parts have to
      be true for the whole statement to be true. (Thank you to Kevin Saxton
      from Kent School, CT for this example.)
    </p>

    <program>
      <![CDATA[

      !(a && b)

      a = "senior"
      b = "at our high school"

      // This means it is not true that (a) it is a senior
      // and (b) someone at our high school.

      ]]>
    </program>

    <p>
      In this lesson, you will learn about De Morgan’s Laws which simplify
      statements like this. We know that !(a senior at our high school) could
      mean !(a senior) or !(at our high school). Let’s learn more about De
      Morgan’s Laws.
    </p>
  </introduction>

  <subsection>
    <p>
      Often, you can simplify boolean expressions to create equivalent
      expressions. For example, applying De Morgan’s Laws to <c>!(x &lt; 3
      &amp;&amp; y &gt; 2)</c> yields <c>!(x &lt; 3) || !(y &gt; 2)</c> as seen
      in the figure below. This can then be simplified further by flipping the
      relational operators to remove the not. So, <c>!(x &lt; 3) || !(y &gt;
      2)</c> is simplified to <c>(x &gt;= 3 || y &lt;= 2)</c> where the
      relational operators are flipped and the negation is removed. These two
      simplification steps are seen below.
    </p>

    <figure align="center">
      <caption>An example boolean expression simplified</caption>

      <image source="Unit2-Selection-and-Iteration/Figures/demorganex.png" width="71%" />
    </figure>
  </subsection>

  <subsection label="from-loops">
    <image source="Unit2-Selection-and-Iteration/Figures/loops.png" width="22%" />
    <p>
      When you play a song, you can set it to loop, which means that when it
      reaches the end it starts over at the beginning. A <term>loop</term> in
      programming, also called <term>iteration</term> or
      <term>repetition</term>, is a way to repeat one or more statements. If you
      didn’t have loops to allow you to repeat code, your programs would get
      very long very quickly! Using a sequence of code, selection (ifs), and
      repetition (loops), the <term>control structures</term> in programming,
      you can construct an algorithm to solve almost any programming problem!
    </p>

    <p>
      Java doesn’t require your code to be correctly indented (code moved to the
      right a few spaces) to make it clear what statements are part of the body
      of the loop, but it is standard practice to do so.
    </p>

    <note>
      <p>
        On the free response part of the AP exam, the reader will use the
        indention when determining the meaning of your code, even if you forget
        the open or close curly brace.
      </p>
    </note>

    <figure align="center">
      <caption>Comparing App Inventor and Java for loops</caption>

      <image source="Unit2-Selection-and-Iteration/Figures/loopAppInv.png" width="100%" />
    </figure>

    <p>
      If you took AP CSP with a block programming language like App Inventor,
      you may have used a loop block like below that looks very similar to Java
      <c>while</c> loops (or you may have used a <c>for</c> loop which will be
      covered in the next lesson). Almost every programming language has a
      <c>while</c> loop.
    </p>

    <figure>
      <caption>
        Comparing App Inventor while block and Java <c>while</c> loops
      </caption>

      <image source="Unit2-Selection-and-Iteration/Figures/whileInAppInventor.png" width="100%" />
    </figure>
  </subsection>

  <subsection>
    <title>Loop Analysis Game</title>

    <p>
      Try the game below to practice loop analysis. Click on <term>Loops</term>
      and click on the number of times the loop runs. For an added challenge,
      try the check boxes for Backwards, Do While, and Nested. We encourage you
      to work in pairs and see how high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="review-practice-for-loops">
    <title>Review/Practice for Loops</title>

    <p>
      This lesson ends the section on loops. You can now do the following review
      and practice lessons at the end of the unit and College Board Progress
      Checks in the AP Classroom.
    </p>

    <p>
      <ul>
        <li><url href="loops-summary.html">Loops Summary</url></li>

        <li>
          <url href="loops-practice-mixed-code.html">Loops Practice Mixed Code</url>
        </li>

        <li>
          <url href="loops-practice-mixed-code-toggle.html">Loops Practice Mixed Code Toggle</url>
        </li>

        <li>
          <url href="loops-practice-coding.html">Loops Practice Coding</url>
        </li>

        <li>
          <url href="Exercises-loops.html">Multiple-Choice Exercises for Loops</url>
        </li>

        <li><url href="unit2-test.html">Unit 2 Test</url></li>

        <li><url href="FRQmessagebuilder.html">FRQ Calendar</url></li>

        <li><url href="FRQcalendar.html">FRQ Calendar</url></li>

        <li><url href="FRQselfDivisorA.html">FRQ Self Divisor</url></li>

        <li><url href="FRQstringScrambleA.html">FRQ String Scramble</url></li>

        <li><url href="ConsumerReviewLab.html">Consumer Review Lab</url></li>
      </ul>
    </p>
  </subsection>
<!-- moved out because I have the whole set of primes bootups. -->
  <subsection xml:id="divisibility">
    <title>Divisibility</title>

    <p>
      To determine if an integer is evenly divisible by another integer, you can
      use the remainder operator <c>%</c>. If you divide two numbers and there
      is no remainder, then the first number is evenly divisible by the second
      number. The remainder operator is often used to check if a number is even
      or odd: if <c>num % 2 == 0</c> is true, then <c>num</c> is even. But it
      can be used to check if any number is divisible by another. For example,
      10 is evenly divisible by 5 because 10 divided by 5 is 2 with no (0)
      remainder.
    </p>

    <program>
      int num1 = 10;
      int num2 = 5;
      if (num1 % num2 == 0)
      {
          System.out.println(num1 + " is evenly divisible by " + num2);
      }
      else
      {
          System.out.println(num1 + " is not evenly divisible by " + num2);
      }
    </program>

    <p>
      The selection statement above can be put in a loop to determine if a
      number is divisible by a range of numbers. For example, you can determine
      if a number is prime by checking if it is divisible by any number between
      2 and n-1 (or even the square root of the number since multiples of
      numbers repeat after the square root). Remember that a prime number is a
      number that is only divisible by 1 and itself, so if you find any other
      divisor, the number is not prime.
    </p>

    <activity label="isPrimeLoop">
      <statement>
        <p>
          Complete the isPrime method below to determine if a number n is prime
          by checking if it is evenly divisible by any number between 2 and n-1
          or the square root of n.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class PrimeNumbers
          {
              // isPrime checks whether n is a prime number
              public static boolean isPrime(int n)
              {
                  // Add a loop from 2 to n-1 or Math.sqrt(n)
                  //   if n is divisible by the loop variable i
                  //        return false



                  // if no divisor found after loop, return true
                  return true;
              }


              public static void main(String[] args)
              {
                  System.out.println("Is 4 prime? " + isPrime(4));
                  System.out.println("Is 5 prime? " + isPrime(5));
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("PrimeNumbers");
              }

              @Test
              public void test1() throws IOException
              {
                  String target = "for";
                  boolean passed = checkCodeContains("for loop", target);
                  assertTrue(passed);
              }

               @Test
              public void testMain() throws IOException
              {
                  String expected = "Is 4 prime? false\nIs 5 prime? true";
                  String output = getMethodOutput("main");
                  boolean passed = getResults(expected, output, "Checking main output");
                  assertTrue(passed);
              }

             @Test
             public void testCall() throws IOException
             {
                 Object[] args = {9};
                 String output = getMethodOutput("isPrime", args);
                 String expect = "false";

                 boolean passed =
                         getResults(
                                 expect,
                                 output,
                                 "isPrime(9)"
                                 );
                 assertTrue(passed);
             }

              @Test
             public void testBool() throws IOException
             {
                 String target = "n % i == 0";
                 boolean passed = checkCodeContains(target + " test", target);
                 assertTrue(passed);
             }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-prime-number-finder">
    <title>Coding Challenge: Prime Number Finder</title>

    <p>
      Prime numbers (numbers that are only divisible by 1 and themselves) are
      used every day in encryption algorithms that safely transmit your username
      and password whenever you login on the internet. Two large prime numbers
      are multiplied together to generate partial keys for encoding and decoding
      in encryption algorithms. If you have the key, you can use it to divide a
      large number that represents something encrypted to decode it, but if you
      don’t have the key, it’s very hard to guess the prime factors of a large
      number to decode it. Small prime numbers can be easily guessed, so
      encryption only uses very large prime numbers with hundreds of digits.
      Finding these large prime numbers is a very hard problem. As numbers grow,
      primes become less frequent, due to the increasing likelihood of
      divisibility by smaller primes. If you’re curious about the use of prime
      numbers in encryption, watch this <url
      href="https://www.youtube.com/watch?v=M7kEpw1tn50">Numberphile
      video</url>.
    </p>

    <p>In the challenge below,</p>

    <p>
      <ol>
        <li>
          <p>
            First, copy your <c>isPrime</c> method from the exercise above to
            check if a number is prime.
          </p>
        </li>

        <li>
          <p>
            Then, write a method <c>findPrimes</c> that takes two integers as
            arguments and prints the prime numbers between them. It should
            return a count of the prime numbers found.
          </p>
        </li>
      </ol>
    </p>

    <project label="challenge-find-primes">
      <statement>
        <p>
          Copy your isPrime method from the previous exercise and write a method
          findPrimes that takes two integers as arguments and prints the prime
          numbers between them. It should return a count of the prime numbers
          found.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class FindPrimeNumbers
          {
              // isPrime checks whether n is a prime number
              public static boolean isPrime(int n)
              {
                  // 1. Copy your isPrime method here
                  // It should have a loop from 2 to n-1 or Math.sqrt(n)
                  //   if n is divisible by the loop variable i
                  //        return false



                  // if no divisor found after loop, return true
                  return true;
              }

              // 2. Complete findPrimes to print and return
              // the number of prime numbers between num1 and num2
              public static int findPrimes(int num1, int num2)
              {
                  int count = 0;
                  // Add a loop from num1 to num2 to check
                  // if each number is prime using isPrime
                  // If it is prime, print it and increment count


                  return count;
              }

              public static void main(String[] args)
              {
                  System.out.println("There are " + findPrimes(2, 100) + " prime numbers between 2 and 100.");
                  // You may see the grader's test runs in the output.
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("FindPrimeNumbers");
              }

              @Test
              public void test1() throws IOException
              {
                  String code = getCode();
                  String target = "for (int * = #; * ? *; *~)";

                  int num = countOccurencesRegex(code, target);

                  boolean passed = num == 2;

                  getResults("2", "" + num, "Each method should have a for loop", passed);
                  assertTrue(passed);
              }

              @Test
              public void testMain() throws IOException
              {
                  String expected = "There are 25 prime numbers between 2 and 100.";
                  String output = getMethodOutput("main");
                  boolean passed = getResults(expected, output, "Checking main output");
                  assertTrue(passed);
              }

             @Test
             public void testCall() throws IOException
             {
                 Object[] args = {10000,10100};
                 String output = getMethodOutput("findPrimes", args);
                 String expect = "11";

                 boolean passed =
                         getResults(
                                 expect,
                                 output,
                                 "findPrimes(10000,10100)"
                                 );
                 assertTrue(passed);
             }

              @Test
             public void testBool() throws IOException
             {
                 String target = "(isPrime(";
                 boolean passed = checkCodeContains("call to isPrime", target);
                 assertTrue(passed);
             }
          }
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="frequency">
    <title>Frequency</title>

    <p>
      You can use a counter variable inside a loop to determine the frequency
      with which a specific criteria is met. For example, you can count the
      number of even numbers in a sequence of numbers. You can use a loop and
      increment the counter each time an even number is found like below:
    </p>

    <program>
      <![CDATA[

      int count = 0;
      for (int i = 0; i < 100; i++)
      {
          if (i % 2 == 0)
          {
              count++;
          }
      }
      System.out.println("There are " + count + " even numbers from 1 to 100.");

      ]]>
    </program>
  </subsection>

  <subsection>
    <activity label="chooseType3">
      <statement>
        <p>What type should you use to hold the first name of a person?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>int</p>
          </statement>

          <feedback>
            <p>
              People don't usually have whole numbers like 7 as their first
              name.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>double</p>
          </statement>

          <feedback>
            <p>
              People don't usually have decimal numbers like 3.5 as their first
              name.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>boolean</p>
          </statement>

          <feedback>
            <p>
              This could only be used if the name was true or false. People
              don't usually have those as first names.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>String</p>
          </statement>

          <feedback>
            <p>
              Strings hold sequences of characters like you have in a person's
              name.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>String stuff</title>

    <idx>toString</idx>
    <idx><h>Object</h><h>toString</h></idx>
    <p>
      You can even add other items to a <c>String</c> using the <c>+</c>
      operator. Primitive values like <c>int</c> and <c>boolean</c> will be
      converted to a <c>String</c> automatically when concatenated with a
      <c>String</c>. Any other objects concatenated with a <c>String</c> will be
      converted to <c>String</c> using their <c>toString</c> method. All objects
      inherit a <c>toString</c> method from the <c>Object</c> class that returns
      a <c>String</c> representation of the object and many classes
      <term>override</term> it to produce a useful human-readable value. Method
      overriding occurs when a public method in a subclass has the same method
      signature as a public method in the superclass, but the behavior of the
      method is specific to the subclass (overriding toString is no longer
      covered on the AP CSA exam).
    </p>

    <figure align="center">
      <caption>
        compareTo returns a negative or positive value or 0 based on
        alphabetical order
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/compareTo.png" width="63%" alt="compareTo" />
    </figure>
  </subsection>

  <subsection>
    <title>String References</title>

    <activity label="lcsb1">
      <statement>
        <p>Run the following code. What does it print?</p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Test1
          {
              public static void main(String[] args)
              {
                  String greeting = null;
                  System.out.println(greeting);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "null";
                  boolean passed = getResults(expect, output, "Expected output from main", true);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <p>
      The code above declares an object variable named <c>greeting</c> and sets
      the value of greeting to the Java keyword <c>null</c> to show that it
      doesn’t refer to any object yet. So <c>System.out.println(greeting);</c>
      will print <c>null</c>.
    </p>

    <p>
      Object variables <term>refer</term> to objects in memory. A reference is a
      way to find the actual object, like adding a contact to your phone lets
      you reach someone without knowing exactly where they are. The value of
      greeting is null since the string object has not been created yet.
    </p>

    <figure align="center">
      <caption>Initial value for an object reference</caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/greeting.png" width="9%" />
    </figure>

    <idx><h>String</h><h>creation</h></idx>
    <p>
      In Java there are two ways to create an object of the <c>String</c> class.
      You can use the <c>new</c> keyword followed by a space and then the class
      constructor and then in parentheses you can include values used to
      initialize the fields of the object. This is the standard way to create a
      new object of a class in Java.
    </p>

    <program>
      String greeting = new String("Hello");
    </program>

    <idx>String literal</idx>
    <idx><h>String</h><h>literal</h></idx>
    <p>
      In Java you can also use just a <term>string literal</term>, which is a
      set of characters enclosed in double quotes (<c>"</c>), to create a
      <c>String</c> object.
    </p>

    <program>
      String greeting = "Hello";
    </program>

    <p>
      In both cases an object of the <c>String</c> class will be created in
      memory and the value of the variable greeting will be set to an object
      reference, a way to find that object.
    </p>

    <activity label="lcsbnew">
      <statement>
        <p>
          The code below creates two greeting strings: one using a string
          literal and the other using new and the String constructor. Change the
          code to add 2 new strings called firstName and lastName, one using a
          string literal and the other using new, and print them out with the
          greetings.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class StringTest
          {
              public static void main(String[] args)
              {
                  String greeting1 = "Hello!";
                  String greeting2 = new String("Welcome!");
                  System.out.println(greeting1);
                  System.out.println(greeting2);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testChangedCode()
              {
                  String origCode =
                          "public class StringTest {      public static void main(String[] args)      {"
                                  + " String greeting1 = \"Hello!\";        String greeting2 = new"
                                  + " String(\"Welcome!\"); System.out.println(greeting1);"
                                  + " System.out.println(greeting2); }    }";
                  boolean changed = codeChanged(origCode);
                  assertTrue(changed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="lcsb2">
      <statement>
        <p>
          Now that greeting refers to an actual object we can ask the object
          what class created it. Try the following. What does it print?
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class Test2
          {
              public static void main(String[] args)
              {
                  String greeting = "Hello";
                  Class currClass = greeting.getClass();
                  System.out.println(currClass);
                  Class parentClass = currClass.getSuperclass();
                  System.out.println(parentClass);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "class java.lang.String\nclass java.lang.Object";
                  boolean passed = getResults(expect, output, "Expected output from main", true);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <idx>parent class</idx>
    <idx>superclass</idx>
    <idx>inheritance</idx>
    <idx>package</idx>
    <idx>java.lang</idx>
    <idx><h>package</h><h>java.lang</h></idx>
    <p>
      The code above will first print class <c>java.lang.String</c> since
      <c>greeting</c> was created by the <c>String</c> class. The full name for
      the <c>String</c> class is <c>java.lang.String</c>. The <c>java.lang</c>
      part is the <term>package</term> name. Every class in the Java language is
      in a package and the standard classes like <c>String</c> are in the
      <c>java.lang</c> package. Every object in Java knows the class that
      created it. Also, every class knows its <term>parent</term> class. Yes, a
      class can have a parent class, just as people have parents. But, in Java a
      class can only have one parent. A class can <c>inherit</c> object fields
      and methods from a parent class, just like you might inherit musical
      ability from a parent. The last print statement will print <c>class
      java.lang.Object</c> because the parent class (<term>superclass</term>) of
      the String class is the Object class. All classes in Java inherit from the
      Object class at some point in their ancestry.
    </p>

    <figure align="center">
      <caption>
        Object variable of type String with a reference to a String object which
        has a reference to the String class which has a reference to the Object
        class.
      </caption>

      <image source="Unit1-Using-Objects-and-Methods/Figures/stringObject.png" width="89%" />
    </figure>
  </subsection>

  <subsection>
    <title>Common Mistakes with Strings</title>

    <p>The following code shows some common mistakes with strings.</p>

    <activity label="stringMistakes">
      <statement>
        <p>
          This code contains some common mistakes with strings. Fix the code to
          use the string methods correctly.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class StringMistakes {
              public static void main(String[] args) {
                  String str1 = "Hello!";

                  // Print out the first letter?
                  System.out.println(
                      "The first letter in " + str1 + ":" + str1.substring(1, 1));

                  // Print out the last character?
                  System.out.println(
                      "The last char. in " + str1 + ":" + str1.substring(8));

                  // Print str1 in lower case? Will str1 change?
                  str1.toLowerCase();
                  System.out.println("In lowercase: " + str1);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main").trim();
                  String expect =
                          "The first letter in Hello!:H\nThe last char. in Hello!:!\nIn lowercase: hello!";
                  boolean passed = output.contains(expect);

                  getResults(expect, output, "Expected output from main", passed);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <p>Here is a list of common mistakes made with Strings.</p>

    <blockquote>
      <p>
        <ul>
          <li>
            <p>
              Thinking that substrings include the character at the last index
              when they don’t.
            </p>
          </li>

          <li>
            <p>
              Thinking that strings can change when they can’t. They are
              immutable.
            </p>
          </li>

          <li>
            <p>
              Trying to access part of a string that is not between index 0 and
              length -1. This will throw an IndexOutOfBoundsException.
            </p>
          </li>

          <li>
            <p>
              Trying to call a method like <c>indexOf</c> on a string reference
              that is null. You will get a null pointer exception.
            </p>
          </li>

          <li>
            <p>
              Using <c>==</c> to test if two strings are equal. This is actually
              a test to see if they refer to the same object. Usually you only
              want to know if they have the same characters in the same order.
              In that case you should use <c>equals</c> or <c>compareTo</c>
              instead.
            </p>
          </li>

          <li>
            <p>
              Treating upper and lower case characters the same in Java. If
              <c>s1 = "Hi"</c> and <c>s2 = "hi"</c> then <c>s1.equals(s2)</c> is
              false.
            </p>
          </li>
        </ul>
      </p>
    </blockquote>
  </subsection>

  <subsection>
    <title>String Methods Game</title>

    <p>
      Try the game below written by AP CSA teacher Chandan Sarkar. Click on
      <term>Strings</term> and then on the letters that would be the result of
      the string method calls. We encourage you to work in pairs and see how
      high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="progresscheck-u1-part3">
    <title>Review/Practice for Unit 1 Part 3 on Using Objects</title>

    <p>
      This lesson ends the section on Unit 1 part 3 on Using Objects. You can
      now do the following review and practice lessons at the end of the unit
      and College Board Progress Check for Unit 1 Part 3 in the AP Classroom.
      Please do the practice test on objects and the FRQ practice below before
      you do the AP Classroom Progress Check for part 3.
    </p>

    <p>
      <ul>
        <li><url href="unit1b-summary.html">Unit 1b Summary</url></li>

        <li>
          <url href="unit1b-practice-mixed-code.html">Unit 1b Practice Mixed Code</url>
        </li>

        <li>
          <url href="unit1b-practice-coding.html">Unit 1b Practice Coding</url>
        </li>

        <li><url href="Exercises-objects.html">Exercises on Objects</url></li>

        <li>
          <url href="practice-test-objects.html">Practice Test on Objects</url>
        </li>

        <li><url href="JavaSwingGUIs.html">Optional Java Swing GUIs</url></li>

        <li><url href="frq-practice.html">Unit 1 FRQ Practice</url></li>
      </ul>
    </p>
  </subsection>

  <subsection>
    <title>From arrays</title>

    <figure align="center">
      <caption>Comparing App Inventor lists and Java arrays</caption>

      <image source="Unit4-Data-Collections/Figures/appinvListComparison.png" width="100%" />
    </figure>

    <figure align="center">
      <caption>Comparing Access to App Inventor lists and Java arrays</caption>

      <image source="Unit4-Data-Collections/Figures/appinvSelectComparison.png" width="100%" />
    </figure>

    <note>
      <p>
        Note that length is an instance variable and not a method, unlike the
        String <c>length()</c> method, so you don’t add parentheses after
        length. However, if you use parentheses after length during the AP exam,
        you won’t lose any points. The length instance variable is declared as a
        <c>public final int</c>. <c>public</c> means you can access it and
        <c>final</c> means the value can’t change.
      </p>
    </note>

    <subsection xml:id="arrays-game">
      <title>Arrays Game</title>

      <p>
        Try the game below to practice arrays. Click on <term>Arrays</term> and
        click on the element of the * array that would be printed out by the
        given code. If you’re stuck, check on Labels to see the indices. We
        encourage you to work in pairs and see how high a score you can get.
      </p>

      <p>
        <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
      </p>
    </subsection>

    <p>
      The following code demonstrates a loop that changes the values in an
      array. In this code, the array is passed as an argument to the static
      methods in the class. Arrays in Java are objects. The array variables are
      references to an address in memory. Since arrays can be very large, we do
      not want to copy them when we pass them into methods. When an array is
      passed as an argument to a method, the name of the array refers to its
      address in memory. Therefore, any changes to the array in the method will
      affect the original array. You can also try the code in the <url
      href="http://www.pythontutor.com/visualize.html#code=public%20class%20ArrayLoop%0A%20%20%20%7B%0A%0A%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20multAll%28int%5B%5D%20values,%20int%20amt%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20values%5Bi%5D%20*%20amt%3B%0A%20%20%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20printValues%28int%5B%5D%20values%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20%20values%5Bi%5D%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%5D%20numArray%20%3D%20%20%7B2,%206,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20multAll%28numArray,%202%29%3B%0A%20%20%20%20%20%20%20%20printValues%28numArray%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">Java
      visualizer</url>.
    </p>

    <activity label="arrayMethodTrace">
      <statement>
        <p>
          What does the following code print out? Trace through it keeping track
          of the array values and the output. Then run it to see if you’re
          right. Notice that in this code, the array is passed as an argument to
          the methods. You can also try the code in the <url
          href="http://www.pythontutor.com/visualize.html#code=public%20class%20ArrayLoop%0A%20%20%20%7B%0A%0A%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20multAll%28int%5B%5D%20values,%20int%20amt%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20values%5Bi%5D%20%3D%20values%5Bi%5D%20*%20amt%3B%0A%20%20%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%7D%20%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20//%20What%20does%20this%20method%20do%3F%0A%20%20%20%20%20%20public%20static%20void%20printValues%28int%5B%5D%20values%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20for%20%28int%20i%20%3D%200%3B%20i%20%3C%20values.length%3B%20i%2B%2B%29%0A%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20System.out.println%28%20%20values%5Bi%5D%20%29%3B%0A%20%20%20%20%20%20%20%20%7D%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20int%5B%5D%20numArray%20%3D%20%20%7B2,%206,%207,%2012,%205%7D%3B%0A%20%20%20%20%20%20%20%20multAll%28numArray,%202%29%3B%0A%20%20%20%20%20%20%20%20printValues%28numArray%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">Java
          visualizer</url> with the Code Lens button.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class ArrayLoop
          {

              // What does this method do?
              public static void multAll(int[] values, int amt)
              {
                  for (int i = 0; i < values.length; i++)
                  {
                      values[i] = values[i] * amt;
                  }
              }

              // What does this method do?
              public static void printValues(int[] values)
              {
                  for (int i = 0; i < values.length; i++)
                  {
                      System.out.println(values[i]);
                  }
              }

              public static void main(String[] args)
              {
                  int[] numArray = {2, 6, 7, 12, 5};
                  multAll(numArray, 2);
                  printValues(numArray);
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("ArrayLoop");
              }

              @Test
              public void test1() throws IOException
              {
                  String output = getMethodOutput("main");
                  String expect = "4 12 14 24 10";

                  boolean passed = getResults(expect, output, "Did you run the code?", true);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <note>
      <p>
        Arrays in Java are objects. When arrays are passed in as arguments to
        methods, any changes to the array in the method will affect the original
        array, since the array name is a reference value refering to the address
        of the array in memory.
      </p>
    </note>

    <note>
      <p>
        Using a variable as the index is a powerful <term>data
        abstraction</term> feature because it allows us to use loops with arrays
        where the loop counter variable is the index of the array! This allows
        our code to generalize to work for the whole array.
      </p>
    </note>

    <p>
      To set up a for-each loop, use <term>for (type variable :
      arrayname)</term> where the type is the type for elements in the array,
      and read it as “for each variable value in arrayname”. You may have used a
      similar loop in AP CSP Pseudocode or App Inventor with lists like below.
    </p>

    <figure align="center">
      <caption>Comparing App Inventor, AP CSP, and Java for each</caption>

      <image source="Unit4-Data-Collections/Figures/appinvForEachComparison.png" width="100%" />
    </figure>

    <note>
      <p>
        Enhanced for each loops cannot be used in all situations. Only use
        for-each loops when you want to loop through <term>all</term> the values
        in an array without changing their values.
      </p>

      <p>
        <ul>
          <li>
            <p>Do not use for each loops if you need the index.</p>
          </li>

          <li>
            <p>
              Do not use for each loops if you need to change the values in the
              array.
            </p>
          </li>

          <li>
            <p>
              Do not use for each loops if you want to loop through only part of
              an array or in a different order.
            </p>
          </li>
        </ul>
      </p>
    </note>

    <activity label="tripleFirstFour">
      <statement>
        <p>
          What will the following code print out? Can you write a similar method
          called tripleFirstFour() that triples the first 4 elements of the
          array? Make sure you test it in main.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class ArrayWorker
          {
              private int[] values;

              public ArrayWorker(int[] theValues)
              {
                  values = theValues;
              }

              /** Doubles the first 5 elements of the array */
              public void doubleFirstFive()
              {
                  // Notice: Math.min to limit the number of iterations.
                  for (int i = 0; i < Math.min(5, values.length); i++)
                  {
                      values[i] *= 2;
                  }
              }

              /**
               * Write a method called tripleFirstFour() that triples
               * the first 4 elements of the array *
               */
              public void tripleFirstFour()
              {


              }

              /** Prints the array */
              public void printArray()
              {
                  for (int i = 0; i < values.length; i++)
                  {
                      System.out.println(values[i]);
                  }
              }

              public static void main(String[] args)
              {
                  int[] numArray = {3, 8, -3, 2, 20, 5, 33, 1};
                  ArrayWorker worker = new ArrayWorker(numArray);
                  worker.doubleFirstFive();
                  worker.printArray();
                  // uncomment these to test
                  // worker.tripleFirstFour();
                  // worker.printArray();
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("ArrayWorker");

                  int[] numArray = {0, 1, 2, 3, 4, 5};
                  setDefaultValues(new Object[] {numArray});
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect = "6 16 -6 4 40 5 33 1".replaceAll(" ", "\n");

                  boolean passed = output.contains(expect);

                  passed = getResults(expect, output, "Did you run the doubleFirstFiveMethod?", passed);
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  String output = getMethodOutput("tripleFirstFour");
                  output = getMethodOutput("printArray");
                  String expect = "0 3 6 9 4 5".replaceAll(" ", "\n");

                  boolean passed = output.contains(expect);

                  passed =
                          getResults(
                                  expect,
                                  output,
                                  "Testing tripleFirstFour() method on array [0, 1, 2, 3, 4, 5]",
                                  passed);
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="mcq_array_doublelast">
      <statement>
        <p>
          Given the following values of a and the method doubleLast what will
          the values of a be after you execute: doubleLast()?
        </p>

        <program>
          <![CDATA[

          private int[ ] a = {-20, -15, 2, 8, 16, 33};

          public void doubleLast()
          {

             for (int i = a.length / 2; i < a.length; i++)
             {
                a[i] = a[i] * 2;
             }
          }

          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>{-40, -30, 4, 16, 32, 66}</p>
          </statement>

          <feedback>
            <p>
              This would true if it looped through the whole array. Does it?
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>{-40, -30, 4, 8, 16, 32}</p>
          </statement>

          <feedback>
            <p>
              This would be true if it looped from the beginning to the middle.
              Does it?
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>{-20, -15, 2, 16, 32, 66}</p>
          </statement>

          <feedback>
            <p>
              It loops from the middle to the end doubling each value. Since
              there are 6 elements it will start at index 3.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>{-20, -15, 2, 8, 16, 33}</p>
          </statement>

          <feedback>
            <p>
              This would be true if array elements didn't change, but they do.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection>
    <title>Arrays Game</title>

    <p>
      Try the game below to practice loops with arrays. Click on
      <term>Arrays</term> and then check on <term>Loops</term> and click on the
      elements of the * array that would be printed out by the given code. If
      you’re stuck, check on Labels to see the indices. We encourage you to work
      in pairs and see how high a score you can get.
    </p>

    <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
  </subsection>

  <subsection xml:id="design-an-array-of-objects-for-your-community">
    <title>Design an Array of Objects for your Community</title>

    <p>
      So far, we have seen arrays of ints and Strings, but we can create an
      array of any type. For example, the following program creates an array of
      Turtle objects. Notice that for an array of objects, we must call the
      constructor of each object to initialize the array elements, for example
      <c>array[index] = new ClassName();</c>. And we can use
      <c>array[index].method()</c> to call a method of an object in the array.
    </p>

    <program>
      // Declaring an array of objects type ClassName
      ClassName[] array = new ClassName[size];
      // initialize array element by calling ClassName constructor
      array[index] = new ClassName();
      // call a method of the object in the array at index
      array[index].method();
    </program>

    <activity label="TurtleArray">
      <statement>
        <p>
          Run the code below to see the 2 turtles in the array. Can you change
          the array size to 3 and create and add 1 more Turtle object to the
          array? Make this new turtle turnRight and go forward using its indexed
          array variable.
        </p>
      </statement>

      <program interactive="activecode" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
          import java.awt.*;
          import java.util.*;

          public class TurtleArray
          {
              public static void main(String[] args)
              {
                  World world = new World(300, 300);
                  // Declare an array for 2 Turtle objects
                  Turtle[] turtarray = new Turtle[2];
                  // Initialize the array elements by constructing each turtle object
                  turtarray[0] = new Turtle(world);
                  turtarray[1] = new Turtle(world);
                  // Call each turtle's methods
                  turtarray[0].forward();
                  turtarray[1].turnLeft();
                  turtarray[1].forward();

                  world.show(true);
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testArrayDeclaration() throws IOException
              {
                  boolean passed = checkCodeContains("an array declaration of size 3", "Turtle[3]");
                  assertTrue(passed);
              }

              @Test
              public void testInit()
              {
                  boolean passed =
                          checkCodeContains("initialization for array element 2", "[2] = new Turtle");
                  assertTrue(passed);
              }

              @Test
              public void testprint()
              {
                  boolean passed = checkCodeContains("call forward() of array element 2", "[2].forward();");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <p>
      In the last unit, you came up with a class of your own choice relevant to
      you or your community. In this unit, you will create an array to hold
      objects of your class.
    </p>

    <p>
      <ol>
        <li>
          <p>
            Copy your class from <url
            href="../Unit3-Class-Creation/topic-3-5-methods.html#groupwork-design-a-class-for-your-community">lesson
            3.5</url> below.
          </p>
        </li>

        <li>
          <p>In the main method, create an array of 3 objects of your class.</p>
        </li>

        <li>
          <p>
            Initialize array elements indexed 0 to 2 to new objects of your
            class using its constructor.
          </p>
        </li>

        <li>
          <p>
            Call the print method of each object in the array using the array
            index.
          </p>
        </li>
      </ol>
    </p>

    <project label="community-challenge-6-1">
      <statement>
        <p>
          Community Challenge: Copy your class from <url
          href="../Unit3-Class-Creation/topic-3-5-methods.html#groupwork-design-a-class-for-your-community">lesson
          3.5</url> below. Create an array of 3 objects of your class,
          initialize them to new objects and call their print methods.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class          // Add your class name here!
          {
              // 1. Copy your class from lesson 3.5 below.



              public static void main(String[] args)
              {
                 // 2. Create an array of 3 objects of your class.

                 // 3. Initialize array elements 0-2 to new objects of your class.


                 // 4. Call the print method of each object in the array using the array index.


              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testArrayDeclaration() throws IOException
              {
                  boolean passed = checkCodeContains("an array declaration of size 3", "[3]");
                  assertTrue(passed);
              }

              @Test
              public void testObjs() throws IOException
              {
                  String code = getCode();
                  String target = "new";
                  int count = countOccurences(code, target);
                  boolean passed = (count >= 4);
                  getResults(
                          "4+ " + target,
                          count + "+ " + target,
                          "Did you declare 3 objects of your class using new and your constructor?",
                          passed);
                  assertTrue(passed);
              }

              @Test
              public void testInit()
              {
                  boolean passed = checkCodeContains("initialization for array element 0", "[0]=");
                  assertTrue(passed);
              }

              @Test
              public void testprint()
              {
                  boolean passed = checkCodeContains("call to print of array element 0", "[0].print");
                  assertTrue(passed);
              }

              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main"); // .split("\n");
                  String expect = "3+ line(s) of text";
                  String actual = " line(s) of text";
                  int len = output.split("\n").length;

                  if (output.length() > 0)
                  {
                      actual = len + actual;
                  }
                  else
                  {
                      actual = output.length() + actual;
                  }
                  boolean passed = len >= 3;

                  getResults(expect, actual, "Checking output", passed);
                  assertTrue(passed);
              }
          }

          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection>
    <title>Design an Array of Objects for your Community</title>

    <p>
      In the last unit, you came up with a class of your own choice relevant to
      you or your community. In the <url
      href="../Unit4-Data-Collections/topic-4-3-array-basics.html#groupwork-design-an-array-of-objects-for-your-community">last
      lesson</url>, you created an array to hold objects of your class. Copy
      your array of objects code from the <url
      href="../Unit4-Data-Collections/topic-4-3-array-basics.html#groupwork-design-an-array-of-objects-for-your-community">last
      lesson</url>. In this challenge, add a loop to traverse your array to
      print out each object.
    </p>

    <project label="community-challenge-array-loop">
      <statement>
        <p>
          Copy your class from the <url
          href="../Unit4-Data-Collections/topic-4-3-array-basics.html#groupwork-design-an-array-of-objects-for-your-community">last
          lesson</url> below. It should create an array of 3 objects of your
          class and initialize them to new objects. Instead of calling their
          print() methods individually, write a <c>for</c> (indexed or enhanced)
          loop that traverses your array to print out each object using the
          index i.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class          // Add your class name here!
          {
              // Copy your class from lesson 4.3 below.



              public static void main(String[] args)
              {
                 // Create an array of 3 objects of your class.

                 // Initialize array elements 0-2 to new objects of your class.


                 // Write a for loop that traverses the array and calls
                 // the print method of each object in the array


              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              @Test
              public void testArrayDeclaration() throws IOException
              {
                  boolean passed = checkCodeContains("an array declaration of size 3", "[3]");
                  assertTrue(passed);
              }

              @Test
              public void testLoop()
              {
                  String target = "for";
                  boolean passed = checkCodeContains("for loop", target);
                  assertTrue(passed);
              }

              @Test
              public void testprint()
              {
                  boolean passed =
                          checkCodeContains("call to print in the loop", ".print");
                  assertTrue(passed);
              }

              @Test
              public void testMain() throws IOException
              {
                  String output = getMethodOutput("main"); // .split("\n");
                  String expect = "3+ line(s) of text";
                  String actual = " line(s) of text";
                  int len = output.split("\n").length;

                  if (output.length() > 0)
                  {
                      actual = len + actual;
                  }
                  else
                  {
                      actual = output.length() + actual;
                  }
                  boolean passed = len >= 3;

                  getResults(expect, actual, "Checking output", passed);
                  assertTrue(passed);
              }
          }

          ]]>
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="review-and-frq-practice-for-arrays">
    <title>Review and FRQ Practice for Arrays</title>

    <p>
      This lesson ends the section on 1-dimensional arrays. You can now do the
      following review lessons and FRQs at the end of the unit and College Board
      Progress Check for Unit 4 Part 1 in the AP Classroom.
    </p>

    <p>
      <ul>
        <li><url href="array-summary.html">Arrays Summary</url></li>

        <li>
          <url href="ArrayParsonsPractice.html">Arrays Mixed-up Code Practice</url>
        </li>

        <li><url href="ArrayPractice.html">Arrays Coding Practice</url></li>

        <li>
          <url href="MoreArrayPractice.html">More Arrays Coding Practice</url>
        </li>

        <li>
          <url href="array-Exercises.html">Arrays Multiple-Choice Exercises</url>
        </li>

        <li><url href="arrayExam.html">Arrays Exam</url></li>
      </ul>
    </p>

    <p>
      We encourage you to work in pairs or groups to tackle the following
      challenging FRQ problems and take them one step at a time. These will get
      easier with practice! Note that the third FRQ now uses ArrayLists instead
      of arrays, but these FRQ practice probelms will still help you to practice
      iterating over a data structure and can be converted to work with
      ArrayLists.
    </p>

    <p>
      <ul>
        <li><url href="horseBarnA.html">Horse Barn A FRQ</url></li>

        <li><url href="horseBarnB.html">Horse Barn B FRQ</url></li>

        <li><url href="selfDivisorB.html">Self Divisor B FRQ</url></li>

        <li><url href="soundA.html">Sound A FRQ</url></li>

        <li><url href="soundB.html">Sound B FRQ</url></li>

        <li><url href="numberCubeA.html">Number Cube A FRQ</url></li>

        <li><url href="numberCubeB.html">Number Cube B FRQ</url></li>
      </ul>
    </p>
  </subsection>

  <subsection>
    <title>Traversing Arrays of Objects</title>

    <p>
      Both indexed for loops and enhanced for (for each) loops can be used to
      traverse an array of objects. Here is an example of a Student class and a
      StudentArray class that searches for a student with a specific name. In
      Java, when you are working with multiple classes on your own computer,
      each class is usually in its own file that matches the class name. On
      Runestone, when you are working with multiple classes, only the class that
      has the main method should be public, and the other classes should start
      with <c>class</c> instead of <c>public class</c>.
    </p>

    <activity label="student-array">
      <statement>
        <p>
          Run the StudentArray class below. Note that it uses the class Student
          below it and creates an array of Students. Using the StudentArray
          print() method as a guide, write a StudentArray method called
          findAndPrint() which takes a String name as an argument, and uses an
          enhanced for-loop to traverse the array to find a Student in the array
          with the same name. If the argument equals the Student object’s name
          (using its getName() method), then print out that student’s info. Call
          it from the main method to test it.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class StudentArray
          {
              private Student[] array;
              private int size = 3;

              // Creates an array of the default size
              public StudentArray()
              {
                  array = new Student[size];
              }

              // Creates an array of the given size
              public StudentArray(int size)
              {
                  array = new Student[size];
              }

              // Adds Student s to the array at index i
              public void add(int i, Student s)
              {
                  array[i] = s;
              }

              // prints the array of students
              public void print()
              {
                  for (Student s : array)
                  {
                      // this will call Student's toString() method
                      System.out.println(s);
                  }
              }

              /* Write a findAndPrint(name) method */

              public static void main(String[] args)
              {
                  // Create an object of this class and pass in size 3
                  StudentArray roster = new StudentArray(3);
                  // Add new Student objects at indices 0-2
                  roster.add(0, new Student("Skyler", "skyler@sky.com", 123456));
                  roster.add(1, new Student("Ayanna", "ayanna@gmail.com", 789012));
                  roster.add(2, new Student("Dakota", "dak@gmail.com", 112233));
                  roster.print();
                  System.out.println("Finding student Ayanna: ");
                  // uncomment to test
                  // roster.findAndPrint("Ayanna");
              }
          }

          class Student
          {
              private String name;
              private String email;
              private int id;

              public Student(String initName, String initEmail, int initId)
              {
                  name = initName;
                  email = initEmail;
                  id = initId;
              }

              public String getName()
              {
                  return name;
              }

              public String getEmail()
              {
                  return email;
              }

              public int getId()
              {
                  return id;
              }

              // toString() method
              public String toString()
              {
                  return id + ": " + name + ", " + email;
              }
          }
        </code>

        <tests>
          <![CDATA[

          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("StudentArray");
              }

              @Test
              public void test1()
              {
                  String target = "findAndPrint(String";
                  boolean passed =
                          checkCodeContains("findAndPrint method header with String paramenter", target);
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  String target = "roster.findAndPrint(";
                  boolean passed =
                          checkCodeContains(
                                  "call to roster.findAndPrint method (uncommented in main)", target);
                  assertTrue(passed);
              }

              @Test
              public void testForEach()
              {
                  String target = "for(Student";
                  String code = getCode().replaceAll("\\s", "");
                  int index = code.indexOf("findAndPrint(String");
                  boolean passed = false;
                  if (index > 0)
                  {
                      code = code.substring(index, index + 200);
                      int num = countOccurences(code, target);
                      passed = num == 1;
                  }
                  getResults(
                          "true",
                          "" + passed,
                          "Checking that findAndPrint() contains an enhanced for loop for Student in array",
                          passed);
                  assertTrue(passed);
              }

              @Test
              public void testEquals()
              {
                  boolean passed = checkCodeContains("use of equals method", ".equals(");
                  assertTrue(passed);
              }

              @Test
              public void testGetName()
              {
                  boolean passed = checkCodeContains("use of getName() method", ".getName()");
                  assertTrue(passed);
              }
          }

          ]]>
        </tests>
      </program>
    </activity>

    <p>
      Remember that normally an enhanced for loop cannot be used to modify
      primitive values in an array because the loop variable does not refer to
      the real object in the array. However, when an array stores object
      references, the attributes can be modified by calling methods on the
      enhanced <c>for</c> loop variable. The references stored in the array are
      unchanged, but since loop variable is another reference to the same
      objects, you can change the attributes of an object in an array using the
      enhanced for loop using its public mutator methods.
    </p>
  </subsection>

  <subsection>
    <title>From topic-4-5</title>

    <p>
      Here is an object-oriented example that has the array as a private
      instance variable in the class and provides public methods sum and average
      that use enhanced for loops. You can use the Code Lens button to step
      through this code.
    </p>

    <activity label="enhanced-for-loop-avg">
      <statement>
        <p>
          Try the code below that computes the average of the elements in the
          array. Can you add another method to compute the sum of the elements?
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          public class ArrayWorker
          {
              private int[] values;

              public ArrayWorker(int[] theValues)
              {
                  values = theValues;
              }

              public double getSum()
              {
                   // TODO: Write a loop that computes and returns
                   // the sum of the elements in the array


              }
              public double getAverage()
              {
                  double total = 0;
                  for (int val : values)
                  {
                      total = total + val;
                  }
                  return total / values.length;
              }

              public static void main(String[] args)
              {
                  int[] numArray = {2, 6, 7, 12, 5};
                  ArrayWorker aWorker = new ArrayWorker(numArray);
                  System.out.println(aWorker.getAverage());
                  System.out.println(aWorker.getSum());
              }
          }
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("ArrayWorker");
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect = "6.4\n32.0\n";

                  boolean passed = getResults(expect, output, "Output from main");
                  assertTrue(passed);
              }
              @Test
              public void testFor()
               {
                    String code = getCode();

                    int fors = countOccurences(code, "for");

                    boolean passed =
                            getResults(
                                    "2 for loops", fors + " for loops", "for loop used in getSum");
                    assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="looping-from-back-to-front">
    <title>Looping From Back to Front</title>

    <idx><h>loop</h><h>from back to front</h></idx>
    <p>
      You don’t have to loop through an array from the front to the back. You
      can loop by starting at the back of the array and move toward the front
      during each time through the loop. In the example below, the method
      <c>getIndexOfLastElementSmallerThanTarget</c> returns the index of the
      last element in the array that is smaller than the given argument. The
      <term>return</term> statement inside the loop stops the execution of the
      loop and the method and returns the index that is found immediately back
      to the main method. It returns -1 if there is no number in the array that
      is smaller than the given number.
    </p>

    <activity label="arrayFindSmaller">
      <statement>
        <p>
          What does the following code print out? Notice that the array and the
          target are passed in as arguments to the
          getIndexOfLastElementSmallerThanTarget method. Trace through it
          keeping track of the array values and the output. Then run it to see
          if you’re right. You can also try the code in the <url
          href="http://www.pythontutor.com/java.html#code=%20%20%20public%20class%20ArrayFindSmallest%0A%20%20%20%7B%0A%0A%20%20%20%20%20%20/**%20%40return%20index%20of%20the%20last%20number%20smaller%20than%20target%20*/%20%20%20%20%20%0A%20%20%20%20%20%20public%20static%20int%20getIndexOfLastElementSmallerThanTarget%28int%5B%20%5D%20values,%20int%20target%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20for%20%28int%20index%20%3D%20values.length%20-%201%3B%20index%20%3E%3D%200%3B%20index--%29%0A%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28values%5Bindex%5D%20%3C%20target%29%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20index%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20return%20-1%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%0A%20%20%20%20%20%20public%20static%20void%20main%20%28String%5B%5D%20args%29%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20int%5B%5D%20theArray%20%3D%20%7B-30,%20-5,%208,%2023,%2046%7D%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2050%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2050%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2030%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2030%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%2010%3A%20%22%20%2B%20getIndexOfLastElementSmallerThanTarget%28theArray,%2010%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%200%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,0%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%20-20%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,-20%29%29%3B%0A%20%20%20%20%20%20%20%20%20System.out.println%28%22Last%20index%20of%20element%20smaller%20than%20-30%3A%20%22%20%2BgetIndexOfLastElementSmallerThanTarget%28theArray,-30%29%29%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%0A%20%20%20&amp;cumulative=false&amp;curInstr=0&amp;heapPrimitives=nevernest&amp;mode=display&amp;origin=opt-frontend.js&amp;py=java&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false">Java
          visualizer</url> with the Code Lens button. Can you add another method
          that finds the index of the last element greater than the target
          instead of smaller than the target and have main print out a test of
          it? Call this method getIndexOfLastElementGreaterThanTarget and give
          it 2 arguments and a return value like the method below.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class ArrayFindSmallest
          {

              /**
               * @return index of the last number smaller than target
               */
              public static int getIndexOfLastElementSmallerThanTarget(int[] values, int target)
              {
                  for (int index = values.length - 1; index >= 0; index--)
                  {
                      if (values[index] < target)
                      {
                         return index;
                      }
                  }
                  return -1;
              }

              /**
               * Add a method called getIndexOfLastElementGreaterThanTarget
               *
               * @param int array
               * @param int target
               * @return index of the last number greater than target
               */
              public static void main(String[] args)
              {
                  int[] theArray = {-30, -5, 8, 23, 46};
                  System.out.println(
                          "Last index of element smaller than 50: "
                                  + getIndexOfLastElementSmallerThanTarget(theArray, 50));
                  System.out.println(
                          "Last index of element smaller than 30: "
                                  + getIndexOfLastElementSmallerThanTarget(theArray, 30));
                  System.out.println(
                          "Last index of element smaller than 10: "
                                  + getIndexOfLastElementSmallerThanTarget(theArray, 10));
                  System.out.println(
                          "Last index of element smaller than 0: "
                                  + getIndexOfLastElementSmallerThanTarget(theArray, 0));
                  System.out.println(
                          "Last index of element smaller than -20: "
                                  + getIndexOfLastElementSmallerThanTarget(theArray, -20));
                  System.out.println(
                          "Last index of element smaller than -30: "
                                  + getIndexOfLastElementSmallerThanTarget(theArray, -30));
              }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import org.junit.*;

          import java.io.*;

          public class RunestoneTests extends CodeTestHelper
          {
              public RunestoneTests()
              {
                  super("ArrayFindSmallest");
              }

              @Test
              public void test1()
              {
                  String output = getMethodOutput("main");
                  String expect = "Last index of element smaller than ";

                  boolean passed = output.contains(expect);
                  output = output.substring(0, output.indexOf("\n"));
                  passed =
                          getResults(
                                  "Last index of element smaller than 50: 4",
                                  output,
                                  "Ran getIndexOfLastElementSmallerThanTarget",
                                  passed);
                  assertTrue(passed);
              }

              @Test
              public void test2()
              {
                  int[] nums = {10, 50, 20, 30, 40, 20};
                  Object[] args = {nums, 30};

                  String output = getMethodOutput("getIndexOfLastElementGreaterThanTarget", args);
                  String expect = "4";

                  boolean passed =
                          getResults(
                                  expect,
                                  output,
                                  "getIndexOfLastElementGreaterThanTarget({10, 50, 20, 30, 40, 20}, 30)");
                  assertTrue(passed);
              }

              @Test
              public void test3()
              {
                  int[] nums = {10, 50, 20, 30, 40, 20};
                  Object[] args = {nums, 100};

                  String output = getMethodOutput("getIndexOfLastElementGreaterThanTarget", args);
                  String expect = "-1";

                  boolean passed =
                          getResults(
                                  expect,
                                  output,
                                  "getIndexOfLastElementGreaterThanTarget({10, 50, 20, 30, 40, 20}, 100)");
                  assertTrue(passed);
              }
          }
        </tests>
      </program>
    </activity>

    <activity label="mcq_array_loop1">
      <statement>
        <p>
          Given the following code segment (which is identical to the method
          above) what will be returned when you execute:
          <c>getIndexOfLastElementSmallerThanTarget(values,-13)</c>;
        </p>

        <program>
          <![CDATA[

          private int[ ] values = {-20, -15, 2, 8, 16, 33};

          public static int getIndexOfLastElementSmallerThanTarget(int[ ] values, int compare)
          {
             for (int i = values.length - 1; i >=0; i--)
             {
                if (values[i] < compare)
                   return i;
             }
             return -1; // to show none found
          }

          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>-1</p>
          </statement>

          <feedback>
            <p>
              The method will only return -1 if no value in the array is less
              than the passed value.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>-15</p>
          </statement>

          <feedback>
            <p>
              The method returns the index of the first item in the array that
              is less than the value, not the value.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>1</p>
          </statement>

          <feedback>
            <p>
              Since the method loops from the back towards the front -15 is the
              last value in the array that is less than -13 and it is at index
              1.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>You will get an out of bounds error.</p>
          </statement>

          <feedback>
            <p>
              No, the method correctly starts the index at values.length - 1 and
              continues as long as i is greater than or equal to 0.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="mcq_array_loop2">
      <statement>
        <p>
          Given the following code segment (which is not quite identical to the
          method above) what will be returned when you execute:
          <c>getIndexOfLastElementSmallerThanTarget(values, 7)</c>;
        </p>

        <program>
          <![CDATA[

          int[ ] values = {-20, -15, 2, 8, 16, 33};

          public static int getIndexOfLastElementSmallerThanTarget(int[] values, int compare)
          {
             for (int i = values.length; i >=0; i--)
             {
                if (values[i] < compare)
                   return i;
             }
             return -1; // to show none found
          }

          ]]>
        </program>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>-1</p>
          </statement>

          <feedback>
            <p>
              The method will only return -1 if no value in the array is less
              than the passed value.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>1</p>
          </statement>

          <feedback>
            <p>Check the starting index. Is it correct?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>2</p>
          </statement>

          <feedback>
            <p>Check the starting index. Is it correct?</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>You will get an out of bounds error.</p>
          </statement>

          <feedback>
            <p>
              You can not start the index at the length of the array. You must
              start at the length of the array minus one. This is a common
              mistake.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="array-storage">
    <title>Array Storage</title>

    <idx>row-major order</idx>
    <idx>column-major order</idx>
    <idx>array of arrays</idx>
    <idx><h>2D Array</h><h>row-major order</h></idx>
    <idx><h>2D Array</h><h>column-major order</h></idx>
    <idx><h>2D Array</h><h>array of arrays</h></idx>
    <p>
      Many programming languages actually store two-dimensional array data in a
      one-dimensional array. The typical way to do this is to store all the data
      for the first row followed by all the data for the second row and so on.
      This is called <term>row-major</term> order. Some languages store all the
      data for the first column followed by all the data for the second column
      and so on. This called <term>column-major</term> order.
    </p>

    <figure align="center">
      <caption>
        A 2D array stored in row-major order or column-major order as a 1D
        array.
      </caption>

      <image source="Unit4-Data-Collections/Figures/rowMajor.png" width="45%" />
    </figure>

    <p>
      Java actually stores a two-dimensional array as an array of arrays. Each
      element of the outer array has a reference to each inner array. The
      picture below shows a 2D array that has 3 rows and 7 columns. Notice that
      the array indices start at 0 and end at the length - 1.
    </p>

    <figure align="center">
      <caption>Java arrays of arrays</caption>

      <image source="Unit4-Data-Collections/Figures/ArrayRowsAndCols.png" width="54%" />
    </figure>

    <p>
      On the exam assume that any 2 dimensional (2D) array is in row-major
      order. The outer array can be thought of as the rows and the inner arrays
      the columns. On the exam all inner arrays will have the same length even
      though it is possible in Java to have inner arrays of different lengths
      (also called <term>non-rectangular arrays</term> or <term>ragged
      arrays</term>).
    </p>
  </subsection>

  <subsection xml:id="array2d-game">
    <title>2D Arrays and Loops Game</title>

    <p>
      Try the game below to practice loops with 2D arrays. Click on
      <term>Arrays</term> and then check <term>2D</term> and check
      <term>Loops</term> and then click on the elements of the * array that
      would be printed out by the given code. If you’re stuck, check on Labels
      to see the indices. We encourage you to work in pairs and see how high a
      score you can get.
    </p>

    <p>
      <interactive iframe="iframe/csagames.html" width="95%" aspect="1:1" />
    </p>
  </subsection>

  <subsection>

    <hidden>
      <datafile label="arch" filename="arch.jpg">
        <image source="_static/arch.jpg" />
      </datafile>

      <datafile label="pictureLab" filename="pictureLab.jar" editable="no" hide="yes">
        <pre>

        import java.awt.Image;
        import java.awt.image.BufferedImage;

        /**
         * Interface to describe a digital picture.  A digital picture can have an
         * associated file name.  It can have a title.  It has pixels
         * associated with it and you can get and set the pixels.  You
         * can get an Image from a picture or a BufferedImage.  You can load
         * it from a file name or image.  You can show a picture.  You can
         * explore a picture.  You can create a new image for it.
         *
         * @author Barb Ericson ericson@cc.gatech.edu
         */
        public interface DigitalPicture
        {
          public String getFileName(); // get the file name that the picture came from
          public String getTitle(); // get the title of the picture
          public void setTitle(String title); // set the title of the picture
          public int getWidth(); // get the width of the picture in pixels
          public int getHeight(); // get the height of the picture in pixels
          public Image getImage(); // get the image from the picture
          public BufferedImage getBufferedImage(); // get the buffered image
          public int getBasicPixel(int x, int y); // get the pixel information as an int
          public void setBasicPixel(int x, int y, int rgb); // set the pixel information
          public Pixel getPixel(int x, int y); // get the pixel information as an object
          public Pixel[] getPixels(); // get all pixels in row-major order
          public Pixel[][] getPixels2D(); // get 2-D array of pixels in row-major order
          public void load(Image image); // load the image into the picture
          public boolean load(String fileName); // load the picture from a file
          public void show(); // show the picture
          public boolean write(String fileName); // write out a file
        }

        import java.awt.Color;

        /**
         * Class that references a pixel in a picture. Pixel
         * stands for picture element where picture is
         * abbreviated pix.  A pixel has a column (x) and
         * row (y) location in a picture.  A pixel knows how
         * to get and set the red, green, blue, and alpha
         * values in the picture.  A pixel also knows how to get
         * and set the color using a Color object.
         *
         * @author Barb Ericson ericson@cc.gatech.edu
         */
        public class Pixel
        {

          ////////////////////////// fields ///////////////////////////////////

          /** the digital picture this pixel belongs to */
          private DigitalPicture picture;

          /** the x (column) location of this pixel in the picture; (0,0) is top left */
          private int x;

          /** the y (row) location of this pixel in the picture; (0,0) is top left */
          private int y;

          ////////////////////// constructors /////////////////////////////////

          /**
           * A constructor that takes the x and y location for the pixel and
           * the picture the pixel is coming from
           * @param picture the picture that the pixel is in
           * @param x the x location of the pixel in the picture
           * @param y the y location of the pixel in the picture
           */
          public Pixel(DigitalPicture picture, int x, int y)
          {
            // set the picture
            this.picture = picture;

            // set the x location
            this.x = x;

            // set the y location
            this.y = y;

          }

          ///////////////////////// methods //////////////////////////////

          /**
           * Method to get the x location of this pixel.
           * @return the x location of the pixel in the picture
           */
          public int getX() { return x; }

          /**
           * Method to get the y location of this pixel.
           * @return the y location of the pixel in the picture
           */
          public int getY() { return y; }

          /**
           * Method to get the row (y value)
           * @return the row (y value) of the pixel in the picture
           */
          public int getRow() { return y; }

          /**
           * Method to get the column (x value)
           * @return the column (x value) of the pixel
           */
          public int getCol() { return x; }

          /**
           * Method to get the amount of alpha (transparency) at this pixel.
           * It will be from 0-255.
           * @return the amount of alpha (transparency)
           */
          public int getAlpha() {

            /* get the value at the location from the picture as a 32 bit int
             * with alpha, red, green, blue each taking 8 bits from left to right
             */
            int value = picture.getBasicPixel(x,y);

            // get the alpha value (starts at 25 so shift right 24)
            // then and it with all 1's for the first 8 bits to keep
            // end up with from 0 to 255
            int alpha = (value &gt;&gt; 24) &amp; 0xff;

            return alpha;
          }

          /**
           * Method to get the amount of red at this pixel.  It will be
           * from 0-255 with 0 being no red and 255 being as much red as
           * you can have.
           * @return the amount of red from 0 for none to 255 for max
           */
          public int getRed() {

            /* get the value at the location from the picture as a 32 bit int
             * with alpha, red, green, blue each taking 8 bits from left to right
             */
            int value = picture.getBasicPixel(x,y);

            // get the red value (starts at 17 so shift right 16)
            // then AND it with all 1's for the first 8 bits to
            // end up with a resulting value from 0 to 255
            int red = (value &gt;&gt; 16) &amp; 0xff;

            return red;
          }

          /**
           * Method to get the red value from a pixel represented as an int
           * @param value the color value as an int
           * @return the amount of red
           */
          public static int getRed(int value)
          {
            int red = (value &gt;&gt; 16) &amp; 0xff;
            return red;
          }

          /**
           * Method to get the amount of green at this pixel.  It will be
           * from 0-255 with 0 being no green and 255 being as much green as
           * you can have.
           * @return the amount of green from 0 for none to 255 for max
           */
          public int getGreen() {

            /* get the value at the location from the picture as a 32 bit int
             * with alpha, red, green, blue each taking 8 bits from left to right
             */
            int value = picture.getBasicPixel(x,y);

            // get the green value (starts at 9 so shift right 8)
            int green = (value &gt;&gt;  8) &amp; 0xff;

            return green;
          }

          /**
           * Method to get the green value from a pixel represented as an int
           * @param value the color value as an int
           * @return the amount of green
           */
          public static int getGreen(int value)
          {
            int green = (value &gt;&gt; 8) &amp; 0xff;
            return green;
          }

          /**
           * Method to get the amount of blue at this pixel.  It will be
           * from 0-255 with 0 being no blue and 255 being as much blue as
           * you can have.
           * @return the amount of blue from 0 for none to 255 for max
           */
          public int getBlue() {

            /* get the value at the location from the picture as a 32 bit int
             * with alpha, red, green, blue each taking 8 bits from left to right
             */
            int value = picture.getBasicPixel(x,y);

            // get the blue value (starts at 0 so no shift required)
            int blue = value &amp; 0xff;

            return blue;
          }

          /**
           * Method to get the blue value from a pixel represented as an int
           * @param value the color value as an int
           * @return the amount of blue
           */
          public static int getBlue(int value)
          {
            int blue = value &amp; 0xff;
            return blue;
          }

          /**
           * Method to get a color object that represents the color at this pixel.
           * @return a color object that represents the pixel color
           */
          public Color getColor()
          {
             /* get the value at the location from the picture as a 32 bit int
             * with alpha, red, green, blue each taking 8 bits from left to right
             */
            int value = picture.getBasicPixel(x,y);

            // get the red value (starts at 17 so shift right 16)
            // then AND it with all 1's for the first 8 bits to
            // end up with a resulting value from 0 to 255
            int red = (value &gt;&gt; 16) &amp; 0xff;

            // get the green value (starts at 9 so shift right 8)
            int green = (value &gt;&gt;  8) &amp; 0xff;

            // get the blue value (starts at 0 so no shift required)
            int blue = value &amp; 0xff;

            return new Color(red,green,blue);
          }

          /**
           * Method to set the pixel color to the passed in color object.
           * @param newColor the new color to use
           */
          public void setColor(Color newColor)
          {
            // set the red, green, and blue values
            int red = newColor.getRed();
            int green = newColor.getGreen();
            int blue = newColor.getBlue();

            // update the associated picture
            updatePicture(this.getAlpha(),red,green,blue);
          }

          /**
           * Method to update the picture based on the passed color
           * values for this pixel
           * @param alpha the alpha (transparency) at this pixel
           * @param red the red value for the color at this pixel
           * @param green the green value for the color at this pixel
           * @param blue the blue value for the color at this pixel
           */
          public void updatePicture(int alpha, int red, int green, int blue)
          {
            // create a 32 bit int with alpha, red, green blue from left to right
            int value = (alpha &lt;&lt; 24) + (red &lt;&lt; 16) + (green &lt;&lt; 8) + blue;

            // update the picture with the int value
            picture.setBasicPixel(x,y,value);
          }

          /**
           * Method to correct a color value to be within 0 to 255
           * @param the value to use
           * @return a value within 0 to 255
           */
          private static int correctValue(int value)
          {
            if (value &lt; 0)
              value = 0;
            if (value &gt; 255)
              value = 255;
            return value;
          }

          /**
           * Method to set the red to a new red value
           * @param value the new value to use
           */
          public void setRed(int value)
          {
            // set the red value to the corrected value
            int red = correctValue(value);

            // update the pixel value in the picture
            updatePicture(getAlpha(), red, getGreen(), getBlue());
          }

          /**
           * Method to set the green to a new green value
           * @param value the value to use
           */
          public void setGreen(int value)
          {
            // set the green value to the corrected value
            int green = correctValue(value);

            // update the pixel value in the picture
            updatePicture(getAlpha(), getRed(), green, getBlue());
          }

          /**
           * Method to set the blue to a new blue value
           * @param value the new value to use
           */
          public void setBlue(int value)
          {
            // set the blue value to the corrected value
            int blue = correctValue(value);

            // update the pixel value in the picture
            updatePicture(getAlpha(), getRed(), getGreen(), blue);
          }

           /**
           * Method to set the alpha (transparency) to a new alpha value
           * @param value the new value to use
           */
          public void setAlpha(int value)
          {
            // make sure that the alpha is from 0 to 255
            int alpha = correctValue(value);

            // update the associated picture
            updatePicture(alpha, getRed(), getGreen(), getBlue());
          }

          /**
          * Method to get the distance between this pixel's color and the passed color
          * @param testColor the color to compare to
          * @return the distance between this pixel's color and the passed color
          */
         public double colorDistance(Color testColor)
         {
           double redDistance = this.getRed() - testColor.getRed();
           double greenDistance = this.getGreen() - testColor.getGreen();
           double blueDistance = this.getBlue() - testColor.getBlue();
           double distance = Math.sqrt(redDistance * redDistance +
                                       greenDistance * greenDistance +
                                       blueDistance * blueDistance);
           return distance;
         }

         /**
          * Method to compute the color distances between two color objects
          * @param color1 a color object
          * @param color2 a color object
          * @return the distance between the two colors
          */
         public static double colorDistance(Color color1,Color color2)
         {
           double redDistance = color1.getRed() - color2.getRed();
           double greenDistance = color1.getGreen() - color2.getGreen();
           double blueDistance = color1.getBlue() - color2.getBlue();
           double distance = Math.sqrt(redDistance * redDistance +
                                       greenDistance * greenDistance +
                                       blueDistance * blueDistance);
           return distance;
         }

         /**
          * Method to get the average of the colors of this pixel
          * @return the average of the red, green, and blue values
          */
         public double getAverage()
         {
           double average = (getRed() + getGreen() + getBlue()) / 3.0;
           return average;
         }

          /**
           * Method to return a string with information about this pixel
           * @return a string with information about this pixel
           */
          public String toString()
          {
            return "Pixel row=" + getRow() +
              " col=" + getCol() +
              " red=" + getRed() +
              " green=" + getGreen() +
              " blue=" + getBlue();
          }

        }

        import javax.imageio.ImageIO;
        import java.awt.image.BufferedImage;
        import javax.swing.ImageIcon;
        import java.awt.*;
        import java.io.*;
        import java.awt.geom.*;

        import java.io.ByteArrayOutputStream;
        //import javax.xml.bind.DatatypeConverter;
        import java.util.Base64;

        import java.util.Scanner;

        /**
         * A class that represents a simple picture.  A simple picture may have
         * an associated file name and a title.  A simple picture has pixels,
         * width, and height.  A simple picture uses a BufferedImage to
         * hold the pixels. You can also explore a simple picture.
         *
         * @author Barb Ericson ericson@cc.gatech.edu
         */
        public class SimplePicture implements DigitalPicture
        {

          /////////////////////// Fields /////////////////////////

          /**
           * the file name associated with the simple picture
           */
          private String fileName;

          /**
           * the path name for the file
           */
          private String pathName;

          /**
           * the title of the simple picture
           */
          private String title;

          /**
           * buffered image to hold pixels for the simple picture
           */
          private BufferedImage bufferedImage;

          /**
           * extension for this file (jpg or bmp)
           */
          private String extension;


         /////////////////////// Constructors /////////////////////////

         /**
          * A Constructor that takes no arguments.  It creates a picture with
          * a width of 200 and a height of 100 that is all white.
          * A no-argument constructor must be given in order for a class to
          * be able to be subclassed.  By default all subclasses will implicitly
          * call this in their parent's no-argument constructor unless a
          * different call to super() is explicitly made as the first line
          * of code in a constructor.
          */
         public SimplePicture()
         {this(200,100);}

         /**
          * A Constructor that takes a file name and uses the file to create
          * a picture
          * @param fileName the file name to use in creating the picture
          */
         public SimplePicture(String fileName)
         {

           // load the picture into the buffered image
           load(fileName);

         }

         /**
          * A constructor that takes the width and height desired for a picture and
          * creates a buffered image of that size.  This constructor doesn't
          * show the picture.  The pixels will all be white.
          * @param width the desired width
          * @param height the desired height
          */
         public  SimplePicture(int width, int height)
         {
           bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
           title = "None";
           fileName = "None";
           extension = "jpg";
           setAllPixelsToAColor(Color.white);
         }

         /**
          * A constructor that takes the width and height desired for a picture and
          * creates a buffered image of that size.  It also takes the
          * color to use for the background of the picture.
          * @param width the desired width
          * @param height the desired height
          * @param theColor the background color for the picture
          */
         public  SimplePicture(int width, int height, Color theColor)
         {
           this(width,height);
           setAllPixelsToAColor(theColor);
         }

         /**
          * A Constructor that takes a picture to copy information from
          * @param copyPicture the picture to copy from
          */
         public SimplePicture(SimplePicture copyPicture)
         {
           if (copyPicture.fileName != null)
           {
              this.fileName = new String(copyPicture.fileName);
              this.extension = copyPicture.extension;
           }
           if (copyPicture.title != null)
              this.title = new String(copyPicture.title);
           if (copyPicture.bufferedImage != null)
           {
             this.bufferedImage = new BufferedImage(copyPicture.getWidth(),  copyPicture.getHeight(), BufferedImage.TYPE_INT_RGB);
             this.copyPicture(copyPicture);
           }
         }

         /**
          * A constructor that takes a buffered image
          * @param image the buffered image
          */
         public SimplePicture(BufferedImage image)
         {
           this.bufferedImage = image;
           title = "None";
           fileName = "None";
           extension = "jpg";
         }

         ////////////////////////// Methods //////////////////////////////////

         /**
          * Method to get the extension for this picture
          * @return the extension (jpg, bmp, giff, etc)
          */
         public String getExtension() { return extension; }

         /**
          * Method that will copy all of the passed source picture into
          * the current picture object
          * @param sourcePicture  the picture object to copy
          */
         public void copyPicture(SimplePicture sourcePicture)
         {
           Pixel sourcePixel = null;
           Pixel targetPixel = null;

           // loop through the columns
           for (int sourceX = 0, targetX = 0;
                sourceX &lt; sourcePicture.getWidth() &amp;&amp;
                targetX &lt; this.getWidth();
                sourceX++, targetX++)
           {
             // loop through the rows
             for (int sourceY = 0, targetY = 0;
                  sourceY &lt; sourcePicture.getHeight() &amp;&amp;
                  targetY &lt; this.getHeight();
                  sourceY++, targetY++)
             {
               sourcePixel = sourcePicture.getPixel(sourceX,sourceY);
               targetPixel = this.getPixel(targetX,targetY);
               targetPixel.setColor(sourcePixel.getColor());
             }
           }

         }

         /**
          * Method to set the color in the picture to the passed color
          * @param color the color to set to
          */
         public void setAllPixelsToAColor(Color color)
         {
           // loop through all x
           for (int x = 0; x &lt; this.getWidth(); x++)
           {
             // loop through all y
             for (int y = 0; y &lt; this.getHeight(); y++)
             {
               getPixel(x,y).setColor(color);
             }
           }
         }

         /**
          * Method to get the buffered image
          * @return the buffered image
          */
         public BufferedImage getBufferedImage()
         {
            return bufferedImage;
         }

         /**
          * Method to get a graphics object for this picture to use to draw on
          * @return a graphics object to use for drawing
          */
         public Graphics getGraphics()
         {
           return bufferedImage.getGraphics();
         }

         /**
          * Method to get a Graphics2D object for this picture which can
          * be used to do 2D drawing on the picture
          */
         public Graphics2D createGraphics()
         {
           return bufferedImage.createGraphics();
         }

         /**
          * Method to get the file name associated with the picture
          * @return  the file name associated with the picture
          */
         public String getFileName() { return fileName; }

         /**
          * Method to set the file name
          * @param name the full pathname of the file
          */
         public void setFileName(String name)
         {
           fileName = name;
         }

         /**
          * Method to get the title of the picture
          * @return the title of the picture
          */
         public String getTitle()
         { return title; }

         /**
          * Method to set the title for the picture
          * @param title the title to use for the picture
          */
         public void setTitle(String title)
         {
           this.title = title;
         }

         /**
          * Method to get the width of the picture in pixels
          * @return the width of the picture in pixels
          */
         public int getWidth() { return bufferedImage.getWidth(); }

         /**
          * Method to get the height of the picture in pixels
          * @return  the height of the picture in pixels
          */
         public int getHeight() { return bufferedImage.getHeight(); }

         /**
          * Method to get an image from the picture
          * @return  the buffered image since it is an image
          */
         public Image getImage()
         {
           return bufferedImage;
         }

         /**
          * Method to return the pixel value as an int for the given x and y location
          * @param x the x coordinate of the pixel
          * @param y the y coordinate of the pixel
          * @return the pixel value as an integer (alpha, red, green, blue)
          */
         public int getBasicPixel(int x, int y)
         {
            return bufferedImage.getRGB(x,y);
         }

         /**
          * Method to set the value of a pixel in the picture from an int
          * @param x the x coordinate of the pixel
          * @param y the y coordinate of the pixel
          * @param rgb the new rgb value of the pixel (alpha, red, green, blue)
          */
         public void setBasicPixel(int x, int y, int rgb)
         {
           bufferedImage.setRGB(x,y,rgb);
         }

         /**
          * Method to get a pixel object for the given x and y location
          * @param x  the x location of the pixel in the picture
          * @param y  the y location of the pixel in the picture
          * @return a Pixel object for this location
          */
         public Pixel getPixel(int x, int y)
         {
           // create the pixel object for this picture and the given x and y location
           Pixel pixel = new Pixel(this,x,y);
           return pixel;
         }

         /**
          * Method to get a one-dimensional array of Pixels for this simple picture
          * @return a one-dimensional array of Pixel objects starting with y=0
          * to y=height-1 and x=0 to x=width-1.
          */
         public Pixel[] getPixels()
         {
           int width = getWidth();
           int height = getHeight();
           Pixel[] pixelArray = new Pixel[width * height];

           // loop through height rows from top to bottom
           for (int row = 0; row &lt; height; row++)
             for (int col = 0; col &lt; width; col++)
               pixelArray[row * width + col] = new Pixel(this,col,row);

           return pixelArray;
         }

         /**
          * Method to get a two-dimensional array of Pixels for this simple picture
          * @return a two-dimensional array of Pixel objects in row-major order.
          */
         public Pixel[][] getPixels2D()
         {
           int width = getWidth();
           int height = getHeight();
           Pixel[][] pixelArray = new Pixel[height][width];

           // loop through height rows from top to bottom
           for (int row = 0; row &lt; height; row++)
             for (int col = 0; col &lt; width; col++)
               pixelArray[row][col] = new Pixel(this,col,row);

           return pixelArray;
         }

         /**
          * Method to load the buffered image with the passed image
          * @param image  the image to use
          */
         public void load(Image image)
         {
           // get a graphics context to use to draw on the buffered image
           Graphics2D graphics2d = bufferedImage.createGraphics();

           // draw the image on the buffered image starting at 0,0
           graphics2d.drawImage(image,0,0,null);

           // show the new image
           show();
         }

         /**
          * Method to show the picture in a picture frame
          */
         public void show()
         {
             try {
                 ByteArrayOutputStream output = new ByteArrayOutputStream();
                 ImageIO.write(this.bufferedImage, "png", output);
                 String result = Base64.getEncoder().encodeToString(output.toByteArray());
                 //BH: using Base64 instead of DatatypeConverter.printBase64Binary(output.toByteArray());
                 System.out.println("&amp;lt;img src=\'data:image/" + this.extension + ";base64," + result + "\'/&gt;");
             } catch (IOException e) {
                 System.out.println("Errors occured in image conversion");
             }
         }

         /**
          * Method to open a picture explorer on a copy (in memory) of this
          * simple picture
          */
         /*
         public void explore()
         {
           // create a copy of the current picture and explore it
           new PictureExplorer(new SimplePicture(this));
         }
         */

         /**
          * Method to load the picture from the passed file name
          * @param fileName the file name to use to load the picture from
          * @throws IOException if the picture isn't found
          */
         public void loadOrFail(String fileName) throws IOException
         {
            // set the current picture's file name
           this.fileName = fileName;

           // set the extension
           int posDot = fileName.lastIndexOf('.');
           if (posDot &gt;= 0)
             this.extension = fileName.substring(posDot + 1);

            // get file location
            String[] paths = fileName.split("/");
            this.pathName = "";
            if(paths.length != 1) {
                for(int i = 0; i &lt; paths.length - 1; i++) {
                    this.pathName = this.pathName + paths[i] + "/";
                }
            }
           // if the current title is null use the file name
           if (title == null)
             title = fileName;

           File file = new File(this.fileName);


           if (!file.canRead())
           {
             throw new IOException(this.fileName +
                                 " could not be opened. Check that you specified the path");
           }
           this.bufferedImage = ImageIO.read(file);


         }

         /**
          * Method to read the contents of the picture from a filename
          * without throwing errors
          * @param fileName the name of the file to write the picture to
          * @return true if success else false
          */
         public boolean load(String fileName)
         {
             try {
                 this.loadOrFail(fileName);
                 return true;

             } catch (Exception ex) {
                 System.out.println("There was an error trying to open " + fileName);
                 bufferedImage = new BufferedImage(600,200,
                                                   BufferedImage.TYPE_INT_RGB);
                 addMessage("Couldn't load " + fileName,5,100);
                 return false;
             }

         }

         /**
          * Method to load the picture from the passed file name
          * this just calls load(fileName) and is for name compatibility
          * @param fileName the file name to use to load the picture from
          * @return true if success else false
          */
         public boolean loadImage(String fileName)
         {
             return load(fileName);
         }

         /**
          * Method to draw a message as a string on the buffered image
          * @param message the message to draw on the buffered image
          * @param xPos  the x coordinate of the leftmost point of the string
          * @param yPos  the y coordinate of the bottom of the string
          */
         public void addMessage(String message, int xPos, int yPos)
         {
           // get a graphics context to use to draw on the buffered image
           Graphics2D graphics2d = bufferedImage.createGraphics();

           // set the color to white
           graphics2d.setPaint(Color.white);

           // set the font to Helvetica bold style and size 16
           graphics2d.setFont(new Font("Helvetica",Font.BOLD,16));

           // draw the message
           graphics2d.drawString(message,xPos,yPos);

         }

         /**
          * Method to draw a string at the given location on the picture
          * @param text the text to draw
          * @param xPos the left x for the text
          * @param yPos the top y for the text
          */
         public void drawString(String text, int xPos, int yPos)
         {
           addMessage(text,xPos,yPos);
         }

         /**
           * Method to create a new picture by scaling the current
           * picture by the given x and y factors
           * @param xFactor the amount to scale in x
           * @param yFactor the amount to scale in y
           * @return the resulting picture
           */
          public Picture scale(double xFactor, double yFactor)
          {
            // set up the scale transform
            AffineTransform scaleTransform = new AffineTransform();
            scaleTransform.scale(xFactor,yFactor);

            // create a new picture object that is the right size
            Picture result = new Picture((int) (getHeight() * yFactor),
                                         (int) (getWidth() * xFactor));

            // get the graphics 2d object to draw on the result
            Graphics graphics = result.getGraphics();
            Graphics2D g2 = (Graphics2D) graphics;

            // draw the current image onto the result image scaled
            g2.drawImage(this.getImage(),scaleTransform,null);

            return result;
          }

          /**
           * Method to create a new picture of the passed width.
           * The aspect ratio of the width and height will stay
           * the same.
           * @param width the desired width
           * @return the resulting picture
           */
          public Picture getPictureWithWidth(int width)
          {
            // set up the scale transform
            double xFactor = (double) width / this.getWidth();
            Picture result = scale(xFactor,xFactor);
            return result;
          }

          /**
           * Method to create a new picture of the passed height.
           * The aspect ratio of the width and height will stay
           * the same.
           * @param height the desired height
           * @return the resulting picture
           */
          public Picture getPictureWithHeight(int height)
          {
            // set up the scale transform
            double yFactor = (double) height / this.getHeight();
            Picture result = scale(yFactor,yFactor);
            return result;
          }

         /**
          * Method to load a picture from a file name and show it in a picture frame
          * @param fileName the file name to load the picture from
          * @return true if success else false
          */
         public boolean loadPictureAndShowIt(String fileName)
         {
           boolean result = true;  // the default is that it worked

           // try to load the picture into the buffered image from the file name
           result = load(fileName);

           // show the picture in a picture frame
           show();

           return result;
         }

         /**
          * Method to write the contents of the picture to a file with
          * the passed name
          * @param fileName the name of the file to write the picture to
          */
         public void writeOrFail(String fileName) throws IOException
         {
           String extension = this.extension; // the default is current

           // create the file object
           File file = new File(this.pathName + fileName);
           //File fileLoc = file.getParentFile(); // directory name

           // if there is no parent directory use the current media dir
           //if (fileLoc == null)
           //{
             //fileName = FileChooser.getMediaPath(fileName);
             //file = new File(fileName);
             //fileLoc = file.getParentFile();
           //}

           // check that you can write to the directory
           //if (!fileLoc.canWrite()) {
            //    throw new IOException(fileName +
            //    " could not be opened. Check to see if you can write to the directory.");
           //}

           // get the extension
           int posDot = fileName.indexOf('.');
           if (posDot &gt;= 0)
               extension = fileName.substring(posDot + 1);

           // write the contents of the buffered image to the file
           ImageIO.write(bufferedImage, extension, file);

         }

         /**
          * Method to write the contents of the picture to a file with
          * the passed name without throwing errors
          * @param fileName the name of the file to write the picture to
          * @return true if success else false
          */
         public boolean write(String fileName)
         {
             try {
                 this.writeOrFail(fileName);
                 return true;
             } catch (Exception ex) {
                 System.out.println("There was an error trying to write " + fileName);
                 ex.printStackTrace();
                 return false;
             }

         }

          /**
           * Method to get the coordinates of the enclosing rectangle after this
           * transformation is applied to the current picture
           * @return the enclosing rectangle
           */
          public Rectangle2D getTransformEnclosingRect(AffineTransform trans)
          {
            int width = getWidth();
            int height = getHeight();
            double maxX = width - 1;
            double maxY = height - 1;
            double minX, minY;
            Point2D.Double p1 = new Point2D.Double(0,0);
            Point2D.Double p2 = new Point2D.Double(maxX,0);
            Point2D.Double p3 = new Point2D.Double(maxX,maxY);
            Point2D.Double p4 = new Point2D.Double(0,maxY);
            Point2D.Double result = new Point2D.Double(0,0);
            Rectangle2D.Double rect = null;

            // get the new points and min x and y and max x and y
            trans.deltaTransform(p1,result);
            minX = result.getX();
            maxX = result.getX();
            minY = result.getY();
            maxY = result.getY();
            trans.deltaTransform(p2,result);
            minX = Math.min(minX,result.getX());
            maxX = Math.max(maxX,result.getX());
            minY = Math.min(minY,result.getY());
            maxY = Math.max(maxY,result.getY());
            trans.deltaTransform(p3,result);
            minX = Math.min(minX,result.getX());
            maxX = Math.max(maxX,result.getX());
            minY = Math.min(minY,result.getY());
            maxY = Math.max(maxY,result.getY());
            trans.deltaTransform(p4,result);
            minX = Math.min(minX,result.getX());
            maxX = Math.max(maxX,result.getX());
            minY = Math.min(minY,result.getY());
            maxY = Math.max(maxY,result.getY());

            // create the bounding rectangle to return
            rect = new Rectangle2D.Double(minX,minY,maxX - minX + 1, maxY - minY + 1);
            return rect;
          }

          /**
           * Method to get the coordinates of the enclosing rectangle after this
           * transformation is applied to the current picture
           * @return the enclosing rectangle
           */
          public Rectangle2D getTranslationEnclosingRect(AffineTransform trans)
          {
            return getTransformEnclosingRect(trans);
          }

         /**
          * Method to return a string with information about this picture
          * @return a string with information about the picture
          */
         public String toString()
         {
           String output = "Simple Picture, filename " + fileName +
             " height " + getHeight() + " width " + getWidth();
           return output;
         }

        } // end of SimplePicture class
        </pre>
      </datafile>
    </hidden>
  </subsection>

  <subsection xml:id="duplicates-in-2d-arrays">
    <title>Duplicates in 2D Arrays</title>

    <p>
      You can determine the presence or absence of duplicate elements in the 2D
      array or in a designated row, column, or other subsection. With 1D arrays,
      we sometimes needed 2 nested loops to check for duplicates or pairs. With
      2D arrays, you often need 4 nested loop to check the whole array!
    </p>

    <activity label="noDups2DArray">
      <statement>
        <p>
          The method <c>noDups(nums)</c> returns <c>true</c> if there are no
          repeated (duplicate) items in the array <c>nums</c>. It should return
          false if it does find a repeated element using nested loops.
        </p>
      </statement>

      <program interactive="activecode">
        <![CDATA[

        public class Duplicates {
          public static boolean noDups(int[][] nums) {
            for (int row = 0; row < nums.length; row++) {
              for (int col = 0; col < nums[0].length; col++) {
                for (int row2 = row; row2 < nums.length; row2++) {
                  for (int col2 = col + 1; col2 < nums[0].length; col2++) {
                    if (nums[row][col] == nums[row2][col2]) {
                      return false;
                    }
                  }
                }
              }
            }
            return true;
          }

          public static void main(String[] args) {
            int[][] matrix = {{3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
            System.out.println(noDups(matrix));
          }
        }

        ]]>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="rotate-and-reverse">
    <title>Rotate and Reverse</title>

    <p>
      We can also rotate or reverse the order of the elements in a row or
      column. The following code rotates the elements in a row to the right by
      one position. This algorithm is very similar to the 1D array rotation
      algorithm since we are dealing with a single row or column.
    </p>

    <activity label="rotate2DArray">
      <statement>
        <p>
          Create a method <c>rotateRowRight</c> that rotates the elements in a
          row to the right by one position. It should return the rotated array.
        </p>
      </statement>

      <program interactive="activecode">
        <code>
          <![CDATA[

          public class Rotate {
            public static int[][] rotateRowRight(int[][] nums, int row) {
              int last = nums[row][nums[0].length - 1];
              // Write a backwards loop through the row's columns
              //  to copy elements at col-1 to col

              // Copy the last element to the first element at col 0

              return nums;
            }

            public static void main(String[] args) {
              int[][] matrix = {{3, 2, 3}, {4, 3, 6}, {8, 9, 3}, {10, 3, 3}};
              int[][] rotated = rotateRowRight(matrix, 1);
              for (int row = 0; row < rotated.length; row++) {
                for (int col = 0; col < rotated[0].length; col++) {
                  System.out.print(rotated[row][col] + " ");
                }
                System.out.println();
              }
            }
          }

          ]]>
        </code>

        <tests>
          import static org.junit.Assert.*;

          import java.io.*;
          import org.junit.*;

          public class RunestoneTests extends CodeTestHelper {
            @Test
            public void testMain() throws IOException {
              String output = getMethodOutput("main");
              String expect = "3 2 3\n6 4 3\n8 9 3\n10 3 3\n";
              boolean passed = getResults(expect, output, "Expected output from main", true);
              assertTrue(passed);
            }
            /* // giving strange error converting int to Object array.
            @Test
               public void test2()
               {
                   int[][] array = { {1, 4, 8}, {6, 7, 9}};
                   int value = 0;
                   Object[] args = {array, 0};

                   String output = getMethodOutput("rotateRowRight", args);
                   String expect = "8 1 4\n6 7 9\n";

                   boolean passed =
                           getResults(expect, output, "Testing rotateRowRight({ {1, 4,8},{6, 7, 9} }, 1)");
                   assertTrue(passed);
               }
               */
          }
        </tests>
      </program>
    </activity>
  </subsection>
</section>
